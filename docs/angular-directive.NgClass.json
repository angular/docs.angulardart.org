{"name":"NgClass","qualifiedName":"angular-directive.NgClass","comment":"<p>The <code>ngClass</code> directive allows you to dynamically style an HTML element,\nby binding to an expression that represents the classes to be bound. <code>Selector: [ng-class]</code></p>\n<p>Classes are specified by a bound model that can be a string, array, or map:</p><ul><li>\n<p>String syntax: If the expression is a space-delimited list of CSS classes,\n   CSS classes within the string are additively applied to the element.</p></li><li>\n<p>Array syntax: If the expression is an array, CSS classes are additively applied to the\n   element.</p></li><li>\n<p>Map syntax: If the expression is a map of 'key':value pairs, then the truthiness of the\n   value is used to determine which CSS classes are applied. (Here, the keys correspond to the\n   CSS classes to be applied.)</p></li></ul>\n<p>The directive won't add duplicate classes if a particular class was already set. When the\nexpression changes, CSS classes are updated to reflect the change.</p>\n<h1>Examples</h1>\n<p>Let's assume that we have a simple stylesheet that defines three CSS classes for the following\nexamples.</p>\n<pre><code>.text-remove {\n  text-decoration: line-through;\n}\n.strong {\n    font-weight: bold;\n}\n.alert {\n    color: red;\n}\n</code></pre>\n<h2>String Syntax</h2>\n<pre><code>&lt;input type=\"text\" ng-model=\"style\"\n    placeholder=\"Type an expression here, e.g.: strong\ntext-remove alert\"&gt;\n&lt;p ng-class=\"style\"&gt;Using String Syntax&lt;/p&gt;\n</code></pre>\n<p>When the user types a string into the text box, it's evaluated as a list of CSS classes to be\napplied to the &lt;p> element on which <code>ng-class</code> is applied. For example,\n\"strong text-remove\" applies both <code>bold</code> and <code>line-through</code> to the text \"Using String Syntax\".</p>\n<h2>Array Syntax</h2>\n<pre><code>&lt;input ng-model=\"style1\"\n   placeholder=\"Type an expression, e.g. strong:\"&gt;&lt;br&gt;\n&lt;input ng-model=\"style2\"\n   placeholder=\"Type an expression, e.g. text-remove:\"&gt;&lt;br&gt;\n&lt;input ng-model=\"style3\"\n   placeholder=\"Type an expression, e.g. alert:\"&gt;&lt;br&gt;\n&lt;p ng-class=\"[style1, style2, style3]\"&gt;Using Array Syntax&lt;/p&gt;\n</code></pre>\n<p>Here the array is defined by the input in three text boxes. Typing a CSS class name\ninto each box additively applies those CSS classes to the text \"Using Array Syntax\".</p>\n<h2>Map Syntax</h2>\n<pre><code>&lt;input type=\"checkbox\" ng-model=\"bold\"&gt; apply \"strong\" class\n&lt;input type=\"checkbox\" ng-model=\"deleted\"&gt; apply \"text-remove\" class\n&lt;input type=\"checkbox\" ng-model=\"caution\"&gt; apply \"alert\" class\n&lt;p ng-class=\"{\n    'text-remove': deleted,\n    'strong': bold,\n    'alert': caution}\"&gt;\n   Map Syntax Example&lt;/p&gt;\n</code></pre>\n<p>Here the map associates CSS classes to the input checkboxes. If a checkbox evaluates to true,\nthat style is applied additively to the text \"Map Syntax Example\". Note that the class\nnames are escaped in single quotes, since the map keys represent strings.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"angular-directive.NgClass.NgClass-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"ngElement":{"name":"ngElement","optional":false,"named":false,"default":false,"type":[{"outer":"angular-core-dom_internal.NgElement","inner":[]}],"value":"null","annotations":[]},"scope":{"name":"scope","optional":false,"named":false,"default":false,"type":[{"outer":"angular-core_internal.Scope","inner":[]}],"value":"null","annotations":[]},"nodeAttrs":{"name":"nodeAttrs","optional":false,"named":false,"default":false,"type":[{"outer":"angular-core-dom_internal.NodeAttrs","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"operators":{},"methods":{}},"inheritedMethods":{"setters":{"valueExpression=":{"name":"valueExpression=","qualifiedName":"angular-directive.NgClass.valueExpression=","comment":"","commentFrom":"","inheritedFrom":"angular-directive._NgClassBase.valueExpression=","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"expression":{"name":"expression","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"angular-directive.NgClass.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>angular-directive.NgClass.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"angular-directive.NgClass.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"angular-directive.NgClass.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>angular-directive.NgClass.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>angular-directive.NgClass.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"angular-directive.NgClass.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"angular-directive.NgClass.noSuchMethod","comment":"<p><a>angular-directive.NgClass.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>angular-directive.NgClass.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>angular-directive.NgClass.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>angular-directive.NgClass.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[{"name":"angular-core-annotation_src.Decorator","parameters":[]}],"generics":{}}