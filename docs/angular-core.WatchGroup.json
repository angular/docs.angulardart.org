{"name":"WatchGroup","qualifiedName":"angular-core.WatchGroup","comment":"<p><a>angular-core.WatchGroup</a> is a logical grouping of a set of watches. <a>angular-core.WatchGroup</a>s are\norganized into a hierarchical tree parent-children configuration.\n<a>angular-core.WatchGroup</a> builds upon <a>change_detection.ChangeDetector</a> and adds expression (field chains\nas in <code>a.b.c</code>) support as well as support function/closure/method (function\ninvocation as in <code>a.b()</code>) watching.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"id":{"name":"id","qualifiedName":"angular-watch_group.WatchGroup.id","comment":"<p>A unique ID for the WatchGroup</p>","final":"true","static":"false","constant":"false","type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"context":{"name":"context","qualifiedName":"angular-watch_group.WatchGroup.context","comment":"<p>All Expressions are evaluated against a context object.</p>","final":"true","static":"false","constant":"false","type":[{"outer":"dart-core.Object","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"fieldCost":{"name":"fieldCost","qualifiedName":"angular-core.WatchGroup.fieldCost","comment":"<p>STATS: Number of field watchers which are in use including child <a>angular-core.WatchGroup</a>s.</p>","commentFrom":"","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"totalFieldCost":{"name":"totalFieldCost","qualifiedName":"angular-core.WatchGroup.totalFieldCost","comment":"","commentFrom":"angular-watch_group.WatchGroup.totalFieldCost","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"collectionCost":{"name":"collectionCost","qualifiedName":"angular-core.WatchGroup.collectionCost","comment":"<p>STATS: Number of collection watchers which are in use including child <a>angular-core.WatchGroup</a>s.</p>","commentFrom":"","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"totalCollectionCost":{"name":"totalCollectionCost","qualifiedName":"angular-core.WatchGroup.totalCollectionCost","comment":"","commentFrom":"angular-watch_group.WatchGroup.totalCollectionCost","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"evalCost":{"name":"evalCost","qualifiedName":"angular-core.WatchGroup.evalCost","comment":"<p>STATS: Number of invocation watchers (closures/methods) which are in use.</p>","commentFrom":"","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"totalEvalCost":{"name":"totalEvalCost","qualifiedName":"angular-core.WatchGroup.totalEvalCost","comment":"<p>STATS: Number of invocation watchers which are in use including child <a>angular-core.WatchGroup</a>s.</p>","commentFrom":"","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{},"methods":{"watch":{"name":"watch","qualifiedName":"angular-core.WatchGroup.watch","comment":"","commentFrom":"angular-watch_group.WatchGroup.watch","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"angular-core.Watch","inner":[]}],"parameters":{"expression":{"name":"expression","optional":"false","named":"false","default":"false","type":[{"outer":"angular-core.AST","inner":[]}],"value":"null","annotations":[]},"reactionFn":{"name":"reactionFn","optional":"false","named":"false","default":"false","type":[{"outer":"angular-core.ReactionFn","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"addFieldWatch":{"name":"addFieldWatch","qualifiedName":"angular-core.WatchGroup.addFieldWatch","comment":"<p>Watch a <a>angular-core.WatchGroup.addFieldWatch.name</a> field on <a>angular-core.WatchGroup.addFieldWatch.lhs</a> represented by <a>angular-core.WatchGroup.addFieldWatch.expression</a>.</p><ul><li><a>angular-core.WatchGroup.addFieldWatch.name</a> the field to watch.</li><li><a>angular-core.WatchGroup.addFieldWatch.lhs</a> left-hand-side of the field.</li></ul>","commentFrom":"","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"angular-core.WatchRecord","inner":[{"outer":"angular-core._Handler","inner":[]}]}],"parameters":{"lhs":{"name":"lhs","optional":"false","named":"false","default":"false","type":[{"outer":"angular-core.AST","inner":[]}],"value":"null","annotations":[]},"name":{"name":"name","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"expression":{"name":"expression","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"addCollectionWatch":{"name":"addCollectionWatch","qualifiedName":"angular-core.WatchGroup.addCollectionWatch","comment":"","commentFrom":"angular-watch_group.WatchGroup.addCollectionWatch","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"angular-core.WatchRecord","inner":[{"outer":"angular-core._Handler","inner":[]}]}],"parameters":{"ast":{"name":"ast","optional":"false","named":"false","default":"false","type":[{"outer":"angular-core.AST","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"addFunctionWatch":{"name":"addFunctionWatch","qualifiedName":"angular-core.WatchGroup.addFunctionWatch","comment":"<p>Watch a <a>angular-core.WatchGroup.addFunctionWatch.fn</a> function represented by an <a>angular-core.WatchGroup.addFunctionWatch.expression</a>.</p><ul><li><a>angular-core.WatchGroup.addFunctionWatch.fn</a> function to evaluate.</li><li><a>angular-core.WatchGroup.addFunctionWatch.argsAST</a> list of <a>angular-core.AST</a>es which represent arguments passed to function.</li><li><a>angular-core.WatchGroup.addFunctionWatch.expression</a> normalized expression used for caching.</li></ul>","commentFrom":"","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"angular-core._EvalWatchRecord","inner":[]}],"parameters":{"fn":{"name":"fn","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"argsAST":{"name":"argsAST","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.List","inner":[{"outer":"angular-core.AST","inner":[]}]}],"value":"null","annotations":[]},"expression":{"name":"expression","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"addMethodWatch":{"name":"addMethodWatch","qualifiedName":"angular-core.WatchGroup.addMethodWatch","comment":"<p>Watch a method <a>angular-core.WatchGroup.addMethodWatch.name</a>ed represented by an <a>angular-core.WatchGroup.addMethodWatch.expression</a>.</p><ul><li><a>angular-core.WatchGroup.addMethodWatch.lhs</a> left-hand-side of the method.</li><li><a>angular-core.WatchGroup.addMethodWatch.name</a> name of the method.</li><li><a>angular-core.WatchGroup.addMethodWatch.argsAST</a> list of <a>angular-core.AST</a>es which represent arguments passed to method.</li><li><a>angular-core.WatchGroup.addMethodWatch.expression</a> normalized expression used for caching.</li></ul>","commentFrom":"","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"angular-core._EvalWatchRecord","inner":[]}],"parameters":{"lhs":{"name":"lhs","optional":"false","named":"false","default":"false","type":[{"outer":"angular-core.AST","inner":[]}],"value":"null","annotations":[]},"name":{"name":"name","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"argsAST":{"name":"argsAST","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.List","inner":[{"outer":"angular-core.AST","inner":[]}]}],"value":"null","annotations":[]},"expression":{"name":"expression","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"newGroup":{"name":"newGroup","qualifiedName":"angular-core.WatchGroup.newGroup","comment":"<p>Create a new child <a>angular-core.WatchGroup</a>.</p><ul><li>\n<p><a>angular-core.WatchGroup.newGroup.context</a> if present the the child <a>angular-core.WatchGroup</a> expressions will evaluate\nagainst the new <a>angular-core.WatchGroup.newGroup.context</a>. If not present than child expressions will\nevaluate on same context allowing the reuse of the expression cache.</p></li></ul>","commentFrom":"","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"angular-core.WatchGroup","inner":[]}],"parameters":{"context":{"name":"context","optional":"true","named":"false","default":"false","type":[{"outer":"dart-core.Object","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"remove":{"name":"remove","qualifiedName":"angular-core.WatchGroup.remove","comment":"<p>Remove/destroy <a>angular-core.WatchGroup</a> and all of its Watches.</p>","commentFrom":"","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"toString":{"name":"toString","qualifiedName":"angular-core.WatchGroup.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"angular-core.WatchGroup.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>angular-core.WatchGroup.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"angular-core.WatchGroup.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"angular-core.WatchGroup.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>angular-core.WatchGroup.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>angular-core.WatchGroup.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"angular-core.WatchGroup.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"angular-core.WatchGroup.noSuchMethod","comment":"<p><a>angular-core.WatchGroup.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>angular-core.WatchGroup.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>angular-core.WatchGroup.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>angular-core.WatchGroup.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}