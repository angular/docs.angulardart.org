{"name":"MockHttpRequest","qualifiedName":"angular-mock.MockHttpRequest","comment":"<p>Mock implementation of the <a>angular-mock.HttpRequest</a> object returned from the HttpBackend.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":["angular-mock.HttpRequest"],"subclass":[],"variables":{"headers":{"name":"headers","qualifiedName":"angular-mock.MockHttpRequest.headers","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"on":{"name":"on","qualifiedName":"angular-mock.MockHttpRequest.on","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-dom-html.Events","inner":[]}],"annotations":[]},"onAbort":{"name":"onAbort","qualifiedName":"angular-mock.MockHttpRequest.onAbort","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-async.Stream","inner":[{"outer":"angular-mock.ProgressEvent","inner":[]}]}],"annotations":[]},"onError":{"name":"onError","qualifiedName":"angular-mock.MockHttpRequest.onError","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-async.Stream","inner":[{"outer":"angular-mock.ProgressEvent","inner":[]}]}],"annotations":[]},"onLoad":{"name":"onLoad","qualifiedName":"angular-mock.MockHttpRequest.onLoad","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-async.Stream","inner":[{"outer":"angular-mock.ProgressEvent","inner":[]}]}],"annotations":[]},"onLoadEnd":{"name":"onLoadEnd","qualifiedName":"angular-mock.MockHttpRequest.onLoadEnd","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-async.Stream","inner":[{"outer":"angular-mock.ProgressEvent","inner":[]}]}],"annotations":[]},"onLoadStart":{"name":"onLoadStart","qualifiedName":"angular-mock.MockHttpRequest.onLoadStart","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-async.Stream","inner":[{"outer":"angular-mock.ProgressEvent","inner":[]}]}],"annotations":[]},"onProgress":{"name":"onProgress","qualifiedName":"angular-mock.MockHttpRequest.onProgress","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-async.Stream","inner":[{"outer":"angular-mock.ProgressEvent","inner":[]}]}],"annotations":[]},"onReadyStateChange":{"name":"onReadyStateChange","qualifiedName":"angular-mock.MockHttpRequest.onReadyStateChange","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-async.Stream","inner":[{"outer":"angular-mock.ProgressEvent","inner":[]}]}],"annotations":[]},"onTimeout":{"name":"onTimeout","qualifiedName":"angular-mock.MockHttpRequest.onTimeout","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-async.Stream","inner":[{"outer":"angular-mock.ProgressEvent","inner":[]}]}],"annotations":[]},"readyState":{"name":"readyState","qualifiedName":"angular-mock.MockHttpRequest.readyState","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"response":{"name":"response","qualifiedName":"angular-mock.MockHttpRequest.response","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"responseType":{"name":"responseType","qualifiedName":"angular-mock.MockHttpRequest.responseType","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"responseXml":{"name":"responseXml","qualifiedName":"angular-mock.MockHttpRequest.responseXml","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"status":{"name":"status","qualifiedName":"angular-mock.MockHttpRequest.status","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"statusText":{"name":"statusText","qualifiedName":"angular-mock.MockHttpRequest.statusText","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"supportsCrossOrigin":{"name":"supportsCrossOrigin","qualifiedName":"angular-mock.MockHttpRequest.supportsCrossOrigin","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"supportsLoadEndEvent":{"name":"supportsLoadEndEvent","qualifiedName":"angular-mock.MockHttpRequest.supportsLoadEndEvent","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"supportsOverrideMimeType":{"name":"supportsOverrideMimeType","qualifiedName":"angular-mock.MockHttpRequest.supportsOverrideMimeType","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"supportsProgressEvent":{"name":"supportsProgressEvent","qualifiedName":"angular-mock.MockHttpRequest.supportsProgressEvent","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"timeout":{"name":"timeout","qualifiedName":"angular-mock.MockHttpRequest.timeout","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"upload":{"name":"upload","qualifiedName":"angular-mock.MockHttpRequest.upload","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-dom-html.HttpRequestUpload","inner":[]}],"annotations":[]},"withCredentials":{"name":"withCredentials","qualifiedName":"angular-mock.MockHttpRequest.withCredentials","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]}},"inheritedVariables":{"readyState":{"name":"readyState","qualifiedName":"angular-mock.HttpRequest.readyState","comment":"<p>Indicator of the current state of the request:</p><table>\n  <tr>\n    <td>Value</td>\n    <td>State</td>\n    <td>Meaning</td>\n  </tr>\n  <tr>\n    <td>0</td>\n    <td>unsent</td>\n    <td><code>open()</code> has not yet been called</td>\n  </tr>\n  <tr>\n    <td>1</td>\n    <td>opened</td>\n    <td><code>send()</code> has not yet been called</td>\n  </tr>\n  <tr>\n    <td>2</td>\n    <td>headers received</td>\n    <td><code>sent()</code> has been called; response headers and <code>status</code> are available</td>\n  </tr>\n  <tr>\n    <td>3</td> <td>loading</td> <td><code>responseText</code> holds some data</td>\n  </tr>\n  <tr>\n    <td>4</td> <td>done</td> <td>request is complete</td>\n  </tr>\n</table>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["XMLHttpRequest.readyState"]}]},"responseText":{"name":"responseText","qualifiedName":"angular-mock.HttpRequest.responseText","comment":"<p>The response in String form or empty String on failure.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["XMLHttpRequest.responseText"]}]},"responseType":{"name":"responseType","qualifiedName":"angular-mock.HttpRequest.responseType","comment":"<p><a>dart-core.String</a> telling the server the desired response format.</p>\n<p>Default is <code>String</code>.\nOther options are one of 'arraybuffer', 'blob', 'document', 'json',\n'text'. Some newer browsers will throw NS<em>ERROR</em>DOM<em>INVALID</em>ACCESS_ERR if\n<code>responseType</code> is set while performing a synchronous request.</p>\n<p>See also: <a href=\"https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest#responseType\">MDN responseType</a></p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["XMLHttpRequest.responseType"]}]},"responseXml":{"name":"responseXml","qualifiedName":"angular-mock.HttpRequest.responseXml","comment":"<p>The request response, or null on failure.</p>\n<p>The response is processed as\n<code>text/xml</code> stream, unless responseType = 'document' and the request is\nsynchronous.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"angular-mock.Document","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["XMLHttpRequest.responseXML"]}]},"status":{"name":"status","qualifiedName":"angular-mock.HttpRequest.status","comment":"<p>The http result code from the request (200, 404, etc).\nSee also: <a href=\"http://en.wikipedia.org/wiki/List_of_HTTP_status_codes\">Http Status Codes</a></p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["XMLHttpRequest.status"]}]},"statusText":{"name":"statusText","qualifiedName":"angular-mock.HttpRequest.statusText","comment":"<p>The request response string (such as \\\"200 OK\\\").\nSee also: <a href=\"http://en.wikipedia.org/wiki/List_of_HTTP_status_codes\">Http Status Codes</a></p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["XMLHttpRequest.statusText"]}]},"timeout":{"name":"timeout","qualifiedName":"angular-mock.HttpRequest.timeout","comment":"<p>Length of time before a request is automatically terminated.</p>\n<p>When the time has passed, a TimeoutEvent is dispatched.</p>\n<p>If <a>angular-mock.HttpRequest.timeout</a> is set to 0, then the request will not time out.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#timeout\">XMLHttpRequest.timeout</a>\nfrom MDN.</p></li><li>\n<p><a href=\"http://www.w3.org/TR/XMLHttpRequest/#the-timeout-attribute\">The timeout attribute</a>\nfrom W3C.</p></li></ul>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["XMLHttpRequest.timeout"]},{"name":"metadata.Experimental","parameters":[]}]},"upload":{"name":"upload","qualifiedName":"angular-mock.HttpRequest.upload","comment":"<p><a>angular-mock.EventTarget</a> that can hold listeners to track the progress of the request.\nThe events fired will be members of HttpRequestUploadEvents.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-dom-html.HttpRequestUpload","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["XMLHttpRequest.upload"]},{"name":"metadata.Unstable","parameters":[]}]},"withCredentials":{"name":"withCredentials","qualifiedName":"angular-mock.HttpRequest.withCredentials","comment":"<p>True if cross-site requests should use credentials such as cookies\nor authorization headers; false otherwise.</p>\n<p>This value is ignored for same-site requests.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["XMLHttpRequest.withCredentials"]}]}},"methods":{"setters":{},"getters":{"responseHeaders":{"name":"responseHeaders","qualifiedName":"angular-mock.MockHttpRequest.responseHeaders","comment":"<p>Returns all response headers as a key-value map.</p>\n<p>Multiple values for the same header key can be combined into one,\nseparated by a comma and a space.</p>\n<p>See: http://www.w3.org/TR/XMLHttpRequest/#the-getresponseheader()-method</p>","commentFrom":"angular-mock.HttpRequest.responseHeaders","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"parameters":{},"annotations":[]},"responseText":{"name":"responseText","qualifiedName":"angular-mock.MockHttpRequest.responseText","comment":"","commentFrom":"angular-mock.MockHttpRequest.responseText","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"angular-mock.MockHttpRequest.MockHttpRequest-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"headers":{"name":"headers","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"response":{"name":"response","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"status":{"name":"status","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{"abort":{"name":"abort","qualifiedName":"angular-mock.MockHttpRequest.abort","comment":"<p>Stop the current request.</p>\n<p>The request can only be stopped if readyState is <code>HEADERS_RECIEVED</code> or\n<code>LOADING</code>. If this method is not in the process of being sent, the method\nhas no effect.</p>","commentFrom":"angular-mock.HttpRequest.abort","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"addEventListener":{"name":"addEventListener","qualifiedName":"angular-mock.MockHttpRequest.addEventListener","comment":"","commentFrom":"angular-mock.EventTarget.addEventListener","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"listener":{"name":"listener","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.EventListener","inner":[]}],"value":null,"annotations":[]},"type":{"name":"type","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"useCapture":{"name":"useCapture","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"dispatchEvent":{"name":"dispatchEvent","qualifiedName":"angular-mock.MockHttpRequest.dispatchEvent","comment":"","commentFrom":"angular-mock.EventTarget.dispatchEvent","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"event":{"name":"event","optional":false,"named":false,"default":false,"type":[{"outer":"angular-mock.Event","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getAllResponseHeaders":{"name":"getAllResponseHeaders","qualifiedName":"angular-mock.MockHttpRequest.getAllResponseHeaders","comment":"<p>Retrieve all the response headers from a request.</p>\n<p><code>null</code> if no headers have been received. For multipart requests,\n<code>getAllResponseHeaders</code> will return the response headers for the current\npart of the request.</p>\n<p>See also <a href=\"http://en.wikipedia.org/wiki/List_of_HTTP_header_fields#Responses\">HTTP response headers</a>\nfor a list of common response headers.</p>","commentFrom":"angular-mock.HttpRequest.getAllResponseHeaders","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"getResponseHeader":{"name":"getResponseHeader","qualifiedName":"angular-mock.MockHttpRequest.getResponseHeader","comment":"<p>Return the response header named <code>header</code>, or null if not found.</p>\n<p>See also <a href=\"http://en.wikipedia.org/wiki/List_of_HTTP_header_fields#Responses\">HTTP response headers</a>\nfor a list of common response headers.</p>","commentFrom":"angular-mock.HttpRequest.getResponseHeader","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"header":{"name":"header","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"open":{"name":"open","qualifiedName":"angular-mock.MockHttpRequest.open","comment":"<p>Specify the desired <code>url</code>, and <code>method</code> to use in making the request.</p>\n<p>By default the request is done asyncronously, with no user or password\nauthentication information. If <code>async</code> is false, the request will be send\nsynchronously.</p>\n<p>Calling <code>open</code> again on a currently active request is equivalent to\ncalling <code>abort</code>.</p>\n<p>Note: Most simple HTTP requests can be accomplished using the getString,\nrequest, requestCrossOrigin, or postFormData methods. Use of this\n<code>open</code> method is intended only for more complext HTTP requests where\nfiner-grained control is needed.</p>","commentFrom":"angular-mock.HttpRequest.open","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"async":{"name":"async","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]},"method":{"name":"method","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"password":{"name":"password","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"url":{"name":"url","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"user":{"name":"user","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"overrideMimeType":{"name":"overrideMimeType","qualifiedName":"angular-mock.MockHttpRequest.overrideMimeType","comment":"<p>Specify a particular MIME type (such as <code>text/xml</code>) desired for the\nresponse.</p>\n<p>This value must be set before the request has been sent. See also the list\nof <a href=\"http://en.wikipedia.org/wiki/Internet_media_type#List_of_common_media_types\">common MIME types</a></p>","commentFrom":"angular-mock.HttpRequest.overrideMimeType","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"override":{"name":"override","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"removeEventListener":{"name":"removeEventListener","qualifiedName":"angular-mock.MockHttpRequest.removeEventListener","comment":"","commentFrom":"angular-mock.EventTarget.removeEventListener","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"listener":{"name":"listener","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.EventListener","inner":[]}],"value":null,"annotations":[]},"type":{"name":"type","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"useCapture":{"name":"useCapture","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"send":{"name":"send","qualifiedName":"angular-mock.MockHttpRequest.send","comment":"<p>Send the request with any given <code>data</code>.</p>\n<p>Note: Most simple HTTP requests can be accomplished using the getString,\nrequest, requestCrossOrigin, or postFormData methods. Use of this\n<code>send</code> method is intended only for more complext HTTP requests where\nfiner-grained control is needed.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest#send%28%29\">XMLHttpRequest.send</a>\nfrom MDN.</p></li></ul>","commentFrom":"angular-mock.HttpRequest.send","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"data":{"name":"data","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"setRequestHeader":{"name":"setRequestHeader","qualifiedName":"angular-mock.MockHttpRequest.setRequestHeader","comment":"<p>Sets the value of an HTTP requst header.</p>\n<p>This method should be called after the request is opened, but before\nthe request is sent.</p>\n<p>Multiple calls with the same header will combine all their values into a\nsingle header.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest#send%28%29\">XMLHttpRequest.setRequestHeader</a>\nfrom MDN.</p></li><li>\n<p><a href=\"http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader(\">The setRequestHeader() method</a>-method) from\nW3C.</p></li></ul>","commentFrom":"angular-mock.HttpRequest.setRequestHeader","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"header":{"name":"header","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"angular-mock.MockHttpRequest.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>angular-mock.MockHttpRequest.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"dart-core.Object.hashCode","inheritedFrom":"angular-mock.Interceptor.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"on":{"name":"on","qualifiedName":"angular-mock.MockHttpRequest.on","comment":"<p>This is an ease-of-use accessor for event streams which should only be\nused when an explicit accessor is not available.</p>","commentFrom":"","inheritedFrom":"angular-mock.EventTarget.on","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.Events","inner":[]}],"parameters":{},"annotations":[]},"onAbort":{"name":"onAbort","qualifiedName":"angular-mock.MockHttpRequest.onAbort","comment":"<p>Stream of <code>abort</code> events handled by this <a>angular-mock.HttpRequestEventTarget</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.HttpRequestEventTarget.onAbort","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular-mock.ProgressEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["XMLHttpRequestEventTarget.onabort"]},{"name":"metadata.Experimental","parameters":[]}]},"onError":{"name":"onError","qualifiedName":"angular-mock.MockHttpRequest.onError","comment":"<p>Stream of <code>error</code> events handled by this <a>angular-mock.HttpRequestEventTarget</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.HttpRequestEventTarget.onError","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular-mock.ProgressEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["XMLHttpRequestEventTarget.onerror"]},{"name":"metadata.Experimental","parameters":[]}]},"onLoad":{"name":"onLoad","qualifiedName":"angular-mock.MockHttpRequest.onLoad","comment":"<p>Stream of <code>load</code> events handled by this <a>angular-mock.HttpRequestEventTarget</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.HttpRequestEventTarget.onLoad","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular-mock.ProgressEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["XMLHttpRequestEventTarget.onload"]},{"name":"metadata.Experimental","parameters":[]}]},"onLoadEnd":{"name":"onLoadEnd","qualifiedName":"angular-mock.MockHttpRequest.onLoadEnd","comment":"<p>Stream of <code>loadend</code> events handled by this <a>angular-mock.HttpRequestEventTarget</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.HttpRequestEventTarget.onLoadEnd","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular-mock.ProgressEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["XMLHttpRequestEventTarget.onloadend"]},{"name":"metadata.SupportedBrowser","parameters":["Chrome"]},{"name":"metadata.SupportedBrowser","parameters":["Firefox"]},{"name":"metadata.SupportedBrowser","parameters":["Internet Explorer","10"]},{"name":"metadata.SupportedBrowser","parameters":["Safari"]},{"name":"metadata.Experimental","parameters":[]}]},"onLoadStart":{"name":"onLoadStart","qualifiedName":"angular-mock.MockHttpRequest.onLoadStart","comment":"<p>Stream of <code>loadstart</code> events handled by this <a>angular-mock.HttpRequestEventTarget</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.HttpRequestEventTarget.onLoadStart","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular-mock.ProgressEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["XMLHttpRequestEventTarget.onloadstart"]},{"name":"metadata.Experimental","parameters":[]}]},"onProgress":{"name":"onProgress","qualifiedName":"angular-mock.MockHttpRequest.onProgress","comment":"<p>Stream of <code>progress</code> events handled by this <a>angular-mock.HttpRequestEventTarget</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.HttpRequestEventTarget.onProgress","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular-mock.ProgressEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["XMLHttpRequestEventTarget.onprogress"]},{"name":"metadata.SupportedBrowser","parameters":["Chrome"]},{"name":"metadata.SupportedBrowser","parameters":["Firefox"]},{"name":"metadata.SupportedBrowser","parameters":["Internet Explorer","10"]},{"name":"metadata.SupportedBrowser","parameters":["Safari"]},{"name":"metadata.Experimental","parameters":[]}]},"onReadyStateChange":{"name":"onReadyStateChange","qualifiedName":"angular-mock.MockHttpRequest.onReadyStateChange","comment":"<p>Stream of <code>readystatechange</code> events handled by this <a>angular-mock.HttpRequest</a>.</p>\n<p>Event listeners to be notified every time the <a>angular-mock.HttpRequest</a>\nobject's <code>readyState</code> changes values.</p>","commentFrom":"","inheritedFrom":"angular-mock.HttpRequest.onReadyStateChange","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular-mock.ProgressEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["XMLHttpRequest.onreadystatechange"]}]},"onTimeout":{"name":"onTimeout","qualifiedName":"angular-mock.MockHttpRequest.onTimeout","comment":"<p>Stream of <code>timeout</code> events handled by this <a>angular-mock.HttpRequestEventTarget</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.HttpRequestEventTarget.onTimeout","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular-mock.ProgressEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["XMLHttpRequestEventTarget.ontimeout"]},{"name":"metadata.Experimental","parameters":[]}]},"response":{"name":"response","qualifiedName":"angular-mock.MockHttpRequest.response","comment":"<p>The data received as a reponse from the request.</p>\n<p>The data could be in the\nform of a <a>dart-core.String</a>, <a>dart-typed_data.ByteBuffer</a>, <a>angular-mock.Document</a>, <a>dart-dom-html.Blob</a>, or json (also a\n<a>dart-core.String</a>). <code>null</code> indicates request failure.</p>","commentFrom":"","inheritedFrom":"angular-mock.HttpRequest.response","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["XMLHttpRequest.response"]},{"name":"metadata.SupportedBrowser","parameters":["Chrome"]},{"name":"metadata.SupportedBrowser","parameters":["Firefox"]},{"name":"metadata.SupportedBrowser","parameters":["Internet Explorer","10"]},{"name":"metadata.SupportedBrowser","parameters":["Safari"]}]},"responseHeaders":{"name":"responseHeaders","qualifiedName":"angular-mock.MockHttpRequest.responseHeaders","comment":"<p>Returns all response headers as a key-value map.</p>\n<p>Multiple values for the same header key can be combined into one,\nseparated by a comma and a space.</p>\n<p>See: http://www.w3.org/TR/XMLHttpRequest/#the-getresponseheader()-method</p>","commentFrom":"","inheritedFrom":"angular-mock.HttpRequest.responseHeaders","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"angular-mock.MockHttpRequest.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"dart-core.Object.runtimeType","inheritedFrom":"angular-mock.Interceptor.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"angular-mock.MockHttpRequest.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>angular-mock.MockHttpRequest.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>angular-mock.MockHttpRequest.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"dart-core.Object.==","inheritedFrom":"angular-mock.Interceptor.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"abort":{"name":"abort","qualifiedName":"angular-mock.MockHttpRequest.abort","comment":"<p>Stop the current request.</p>\n<p>The request can only be stopped if readyState is <code>HEADERS_RECIEVED</code> or\n<code>LOADING</code>. If this method is not in the process of being sent, the method\nhas no effect.</p>","commentFrom":"","inheritedFrom":"angular-mock.HttpRequest.abort","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["XMLHttpRequest.abort"]}]},"addEventListener":{"name":"addEventListener","qualifiedName":"angular-mock.MockHttpRequest.addEventListener","comment":"","commentFrom":"","inheritedFrom":"angular-mock.EventTarget.addEventListener","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"listener":{"name":"listener","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.EventListener","inner":[]}],"value":null,"annotations":[]},"type":{"name":"type","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"useCapture":{"name":"useCapture","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["EventTarget.addEventListener"]}]},"dispatchEvent":{"name":"dispatchEvent","qualifiedName":"angular-mock.MockHttpRequest.dispatchEvent","comment":"","commentFrom":"","inheritedFrom":"angular-mock.EventTarget.dispatchEvent","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"event":{"name":"event","optional":false,"named":false,"default":false,"type":[{"outer":"angular-mock.Event","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["EventTarget.dispatchEvent"]}]},"getAllResponseHeaders":{"name":"getAllResponseHeaders","qualifiedName":"angular-mock.MockHttpRequest.getAllResponseHeaders","comment":"<p>Retrieve all the response headers from a request.</p>\n<p><code>null</code> if no headers have been received. For multipart requests,\n<code>getAllResponseHeaders</code> will return the response headers for the current\npart of the request.</p>\n<p>See also <a href=\"http://en.wikipedia.org/wiki/List_of_HTTP_header_fields#Responses\">HTTP response headers</a>\nfor a list of common response headers.</p>","commentFrom":"","inheritedFrom":"angular-mock.HttpRequest.getAllResponseHeaders","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["XMLHttpRequest.getAllResponseHeaders"]},{"name":"metadata.Unstable","parameters":[]}]},"getResponseHeader":{"name":"getResponseHeader","qualifiedName":"angular-mock.MockHttpRequest.getResponseHeader","comment":"<p>Return the response header named <code>header</code>, or null if not found.</p>\n<p>See also <a href=\"http://en.wikipedia.org/wiki/List_of_HTTP_header_fields#Responses\">HTTP response headers</a>\nfor a list of common response headers.</p>","commentFrom":"","inheritedFrom":"angular-mock.HttpRequest.getResponseHeader","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"header":{"name":"header","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["XMLHttpRequest.getResponseHeader"]},{"name":"metadata.Unstable","parameters":[]}]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"angular-mock.MockHttpRequest.noSuchMethod","comment":"<p><a>angular-mock.MockHttpRequest.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>angular-mock.MockHttpRequest.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>angular-mock.MockHttpRequest.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>angular-mock.MockHttpRequest.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"dart-core.Object.noSuchMethod","inheritedFrom":"angular-mock.Interceptor.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"open":{"name":"open","qualifiedName":"angular-mock.MockHttpRequest.open","comment":"<p>Specify the desired <code>url</code>, and <code>method</code> to use in making the request.</p>\n<p>By default the request is done asyncronously, with no user or password\nauthentication information. If <code>async</code> is false, the request will be send\nsynchronously.</p>\n<p>Calling <code>open</code> again on a currently active request is equivalent to\ncalling <code>abort</code>.</p>\n<p>Note: Most simple HTTP requests can be accomplished using the <a>dart-dom-html.HttpRequest.getString</a>,\n<a>dart-dom-html.HttpRequest.request</a>, <a>dart-dom-html.HttpRequest.requestCrossOrigin</a>, or <a>dart-dom-html.HttpRequest.postFormData</a> methods. Use of this\n<code>open</code> method is intended only for more complext HTTP requests where\nfiner-grained control is needed.</p>","commentFrom":"","inheritedFrom":"angular-mock.HttpRequest.open","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"async":{"name":"async","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]},"method":{"name":"method","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"password":{"name":"password","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"url":{"name":"url","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"user":{"name":"user","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["XMLHttpRequest.open"]}]},"overrideMimeType":{"name":"overrideMimeType","qualifiedName":"angular-mock.MockHttpRequest.overrideMimeType","comment":"<p>Specify a particular MIME type (such as <code>text/xml</code>) desired for the\nresponse.</p>\n<p>This value must be set before the request has been sent. See also the list\nof <a href=\"http://en.wikipedia.org/wiki/Internet_media_type#List_of_common_media_types\">common MIME types</a></p>","commentFrom":"","inheritedFrom":"angular-mock.HttpRequest.overrideMimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"override":{"name":"override","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["XMLHttpRequest.overrideMimeType"]},{"name":"metadata.SupportedBrowser","parameters":["Chrome"]},{"name":"metadata.SupportedBrowser","parameters":["Firefox"]},{"name":"metadata.SupportedBrowser","parameters":["Safari"]}]},"removeEventListener":{"name":"removeEventListener","qualifiedName":"angular-mock.MockHttpRequest.removeEventListener","comment":"","commentFrom":"","inheritedFrom":"angular-mock.EventTarget.removeEventListener","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"listener":{"name":"listener","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.EventListener","inner":[]}],"value":null,"annotations":[]},"type":{"name":"type","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"useCapture":{"name":"useCapture","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["EventTarget.removeEventListener"]}]},"send":{"name":"send","qualifiedName":"angular-mock.MockHttpRequest.send","comment":"<p>Send the request with any given <code>data</code>.</p>\n<p>Note: Most simple HTTP requests can be accomplished using the <a>dart-dom-html.HttpRequest.getString</a>,\n<a>dart-dom-html.HttpRequest.request</a>, <a>dart-dom-html.HttpRequest.requestCrossOrigin</a>, or <a>dart-dom-html.HttpRequest.postFormData</a> methods. Use of this\n<code>send</code> method is intended only for more complext HTTP requests where\nfiner-grained control is needed.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest#send%28%29\">XMLHttpRequest.send</a>\nfrom MDN.</p></li></ul>","commentFrom":"","inheritedFrom":"angular-mock.HttpRequest.send","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"data":{"name":"data","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["XMLHttpRequest.send"]}]},"setRequestHeader":{"name":"setRequestHeader","qualifiedName":"angular-mock.MockHttpRequest.setRequestHeader","comment":"<p>Sets the value of an HTTP requst header.</p>\n<p>This method should be called after the request is opened, but before\nthe request is sent.</p>\n<p>Multiple calls with the same header will combine all their values into a\nsingle header.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest#send%28%29\">XMLHttpRequest.setRequestHeader</a>\nfrom MDN.</p></li><li>\n<p><a href=\"http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader(\">The setRequestHeader() method</a>-method) from\nW3C.</p></li></ul>","commentFrom":"","inheritedFrom":"angular-mock.HttpRequest.setRequestHeader","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"header":{"name":"header","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["XMLHttpRequest.setRequestHeader"]}]},"toString":{"name":"toString","qualifiedName":"angular-mock.MockHttpRequest.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"angular-mock.Interceptor.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}