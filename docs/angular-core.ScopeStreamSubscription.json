{"name":"ScopeStreamSubscription","qualifiedName":"angular-core.ScopeStreamSubscription","comment":"","isAbstract":false,"superclass":"dart-core.Object","implements":["angular-core.StreamSubscription"],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{"isPaused":{"name":"isPaused","qualifiedName":"angular-core.ScopeStreamSubscription.isPaused","comment":"<p>Returns true if the StreamSubscription is paused.</p>","commentFrom":"angular.StreamSubscription.isPaused","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"angular-core.ScopeStreamSubscription.ScopeStreamSubscription-","comment":"","commentFrom":"","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{"_scopeStream":{"name":"_scopeStream","optional":"false","named":"false","default":"false","type":[{"outer":"angular-core.ScopeStream","inner":[]}],"value":"null","annotations":[]},"_onData":{"name":"_onData","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"operators":{},"methods":{"cancel":{"name":"cancel","qualifiedName":"angular-core.ScopeStreamSubscription.cancel","comment":"<p>Cancels this subscription. It will no longer receive events.</p>\n<p>If an event is currently firing, this unsubscription will only\ntake effect after all subscribers have received the current event.</p>\n<p>Returns a future if the cancel-operation is not completed synchronously.\nOtherwise returns <code>null</code>.</p>","commentFrom":"angular.StreamSubscription.cancel","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{},"annotations":[]},"onData":{"name":"onData","qualifiedName":"angular-core.ScopeStreamSubscription.onData","comment":"<p>Set or override the data event handler of this subscription.</p>","commentFrom":"angular.StreamSubscription.onData","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"void","inner":[]}],"parameters":{"handleData":{"name":"handleData","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"onError":{"name":"onError","qualifiedName":"angular-core.ScopeStreamSubscription.onError","comment":"<p>Set or override the error event handler of this subscription.</p>\n<p>This method overrides the handler that has been set at the invocation of\nStream.listen.</p>","commentFrom":"angular.StreamSubscription.onError","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"void","inner":[]}],"parameters":{"handleError":{"name":"handleError","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"onDone":{"name":"onDone","qualifiedName":"angular-core.ScopeStreamSubscription.onDone","comment":"<p>Set or override the done event handler of this subscription.</p>","commentFrom":"angular.StreamSubscription.onDone","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"void","inner":[]}],"parameters":{"handleDone":{"name":"handleDone","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"pause":{"name":"pause","qualifiedName":"angular-core.ScopeStreamSubscription.pause","comment":"<p>Request that the stream pauses events until further notice.</p>\n<p>If <a>angular-core.ScopeStreamSubscription.pause.resumeSignal</a> is provided, the stream will undo the pause\nwhen the future completes. If the future completes with an error,\nit will not be handled!</p>\n<p>A call to <a>angular-core.ScopeStreamSubscription.resume</a> will also undo a pause.</p>\n<p>If the subscription is paused more than once, an equal number\nof resumes must be performed to resume the stream.</p>\n<p>Currently DOM streams silently drop events when the stream is paused. This\nis a bug and will be fixed.</p>","commentFrom":"angular.StreamSubscription.pause","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"void","inner":[]}],"parameters":{"resumeSignal":{"name":"resumeSignal","optional":"true","named":"false","default":"false","type":[{"outer":"dart-async.Future","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"resume":{"name":"resume","qualifiedName":"angular-core.ScopeStreamSubscription.resume","comment":"<p>Resume after a pause.</p>","commentFrom":"angular.StreamSubscription.resume","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"asFuture":{"name":"asFuture","qualifiedName":"angular-core.ScopeStreamSubscription.asFuture","comment":"<p>Returns a future that handles the <a>angular-core.ScopeStreamSubscription.onDone</a> and <a>angular-core.ScopeStreamSubscription.onError</a> callbacks.</p>\n<p>This method <em>overwrites</em> the existing <a>angular-core.ScopeStreamSubscription.onDone</a> and <a>angular-core.ScopeStreamSubscription.onError</a> callbacks\nwith new ones that complete the returned future.</p>\n<p>In case of an error the subscription will automatically cancel (even\nwhen it was listening with <code>cancelOnError</code> set to <code>false</code>).</p>\n<p>In case of a <code>done</code> event the future completes with the given\n<a>angular-core.ScopeStreamSubscription.asFuture.futureValue</a>.</p>","commentFrom":"angular.StreamSubscription.asFuture","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"futureValue":{"name":"futureValue","optional":"true","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"angular-core.ScopeStreamSubscription.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>angular-core.ScopeStreamSubscription.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"angular-core.ScopeStreamSubscription.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"isPaused":{"name":"isPaused","qualifiedName":"angular-core.ScopeStreamSubscription.isPaused","comment":"<p>Returns true if the <a>angular-core.StreamSubscription</a> is paused.</p>","commentFrom":"","inheritedFrom":"angular-core.StreamSubscription.isPaused","static":"false","abstract":"true","constant":"false","return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"angular-core.ScopeStreamSubscription.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>angular-core.ScopeStreamSubscription.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>angular-core.ScopeStreamSubscription.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"angular-core.ScopeStreamSubscription.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"angular-core.ScopeStreamSubscription.noSuchMethod","comment":"<p><a>angular-core.ScopeStreamSubscription.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>angular-core.ScopeStreamSubscription.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>angular-core.ScopeStreamSubscription.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>angular-core.ScopeStreamSubscription.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"cancel":{"name":"cancel","qualifiedName":"angular-core.ScopeStreamSubscription.cancel","comment":"<p>Cancels this subscription. It will no longer receive events.</p>\n<p>If an event is currently firing, this unsubscription will only\ntake effect after all subscribers have received the current event.</p>\n<p>Returns a future if the cancel-operation is not completed synchronously.\nOtherwise returns <code>null</code>.</p>","commentFrom":"","inheritedFrom":"angular-core.StreamSubscription.cancel","static":"false","abstract":"true","constant":"false","return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{},"annotations":[]},"onData":{"name":"onData","qualifiedName":"angular-core.ScopeStreamSubscription.onData","comment":"<p>Set or override the data event handler of this subscription.</p>","commentFrom":"","inheritedFrom":"angular-core.StreamSubscription.onData","static":"false","abstract":"true","constant":"false","return":[{"outer":"void","inner":[]}],"parameters":{"handleData":{"name":"handleData","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"onError":{"name":"onError","qualifiedName":"angular-core.ScopeStreamSubscription.onError","comment":"<p>Set or override the error event handler of this subscription.</p>\n<p>This method overrides the handler that has been set at the invocation of\n<a>dart-async.Stream.listen</a>.</p>","commentFrom":"","inheritedFrom":"angular-core.StreamSubscription.onError","static":"false","abstract":"true","constant":"false","return":[{"outer":"void","inner":[]}],"parameters":{"handleError":{"name":"handleError","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"onDone":{"name":"onDone","qualifiedName":"angular-core.ScopeStreamSubscription.onDone","comment":"<p>Set or override the done event handler of this subscription.</p>","commentFrom":"","inheritedFrom":"angular-core.StreamSubscription.onDone","static":"false","abstract":"true","constant":"false","return":[{"outer":"void","inner":[]}],"parameters":{"handleDone":{"name":"handleDone","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"pause":{"name":"pause","qualifiedName":"angular-core.ScopeStreamSubscription.pause","comment":"<p>Request that the stream pauses events until further notice.</p>\n<p>If <a>angular-core.ScopeStreamSubscription.pause.resumeSignal</a> is provided, the stream will undo the pause\nwhen the future completes. If the future completes with an error,\nit will not be handled!</p>\n<p>A call to <a>angular-core.ScopeStreamSubscription.resume</a> will also undo a pause.</p>\n<p>If the subscription is paused more than once, an equal number\nof resumes must be performed to resume the stream.</p>\n<p>Currently DOM streams silently drop events when the stream is paused. This\nis a bug and will be fixed.</p>","commentFrom":"","inheritedFrom":"angular-core.StreamSubscription.pause","static":"false","abstract":"true","constant":"false","return":[{"outer":"void","inner":[]}],"parameters":{"resumeSignal":{"name":"resumeSignal","optional":"true","named":"false","default":"false","type":[{"outer":"dart-async.Future","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"resume":{"name":"resume","qualifiedName":"angular-core.ScopeStreamSubscription.resume","comment":"<p>Resume after a pause.</p>","commentFrom":"","inheritedFrom":"angular-core.StreamSubscription.resume","static":"false","abstract":"true","constant":"false","return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"asFuture":{"name":"asFuture","qualifiedName":"angular-core.ScopeStreamSubscription.asFuture","comment":"<p>Returns a future that handles the <a>angular-core.ScopeStreamSubscription.onDone</a> and <a>angular-core.ScopeStreamSubscription.onError</a> callbacks.</p>\n<p>This method <em>overwrites</em> the existing <a>angular-core.ScopeStreamSubscription.onDone</a> and <a>angular-core.ScopeStreamSubscription.onError</a> callbacks\nwith new ones that complete the returned future.</p>\n<p>In case of an error the subscription will automatically cancel (even\nwhen it was listening with <code>cancelOnError</code> set to <code>false</code>).</p>\n<p>In case of a <code>done</code> event the future completes with the given\n<a>angular-core.ScopeStreamSubscription.asFuture.futureValue</a>.</p>","commentFrom":"","inheritedFrom":"angular-core.StreamSubscription.asFuture","static":"false","abstract":"true","constant":"false","return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"futureValue":{"name":"futureValue","optional":"true","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}