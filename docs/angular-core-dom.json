{"name":"angular-core-dom","qualifiedName":"angular-core-dom","comment":"","variables":{},"functions":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{"directiveSelectorFactory":{"name":"directiveSelectorFactory","qualifiedName":"angular-core-dom.directiveSelectorFactory","comment":"<p>Factory method for creating a <a>angular-core-dom.DirectiveSelector</a>.</p>","commentFrom":"","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"angular-core-dom.DirectiveSelector","inner":[]}],"parameters":{"directives":{"name":"directives","optional":"false","named":"false","default":"false","type":[{"outer":"angular-core-dom.DirectiveMap","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"forceNewDirectivesAndFilters":{"name":"forceNewDirectivesAndFilters","qualifiedName":"angular-core-dom.forceNewDirectivesAndFilters","comment":"<p>Creates a child injector that allows loading new directives, filters and\nservices from the provided modules.</p>","commentFrom":"","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"di.Injector","inner":[]}],"parameters":{"injector":{"name":"injector","optional":"false","named":"false","default":"false","type":[{"outer":"di.Injector","inner":[]}],"value":"null","annotations":[]},"modules":{"name":"modules","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.List","inner":[{"outer":"angular-core-dom.Module","inner":[]}]}],"value":"null","annotations":[]}},"annotations":[]},"cloneElements":{"name":"cloneElements","qualifiedName":"angular-core-dom.cloneElements","comment":"","commentFrom":"","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.List","inner":[{"outer":"dart-dom-html.Node","inner":[]}]}],"parameters":{"elements":{"name":"elements","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"classes":{"class":[{"name":"NullTreeSanitizer","qualifiedName":"angular-core-dom.NullTreeSanitizer"},{"name":"TemplateCache","qualifiedName":"angular-core-dom.TemplateCache","preview":"<p>Infinite cache service for templates loaded from URLs.</p>"},{"name":"NodeCursor","qualifiedName":"angular-core-dom.NodeCursor"},{"name":"NgAttrMustacheDirective","qualifiedName":"angular-core-dom.NgAttrMustacheDirective"},{"name":"NgTextMustacheDirective","qualifiedName":"angular-core-dom.NgTextMustacheDirective"},{"name":"Http","qualifiedName":"angular-core-dom.Http","preview":"<p>The <a>angular-core-dom.Http</a> service facilitates communication with the remote HTTP servers.\nIt uses dart:html's HttpRequest and provides a number of features on top\nof the core Dart library.</p>"},{"name":"HttpDefaults","qualifiedName":"angular-core-dom.HttpDefaults","preview":"<p>Injected into the <a>angular-core-dom.Http</a> service.  This class contains application-wide\nHTTP defaults.</p>"},{"name":"HttpDefaultHeaders","qualifiedName":"angular-core-dom.HttpDefaultHeaders","preview":"<p>Default header configuration.</p>"},{"name":"HttpResponse","qualifiedName":"angular-core-dom.HttpResponse","preview":"<p>The response for an HTTP request.  Returned from the <a>angular-core-dom.Http</a> service.</p>"},{"name":"HttpResponseConfig","qualifiedName":"angular-core-dom.HttpResponseConfig","preview":"<p>The request configuration of the request associated with this response.</p>"},{"name":"HttpInterceptors","qualifiedName":"angular-core-dom.HttpInterceptors","preview":"<p>A list of <a>angular-core-dom.HttpInterceptor</a>s.</p>"},{"name":"DefaultTransformDataHttpInterceptor","qualifiedName":"angular-core-dom.DefaultTransformDataHttpInterceptor","preview":"<p>The default transform data interceptor.abstract</p>"},{"name":"HttpInterceptor","qualifiedName":"angular-core-dom.HttpInterceptor","preview":"<p>HttpInterceptors are used to modify the Http request. They can be added to\n<a>angular-core-dom.HttpInterceptors</a> or passed into <a>angular-core-dom.Http.call</a>.</p>"},{"name":"LocationWrapper","qualifiedName":"angular-core-dom.LocationWrapper"},{"name":"HttpBackend","qualifiedName":"angular-core-dom.HttpBackend","preview":"<p>HTTP backend used by the <a>angular-core-dom.Http</a> service that delegates to dart:html's\nHttpRequest and deals with Dart bugs.</p>"},{"name":"UrlRewriter","qualifiedName":"angular-core-dom.UrlRewriter"},{"name":"FieldMetadataExtractor","qualifiedName":"angular-core-dom.FieldMetadataExtractor"},{"name":"DirectiveMap","qualifiedName":"angular-core-dom.DirectiveMap"},{"name":"TemplateLoader","qualifiedName":"angular-core-dom.TemplateLoader","preview":"<p>TemplateLoader is an asynchronous access to ShadowRoot which is\nloaded asynchronously. It allows a Component to be notified when its\nShadowRoot is ready.</p>"},{"name":"NodeAttrs","qualifiedName":"angular-core-dom.NodeAttrs","preview":"<p>NodeAttrs is a facade for element attributes. The facade is responsible\nfor normalizing attribute names as well as allowing access to the\nvalue of the directive.</p>"},{"name":"Compiler","qualifiedName":"angular-core-dom.Compiler"},{"name":"DirectiveRef","qualifiedName":"angular-core-dom.DirectiveRef"},{"name":"Cookies","qualifiedName":"angular-core-dom.Cookies","preview":"<p>Cookies service</p>"},{"name":"BrowserCookies","qualifiedName":"angular-core-dom.BrowserCookies","preview":"<p>This class provides low-level acces to the browser's cookies.\nIt is not meant to be used directly by applications.  Instead\nuse the Cookies service.</p>"},{"name":"ElementProbe","qualifiedName":"angular-core-dom.ElementProbe","preview":"<p><a>angular-core-dom.ElementProbe</a> is attached to each Element in the DOM. Its sole purpose is to\nallow access to the <a>di.Injector</a>, <a>angular-core.Scope</a>, and Directives for debugging and automated\ntest purposes. The information here is not used by Angular in any way.</p>"},{"name":"BlockCache","qualifiedName":"angular-core-dom.BlockCache","preview":"<p>BlockCache is used to cache the compilation of templates into <a>angular-core-dom.Block</a>s.\nIt can be used synchronously if HTML is known or asynchronously if the\ntemplate HTML needs to be looked up from the URL.</p>"},{"name":"BlockFactory","qualifiedName":"angular-core-dom.BlockFactory","preview":"<p>BlockFactory is used to create new <a>angular-core-dom.Block</a>s. BlockFactory is created by the\n<a>angular-core-dom.Compiler</a> as a result of compiling a template.</p>"},{"name":"BoundBlockFactory","qualifiedName":"angular-core-dom.BoundBlockFactory","preview":"<p>BoundBlockFactory is a <a>angular-core-dom.BlockFactory</a> which does not need Injector because\nit is pre-bound to an injector from the parent. This means that this\nBoundBlockFactory can only be used from within a specific Directive such\nas NgRepeat, but it can not be stored in a cache.</p>"},{"name":"BlockHole","qualifiedName":"angular-core-dom.BlockHole","preview":"<p>An instance of a hole in a parent <a>angular-core-dom.Block</a> into which child <a>angular-core-dom.Block</a>s can be added.</p>"},{"name":"Block","qualifiedName":"angular-core-dom.Block","preview":"<p>A collection of DOM nodes and Directives for those nodes, responsible for\ninstantiating the Directives and for inserting/removing itself to/from the\nDOM.</p>"},{"name":"ElementWrapper","qualifiedName":"angular-core-dom.ElementWrapper","preview":"<p>ElementWrapper is an interface for <a>angular-core-dom.Block</a>s and <a>angular-core-dom.BlockHole</a>s. Its purpose is\nto allow treating <a>angular-core-dom.Block</a> and <a>angular-core-dom.BlockHole</a> under same interface so that\n<a>angular-core-dom.Block</a>s can be added after <a>angular-core-dom.BlockHole</a>.</p>"},{"name":"NgShadowRootAware","qualifiedName":"angular-core-dom.NgShadowRootAware","preview":"<p>Implementing components <a>angular-core-dom.NgShadowRootAware.onShadowRoot</a> method will be called when\nthe template for the component has been loaded and inserted into Shadow DOM.\nIt is guaranteed that when <a>angular-core-dom.NgShadowRootAware.onShadowRoot</a> is invoked, that shadow DOM\nhas been loaded and is ready.</p>"},{"name":"NgCoreDomModule","qualifiedName":"angular-core-dom.NgCoreDomModule"}],"typedef":{"DirectiveSelector":{"name":"DirectiveSelector","qualifiedName":"angular-core-dom.DirectiveSelector","comment":"<p>DirectiveSelector is a function which given a node it will return a\nlist of [DirectiveRef]s which are triggered by this node.</p>\n<p>DirectiveSelector is used by the [Compiler] during the template walking\nto extract the [DirectiveRef]s.</p>\n<p>DirectiveSelector can be created using the [directiveSelectorFactory]\nmethod.</p>\n<p>The DirectiveSelector supports CSS selectors which do not cross\nelement boundaries only. The selectors can have any mix of element-name,\nclass-names and attribute-names.</p>\n<p>Examples:</p><pre>\n  element\n  .class\n  [attribute]\n  [attribute=value]\n  element[attribute1][attribute2=value]\n</pre>","return":"dart-core.List","parameters":{"node":{"name":"node","optional":"false","named":"false","default":"false","type":[{"outer":"dart-dom-html.Node","inner":[]}],"value":"null","annotations":[]}},"annotations":[],"generics":{}},"ResponseError":{"name":"ResponseError","qualifiedName":"angular-core-dom.ResponseError","comment":"","return":"dynamic","parameters":{"dynamic":{"name":"dynamic","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[],"generics":{}},"Response":{"name":"Response","qualifiedName":"angular-core-dom.Response","comment":"","return":"dynamic","parameters":{"HttpResponse":{"name":"HttpResponse","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[],"generics":{}},"RequestErrorInterceptor":{"name":"RequestErrorInterceptor","qualifiedName":"angular-core-dom.RequestErrorInterceptor","comment":"","return":"dynamic","parameters":{"dynamic":{"name":"dynamic","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[],"generics":{}},"RequestInterceptor":{"name":"RequestInterceptor","qualifiedName":"angular-core-dom.RequestInterceptor","comment":"","return":"dynamic","parameters":{"HttpResponseConfig":{"name":"HttpResponseConfig","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[],"generics":{}},"AttributeChanged":{"name":"AttributeChanged","qualifiedName":"angular-core-dom.AttributeChanged","comment":"<p>Callback function used to notify of attribute changes.</p>","return":"dynamic","parameters":{"newValue":{"name":"newValue","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[],"generics":{}},"ApplyMapping":{"name":"ApplyMapping","qualifiedName":"angular-core-dom.ApplyMapping","comment":"","return":"dynamic","parameters":{"attrs":{"name":"attrs","optional":"false","named":"false","default":"false","type":[{"outer":"angular-core-dom.NodeAttrs","inner":[]}],"value":"null","annotations":[]},"scope":{"name":"scope","optional":"false","named":"false","default":"false","type":[{"outer":"angular-core.Scope","inner":[]}],"value":"null","annotations":[]},"dst":{"name":"dst","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.Object","inner":[]}],"value":"null","annotations":[]},"filters":{"name":"filters","optional":"false","named":"false","default":"false","type":[{"outer":"angular-core.FilterMap","inner":[]}],"value":"null","annotations":[]},"notify":{"name":"notify","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]}},"annotations":[],"generics":{}}},"error":[]},"packageName":"","packageIntro":""}