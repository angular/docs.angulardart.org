{"name":"MockHttpBackend","qualifiedName":"angular-mock.MockHttpBackend","comment":"<p>A mock implementation of <a>angular-mock.HttpBackend</a>, used in tests.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":["angular-mock.HttpBackend"],"subclass":[],"variables":{"definitions":{"name":"definitions","qualifiedName":"angular-mock.MockHttpBackend.definitions","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"expectations":{"name":"expectations","qualifiedName":"angular-mock.MockHttpBackend.expectations","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"responses":{"name":"responses","qualifiedName":"angular-mock.MockHttpBackend.responses","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{"call":{"name":"call","qualifiedName":"angular-mock.MockHttpBackend.call","comment":"<p>A callback oriented API.  This function takes a callback with\nwill be called with (status, data, headers)</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"method":{"name":"method","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"url":{"name":"url","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"data":{"name":"data","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"callback":{"name":"callback","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"headers":{"name":"headers","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"timeout":{"name":"timeout","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"expect":{"name":"expect","qualifiedName":"angular-mock.MockHttpBackend.expect","comment":"<p>@ngdoc method\n@name ngMock.httpBackend#whenHEAD\n@methodOf ngMock.httpBackend\n@description\nCreates a new backend definition for HEAD requests. For more info see <code>when()</code>.</p>\n<p>@param {string|RegExp} url HTTP url.\n@param {(Object|function(Object))=} headers HTTP headers.\n@returns {requestHandler} Returns an object with <code>respond</code> method that control how a matched\nrequest is handled.</p>\n<p>@ngdoc method\n@name ngMock.httpBackend#expect\n@methodOf ngMock.httpBackend\n@description\nCreates a new request expectation.</p>\n<p>@param {string} method HTTP method.\n@param {string|RegExp} url HTTP url.\n@param {(string|RegExp)=} data HTTP request body.\n@param {(Object|function(Object))=} headers HTTP headers or function that receives http header\n  object and returns true if the headers match the current expectation.\n@returns {requestHandler} Returns an object with <code>respond</code> method that control how a matched\n request is handled.</p><ul><li>\n<p>respond – <code>{function([status,] data[, headers])|function(function(method, url, data, headers)}</code>\n   – The respond method takes a set of static data to be returned or a function that can return\n   an array containing response status (number), response data (string) and response headers\n   (Object).</p></li></ul>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular-mock._Chain","inner":[]}],"parameters":{"method":{"name":"method","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"url":{"name":"url","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"data":{"name":"data","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"headers":{"name":"headers","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"expectDELETE":{"name":"expectDELETE","qualifiedName":"angular-mock.MockHttpBackend.expectDELETE","comment":"<p>@ngdoc method\n@name ngMock.httpBackend#expectDELETE\n@methodOf ngMock.httpBackend\n@description\nCreates a new request expectation for DELETE requests. For more info see <code>expect()</code>.</p>\n<p>@param {string|RegExp} url HTTP url.\n@param {Object=} headers HTTP headers.\n@returns {requestHandler} Returns an object with <code>respond</code> method that control how a matched\n  request is handled.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular-mock._Chain","inner":[]}],"parameters":{"url":{"name":"url","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"headers":{"name":"headers","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"expectGET":{"name":"expectGET","qualifiedName":"angular-mock.MockHttpBackend.expectGET","comment":"<p>@ngdoc method\n@name ngMock.httpBackend#expectGET\n@methodOf ngMock.httpBackend\n@description\nCreates a new request expectation for GET requests. For more info see <code>expect()</code>.</p>\n<p>@param {string|RegExp} url HTTP url.\n@param {Object=} headers HTTP headers.\n@returns {requestHandler} Returns an object with <code>respond</code> method that control how a matched\nrequest is handled. See #expect for more info.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular-mock._Chain","inner":[]}],"parameters":{"url":{"name":"url","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"headers":{"name":"headers","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"expectJSONP":{"name":"expectJSONP","qualifiedName":"angular-mock.MockHttpBackend.expectJSONP","comment":"<p>@ngdoc method\n@name ngMock.httpBackend#expectJSONP\n@methodOf ngMock.httpBackend\n@description\nCreates a new request expectation for JSONP requests. For more info see <code>expect()</code>.</p>\n<p>@param {string|RegExp} url HTTP url.\n@returns {requestHandler} Returns an object with <code>respond</code> method that control how a matched\n  request is handled.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular-mock._Chain","inner":[]}],"parameters":{"url":{"name":"url","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"headers":{"name":"headers","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"expectPATCH":{"name":"expectPATCH","qualifiedName":"angular-mock.MockHttpBackend.expectPATCH","comment":"<p>@ngdoc method\n@name ngMock.httpBackend#expectPATCH\n@methodOf ngMock.httpBackend\n@description\nCreates a new request expectation for PATCH requests. For more info see <code>expect()</code>.</p>\n<p>@param {string|RegExp} url HTTP url.\n@param {(string|RegExp)=} data HTTP request body.\n@param {Object=} headers HTTP headers.\n@returns {requestHandler} Returns an object with <code>respond</code> method that control how a matched\n  request is handled.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular-mock._Chain","inner":[]}],"parameters":{"url":{"name":"url","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"data":{"name":"data","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"headers":{"name":"headers","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"expectPOST":{"name":"expectPOST","qualifiedName":"angular-mock.MockHttpBackend.expectPOST","comment":"<p>@ngdoc method\n@name ngMock.httpBackend#expectPOST\n@methodOf ngMock.httpBackend\n@description\nCreates a new request expectation for POST requests. For more info see <code>expect()</code>.</p>\n<p>@param {string|RegExp} url HTTP url.\n@param {(string|RegExp)=} data HTTP request body.\n@param {Object=} headers HTTP headers.\n@returns {requestHandler} Returns an object with <code>respond</code> method that control how a matched\n  request is handled.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular-mock._Chain","inner":[]}],"parameters":{"url":{"name":"url","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"data":{"name":"data","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"headers":{"name":"headers","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"expectPUT":{"name":"expectPUT","qualifiedName":"angular-mock.MockHttpBackend.expectPUT","comment":"<p>@ngdoc method\n@name ngMock.httpBackend#expectPUT\n@methodOf ngMock.httpBackend\n@description\nCreates a new request expectation for PUT requests. For more info see <code>expect()</code>.</p>\n<p>@param {string|RegExp} url HTTP url.\n@param {(string|RegExp)=} data HTTP request body.\n@param {Object=} headers HTTP headers.\n@returns {requestHandler} Returns an object with <code>respond</code> method that control how a matched\n  request is handled.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular-mock._Chain","inner":[]}],"parameters":{"url":{"name":"url","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"data":{"name":"data","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"headers":{"name":"headers","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"flush":{"name":"flush","qualifiedName":"angular-mock.MockHttpBackend.flush","comment":"<p>@ngdoc method\n@name ngMock.httpBackend#expectHEAD\n@methodOf ngMock.httpBackend\n@description\nCreates a new request expectation for HEAD requests. For more info see <code>expect()</code>.</p>\n<p>@param {string|RegExp} url HTTP url.\n@param {Object=} headers HTTP headers.\n@returns {requestHandler} Returns an object with <code>respond</code> method that control how a matched\n  request is handled.</p>\n<p>@ngdoc method\n@name ngMock.httpBackend#flush\n@methodOf ngMock.httpBackend\n@description\nFlushes all pending requests using the trained responses.</p>\n<p>@param {number=} count Number of responses to flush (in the order they arrived). If undefined,\n  all pending requests will be flushed. If there are no pending requests when the flush method\n  is called an exception is thrown (as this typically a sign of programming error).</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"count":{"name":"count","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"request":{"name":"request","qualifiedName":"angular-mock.MockHttpBackend.request","comment":"<p>This function is called from <a>angular-core-dom_internal.Http</a> and designed to mimic the Dart APIs.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"url":{"name":"url","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"method":{"name":"method","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"withCredentials":{"name":"withCredentials","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]},"responseType":{"name":"responseType","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"mimeType":{"name":"mimeType","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"requestHeaders":{"name":"requestHeaders","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]},"sendData":{"name":"sendData","optional":true,"named":true,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"onProgress":{"name":"onProgress","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{"e":{"name":"e","optional":false,"named":false,"default":false,"type":[{"outer":"angular-mock.ProgressEvent","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"resetExpectations":{"name":"resetExpectations","qualifiedName":"angular-mock.MockHttpBackend.resetExpectations","comment":"<p>@ngdoc method\n@name ngMock.httpBackend#resetExpectations\n@methodOf ngMock.httpBackend\n@description\nResets all request expectations, but preserves all backend definitions. Typically, you would\ncall resetExpectations during a multiple-phase test when you want to reuse the same instance of\nhttpBackend mock.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"verifyNoOutstandingExpectation":{"name":"verifyNoOutstandingExpectation","qualifiedName":"angular-mock.MockHttpBackend.verifyNoOutstandingExpectation","comment":"<p>@ngdoc method\n@name ngMock.httpBackend#verifyNoOutstandingExpectation\n@methodOf ngMock.httpBackend\n@description\nVerifies that all of the requests defined via the <code>expect</code> api were made. If any of the\nrequests were not made, verifyNoOutstandingExpectation throws an exception.</p>\n<p>Typically, you would call this method following each test case that asserts requests using an\n\"afterEach\" clause.</p><pre>\n  afterEach(httpBackend.verifyNoOutstandingExpectation);\n</pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"verifyNoOutstandingRequest":{"name":"verifyNoOutstandingRequest","qualifiedName":"angular-mock.MockHttpBackend.verifyNoOutstandingRequest","comment":"<p>@ngdoc method\n@name ngMock.httpBackend#verifyNoOutstandingRequest\n@methodOf ngMock.httpBackend\n@description\nVerifies that there are no outstanding requests that need to be flushed.</p>\n<p>Typically, you would call this method following each test case that asserts requests using an\n\"afterEach\" clause.</p><pre>\n  afterEach(httpBackend.verifyNoOutstandingRequest);\n</pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"when":{"name":"when","qualifiedName":"angular-mock.MockHttpBackend.when","comment":"<p>Creates a new backend definition.</p>\n<p>@param {string} method HTTP method.\n@param {string|RegExp} url HTTP url.\n@param {(string|RegExp)=} data HTTP request body.\n@param {(Object|function(Object))=} headers HTTP headers or function that\nreceives http header object and returns true if the headers match the\ncurrent definition.\n@returns {requestHandler} Returns an object with <code>respond</code> method that\ncontrol how a matched request is handled.</p><ul><li>\n<p>respond – <code>{function([status,] data[, headers])|function(function(method, url, data, headers)}</code>\n   – The respond method takes a set of static data to be returned or a function that can return\n   an array containing response status (number), response data (string) and response headers\n   (Object).</p></li></ul>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular-mock._Chain","inner":[]}],"parameters":{"method":{"name":"method","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"url":{"name":"url","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"data":{"name":"data","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"headers":{"name":"headers","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"whenDELETE":{"name":"whenDELETE","qualifiedName":"angular-mock.MockHttpBackend.whenDELETE","comment":"<p>@ngdoc method\n@name ngMock.httpBackend#whenDELETE\n@methodOf ngMock.httpBackend\n@description\nCreates a new backend definition for DELETE requests. For more info see <code>when()</code>.</p>\n<p>@param {string|RegExp} url HTTP url.\n@param {(Object|function(Object))=} headers HTTP headers.\n@returns {requestHandler} Returns an object with <code>respond</code> method that control how a matched\nrequest is handled.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular-mock._Chain","inner":[]}],"parameters":{"url":{"name":"url","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"headers":{"name":"headers","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"whenGET":{"name":"whenGET","qualifiedName":"angular-mock.MockHttpBackend.whenGET","comment":"<p>@ngdoc method\n@name ngMock.httpBackend#whenGET\n@methodOf ngMock.httpBackend\n@description\nCreates a new backend definition for GET requests. For more info see <code>when()</code>.</p>\n<p>@param {string|RegExp} url HTTP url.\n@param {(Object|function(Object))=} headers HTTP headers.\n@returns {requestHandler} Returns an object with <code>respond</code> method that control how a matched\nrequest is handled.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular-mock._Chain","inner":[]}],"parameters":{"url":{"name":"url","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"headers":{"name":"headers","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"whenJSONP":{"name":"whenJSONP","qualifiedName":"angular-mock.MockHttpBackend.whenJSONP","comment":"<p>@ngdoc method\n@name ngMock.httpBackend#whenJSONP\n@methodOf ngMock.httpBackend\n@description\nCreates a new backend definition for JSONP requests. For more info see <code>when()</code>.</p>\n<p>@param {string|RegExp} url HTTP url.\n@returns {requestHandler} Returns an object with <code>respond</code> method that control how a matched\nrequest is handled.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular-mock._Chain","inner":[]}],"parameters":{"url":{"name":"url","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"headers":{"name":"headers","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"whenPATCH":{"name":"whenPATCH","qualifiedName":"angular-mock.MockHttpBackend.whenPATCH","comment":"","commentFrom":"angular-mock.MockHttpBackend.whenPATCH","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular-mock._Chain","inner":[]}],"parameters":{"url":{"name":"url","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"data":{"name":"data","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"headers":{"name":"headers","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"whenPOST":{"name":"whenPOST","qualifiedName":"angular-mock.MockHttpBackend.whenPOST","comment":"<p>@ngdoc method\n@name ngMock.httpBackend#whenPOST\n@methodOf ngMock.httpBackend\n@description\nCreates a new backend definition for POST requests. For more info see <code>when()</code>.</p>\n<p>@param {string|RegExp} url HTTP url.\n@param {(string|RegExp)=} data HTTP request body.\n@param {(Object|function(Object))=} headers HTTP headers.\n@returns {requestHandler} Returns an object with <code>respond</code> method that control how a matched\nrequest is handled.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular-mock._Chain","inner":[]}],"parameters":{"url":{"name":"url","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"data":{"name":"data","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"headers":{"name":"headers","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"whenPUT":{"name":"whenPUT","qualifiedName":"angular-mock.MockHttpBackend.whenPUT","comment":"<p>@ngdoc method\n@name ngMock.httpBackend#whenPUT\n@methodOf ngMock.httpBackend\n@description\nCreates a new backend definition for PUT requests.  For more info see <code>when()</code>.</p>\n<p>@param {string|RegExp} url HTTP url.\n@param {(string|RegExp)=} data HTTP request body.\n@param {(Object|function(Object))=} headers HTTP headers.\n@returns {requestHandler} Returns an object with <code>respond</code> method that control how a matched\nrequest is handled.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular-mock._Chain","inner":[]}],"parameters":{"url":{"name":"url","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"data":{"name":"data","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"headers":{"name":"headers","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"angular-mock.MockHttpBackend.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>angular-mock.MockHttpBackend.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"angular-mock.MockHttpBackend.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"angular-mock.MockHttpBackend.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>angular-mock.MockHttpBackend.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>angular-mock.MockHttpBackend.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"angular-mock.MockHttpBackend.noSuchMethod","comment":"<p><a>angular-mock.MockHttpBackend.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>angular-mock.MockHttpBackend.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>angular-mock.MockHttpBackend.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>angular-mock.MockHttpBackend.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"request":{"name":"request","qualifiedName":"angular-mock.MockHttpBackend.request","comment":"<p>Wrapper around dart:html's <a>angular-mock.HttpRequest.request</a></p>","commentFrom":"","inheritedFrom":"angular-mock.HttpBackend.request","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"url":{"name":"url","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"method":{"name":"method","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"withCredentials":{"name":"withCredentials","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]},"responseType":{"name":"responseType","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"mimeType":{"name":"mimeType","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"requestHeaders":{"name":"requestHeaders","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]},"sendData":{"name":"sendData","optional":true,"named":true,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"onProgress":{"name":"onProgress","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"void","inner":[]}],"parameters":{"e":{"name":"e","optional":false,"named":false,"default":false,"type":[{"outer":"angular-mock.ProgressEvent","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"angular-mock.MockHttpBackend.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}