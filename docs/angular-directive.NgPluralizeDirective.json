{"name":"NgPluralizeDirective","qualifiedName":"angular-directive.NgPluralizeDirective","comment":"<h2>Overview</h2>\n<p><code>ngPluralize</code> is a directive that displays messages according to locale rules.</p>\n<p>You configure ngPluralize directive by specifying the mappings between plural\ncategories and the strings to be displayed.</p>\n<h2>Plural categories and explicit number rules</h2>\n<p>The available plural categories are:\n<em> \"zero\",\n</em> \"one\",\n<em> \"two\",\n</em> \"few\",\n<em> \"many\",\n</em> \"other\".</p>\n<p>While a plural category may match many numbers, an explicit number rule can\nonly match one number. For example, the explicit number rule for \"3\" matches\nthe number 3. There are examples of plural categories and explicit number\nrules throughout the rest of this documentation.</p>\n<h2>Configuring ngPluralize</h2>\n<p>You configure ngPluralize by providing 2 attributes: <code>count</code> and <code>when</code>.\nYou can also provide an optional attribute, <code>offset</code>.</p>\n<p>The value of the <code>count</code> attribute can be either a string or an expression;\nthese are evaluated on the current scope for its bound value.</p>\n<p>The <code>when</code> attribute specifies the mappings between plural categories and the\nactual string to be displayed. The value of the attribute should be a JSON\nobject.</p>\n<p>The following example shows how to configure ngPluralize:</p>\n<p>   &lt;ng-pluralize count=\"personCount\"</p>\n<pre><code>             when=\"{'0': 'Nobody is viewing.',\n                    'one': '1 person is viewing.',\n                    'other': '{} people are viewing.'}\"&gt;\n</code></pre>\n<p>   &lt;/ng-pluralize></p>\n<p>In the example, <code>\"0: Nobody is viewing.\"</code> is an explicit number rule. If you\ndid not specify this rule, 0 would be matched to the \"other\" category and\n\"0 people are viewing\" would be shown instead of \"Nobody is viewing\". You can\nspecify an explicit number rule for other numbers, for example 12, so that\ninstead of showing \"12 people are viewing\", you can show \"a dozen people are\nviewing\".</p>\n<p>You can use a set of closed braces (<code>{}</code>) as a placeholder for the number\nthat you want substituted into pluralized strings. In the previous example,\nAngular will replace <code>{}</code> with <code>{{personCount}}</code>. The closed braces <code>{}</code> is a\nplaceholder {{numberExpression}}.</p>\n<h2>Configuring ngPluralize with offset</h2>\n<p>The <code>offset</code> attribute allows further customization of pluralized text, which\ncan result in a better user experience. For example, instead of the message\n\"4 people are viewing this document\", you might display \"John, Kate and 2\nothers are viewing this document\". The offset attribute allows you to offset\na number by any desired value.</p>\n<p>Let's take a look at an example:</p>\n<p>   &lt;ng-pluralize count=\"personCount\" offset=2</p>\n<pre><code>             when=\"{'0': 'Nobody is viewing.',\n                    '1': '${person1} is viewing.',\n                    '2': '${person1} and ${person2} are viewing.',\n                    'one': '${person1}, ${person2} and one other person are viewing.',\n                    'other': '${person1}, ${person2} and {} other people are viewing.'}\"&gt;\n</code></pre>\n<p>   &lt;/ng-pluralize></p>\n<p>Notice that we are still using two plural categories(one, other), but we added\nthree explicit number rules 0, 1 and 2.\nWhen one person, perhaps John, views the document, \"John is viewing\" will be\nshown. When three people view the document, no explicit number rule is found,\nso an offset of 2 is taken off 3, and Angular uses 1 to decide the plural\ncategory. In this case, plural category 'one' is matched and \"John, Marry and\none other person are viewing\" is shown.</p>\n<p>Note that when you specify offsets, you must provide explicit number rules\nfor numbers from 0 up to and including the offset. If you use an offset of 3,\nfor example, you must provide explicit number rules for 0, 1, 2 and 3. You\nmust also provide plural strings for at least the \"other\" plural category.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"element":{"name":"element","qualifiedName":"angular/angular.NgPluralizeDirective.element","comment":"","final":"true","static":"false","constant":"false","type":[{"outer":"dart-dom-html.Element","inner":[]}],"annotations":[]},"scope":{"name":"scope","qualifiedName":"angular/angular.NgPluralizeDirective.scope","comment":"","final":"true","static":"false","constant":"false","type":[{"outer":"angular/angular.Scope","inner":[]}],"annotations":[]},"interpolate":{"name":"interpolate","qualifiedName":"angular/angular.NgPluralizeDirective.interpolate","comment":"","final":"true","static":"false","constant":"false","type":[{"outer":"angular/angular.Interpolate","inner":[]}],"annotations":[]},"parser":{"name":"parser","qualifiedName":"angular/angular.NgPluralizeDirective.parser","comment":"","final":"true","static":"false","constant":"false","type":[{"outer":"angular/angular.AstParser","inner":[]}],"annotations":[]},"offset":{"name":"offset","qualifiedName":"angular/angular.NgPluralizeDirective.offset","comment":"","final":"false","static":"false","constant":"false","type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"discreteRules":{"name":"discreteRules","qualifiedName":"angular/angular.NgPluralizeDirective.discreteRules","comment":"","final":"false","static":"false","constant":"false","type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"categoryRules":{"name":"categoryRules","qualifiedName":"angular/angular.NgPluralizeDirective.categoryRules","comment":"","final":"false","static":"false","constant":"false","type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"IS_WHEN":{"name":"IS_WHEN","qualifiedName":"angular/angular.NgPluralizeDirective.IS_WHEN","comment":"","final":"true","static":"true","constant":"false","type":[{"outer":"dart-core.RegExp","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{"count=":{"name":"count=","qualifiedName":"angular-directive.NgPluralizeDirective.count=","comment":"","commentFrom":"angular.NgPluralizeDirective.count=","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{"value":{"name":"value","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"getters":{},"constructors":{"":{"name":"","qualifiedName":"angular-directive.NgPluralizeDirective.NgPluralizeDirective-","comment":"","commentFrom":"","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{"scope":{"name":"scope","optional":"false","named":"false","default":"false","type":[{"outer":"angular-core.Scope","inner":[]}],"value":"null","annotations":[]},"element":{"name":"element","optional":"false","named":"false","default":"false","type":[{"outer":"dart-dom-html.Element","inner":[]}],"value":"null","annotations":[]},"interpolate":{"name":"interpolate","optional":"false","named":"false","default":"false","type":[{"outer":"angular-core.Interpolate","inner":[]}],"value":"null","annotations":[]},"attributes":{"name":"attributes","optional":"false","named":"false","default":"false","type":[{"outer":"angular-core-dom.NodeAttrs","inner":[]}],"value":"null","annotations":[]},"parser":{"name":"parser","optional":"false","named":"false","default":"false","type":[{"outer":"angular-core.AstParser","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"operators":{},"methods":{}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"angular-directive.NgPluralizeDirective.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>angular-directive.NgPluralizeDirective.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"angular-directive.NgPluralizeDirective.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"angular-directive.NgPluralizeDirective.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>angular-directive.NgPluralizeDirective.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>angular-directive.NgPluralizeDirective.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"angular-directive.NgPluralizeDirective.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"angular-directive.NgPluralizeDirective.noSuchMethod","comment":"<p><a>angular-directive.NgPluralizeDirective.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>angular-directive.NgPluralizeDirective.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>angular-directive.NgPluralizeDirective.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>angular-directive.NgPluralizeDirective.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[{"name":"angular-core.NgDirective","parameters":[]},{"name":"angular-core.NgDirective","parameters":[]}],"generics":{}}