{"name":"History","qualifiedName":"angular-mock.History","comment":"","isAbstract":false,"superclass":"dart-core.Object","implements":["angular-mock.HistoryBase"],"subclass":[],"variables":{"length":{"name":"length","qualifiedName":"angular-mock.History.length","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["'History.length'"]}]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"state":{"name":"state","qualifiedName":"angular-mock.History.state","comment":"","commentFrom":"angular-mock.History.state","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["'History.state'"]}]},"supportsState":{"name":"supportsState","qualifiedName":"angular-mock.History.supportsState","comment":"<p>Checks if the State APIs are supported on the current platform.</p>\n<p>See also:</p><ul><li><a>angular-mock.History.pushState</a></li><li><a>angular-mock.History.replaceState</a></li><li><a>angular-mock.History.state</a></li></ul>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{},"methods":{"back":{"name":"back","qualifiedName":"angular-mock.History.back","comment":"","commentFrom":"angular-mock.HistoryBase.back","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["'History.back'"]}]},"forward":{"name":"forward","qualifiedName":"angular-mock.History.forward","comment":"","commentFrom":"angular-mock.HistoryBase.forward","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["'History.forward'"]}]},"go":{"name":"go","qualifiedName":"angular-mock.History.go","comment":"","commentFrom":"angular-mock.HistoryBase.go","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"distance":{"name":"distance","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["'History.go'"]}]},"pushState":{"name":"pushState","qualifiedName":"angular-mock.History.pushState","comment":"","commentFrom":"angular-mock.History.pushState","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"data":{"name":"data","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]},"title":{"name":"title","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"url":{"name":"url","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["'History.pushState'"]},{"name":"metadata.SupportedBrowser","parameters":["SupportedBrowser.CHROME"]},{"name":"metadata.SupportedBrowser","parameters":["SupportedBrowser.FIREFOX"]},{"name":"metadata.SupportedBrowser","parameters":["SupportedBrowser.IE","'10'"]},{"name":"metadata.SupportedBrowser","parameters":["SupportedBrowser.SAFARI"]}]},"replaceState":{"name":"replaceState","qualifiedName":"angular-mock.History.replaceState","comment":"","commentFrom":"angular-mock.History.replaceState","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"data":{"name":"data","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]},"title":{"name":"title","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"url":{"name":"url","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["'History.replaceState'"]},{"name":"metadata.SupportedBrowser","parameters":["SupportedBrowser.CHROME"]},{"name":"metadata.SupportedBrowser","parameters":["SupportedBrowser.FIREFOX"]},{"name":"metadata.SupportedBrowser","parameters":["SupportedBrowser.IE","'10'"]},{"name":"metadata.SupportedBrowser","parameters":["SupportedBrowser.SAFARI"]}]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"angular-mock.History.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>angular-mock.History.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"angular-mock.History.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"angular-mock.History.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>angular-mock.History.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>angular-mock.History.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"back":{"name":"back","qualifiedName":"angular-mock.History.back","comment":"","commentFrom":"","inheritedFrom":"angular-mock.HistoryBase.back","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"forward":{"name":"forward","qualifiedName":"angular-mock.History.forward","comment":"","commentFrom":"","inheritedFrom":"angular-mock.HistoryBase.forward","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"go":{"name":"go","qualifiedName":"angular-mock.History.go","comment":"","commentFrom":"","inheritedFrom":"angular-mock.HistoryBase.go","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"distance":{"name":"distance","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"angular-mock.History.noSuchMethod","comment":"<p><a>angular-mock.History.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>angular-mock.History.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>angular-mock.History.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>angular-mock.History.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"angular-mock.History.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[{"name":"metadata.DomName","parameters":["'History'"]}],"generics":{}}