{"name":"WindowEventHandlers","qualifiedName":"angular/angular-mock.WindowEventHandlers","comment":"","isAbstract":true,"superclass":"angular/angular-mock.EventTarget","implements":[],"subclass":[],"variables":{"hashChangeEvent":{"name":"hashChangeEvent","qualifiedName":"angular/angular-mock.WindowEventHandlers.hashChangeEvent","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-dom-html.EventStreamProvider","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"annotations":[{"name":"angular/metadata.DomName","parameters":["'WindowEventHandlers.hashchangeEvent'"]},{"name":"angular/metadata.Experimental","parameters":[]}]},"messageEvent":{"name":"messageEvent","qualifiedName":"angular/angular-mock.WindowEventHandlers.messageEvent","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-dom-html.EventStreamProvider","inner":[{"outer":"dart-dom-html.MessageEvent","inner":[]}]}],"annotations":[{"name":"angular/metadata.DomName","parameters":["'WindowEventHandlers.messageEvent'"]},{"name":"angular/metadata.Experimental","parameters":[]}]},"offlineEvent":{"name":"offlineEvent","qualifiedName":"angular/angular-mock.WindowEventHandlers.offlineEvent","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-dom-html.EventStreamProvider","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"annotations":[{"name":"angular/metadata.DomName","parameters":["'WindowEventHandlers.offlineEvent'"]},{"name":"angular/metadata.Experimental","parameters":[]}]},"onlineEvent":{"name":"onlineEvent","qualifiedName":"angular/angular-mock.WindowEventHandlers.onlineEvent","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-dom-html.EventStreamProvider","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"annotations":[{"name":"angular/metadata.DomName","parameters":["'WindowEventHandlers.onlineEvent'"]},{"name":"angular/metadata.Experimental","parameters":[]}]},"popStateEvent":{"name":"popStateEvent","qualifiedName":"angular/angular-mock.WindowEventHandlers.popStateEvent","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-dom-html.EventStreamProvider","inner":[{"outer":"dart-dom-html.PopStateEvent","inner":[]}]}],"annotations":[{"name":"angular/metadata.DomName","parameters":["'WindowEventHandlers.popstateEvent'"]},{"name":"angular/metadata.Experimental","parameters":[]}]},"storageEvent":{"name":"storageEvent","qualifiedName":"angular/angular-mock.WindowEventHandlers.storageEvent","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-dom-html.EventStreamProvider","inner":[{"outer":"dart-dom-html.StorageEvent","inner":[]}]}],"annotations":[{"name":"angular/metadata.DomName","parameters":["'WindowEventHandlers.storageEvent'"]},{"name":"angular/metadata.Experimental","parameters":[]}]},"unloadEvent":{"name":"unloadEvent","qualifiedName":"angular/angular-mock.WindowEventHandlers.unloadEvent","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-dom-html.EventStreamProvider","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"annotations":[{"name":"angular/metadata.DomName","parameters":["'WindowEventHandlers.unloadEvent'"]},{"name":"angular/metadata.Experimental","parameters":[]}]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"onHashChange":{"name":"onHashChange","qualifiedName":"angular/angular-mock.WindowEventHandlers.onHashChange","comment":"","commentFrom":"angular-mock.WindowEventHandlers.onHashChange","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"angular/metadata.DomName","parameters":["'WindowEventHandlers.onhashchange'"]},{"name":"angular/metadata.Experimental","parameters":[]}]},"onMessage":{"name":"onMessage","qualifiedName":"angular/angular-mock.WindowEventHandlers.onMessage","comment":"","commentFrom":"angular-mock.WindowEventHandlers.onMessage","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MessageEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"angular/metadata.DomName","parameters":["'WindowEventHandlers.onmessage'"]},{"name":"angular/metadata.Experimental","parameters":[]}]},"onOffline":{"name":"onOffline","qualifiedName":"angular/angular-mock.WindowEventHandlers.onOffline","comment":"","commentFrom":"angular-mock.WindowEventHandlers.onOffline","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"angular/metadata.DomName","parameters":["'WindowEventHandlers.onoffline'"]},{"name":"angular/metadata.Experimental","parameters":[]}]},"onOnline":{"name":"onOnline","qualifiedName":"angular/angular-mock.WindowEventHandlers.onOnline","comment":"","commentFrom":"angular-mock.WindowEventHandlers.onOnline","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"angular/metadata.DomName","parameters":["'WindowEventHandlers.ononline'"]},{"name":"angular/metadata.Experimental","parameters":[]}]},"onPopState":{"name":"onPopState","qualifiedName":"angular/angular-mock.WindowEventHandlers.onPopState","comment":"","commentFrom":"angular-mock.WindowEventHandlers.onPopState","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.PopStateEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"angular/metadata.DomName","parameters":["'WindowEventHandlers.onpopstate'"]},{"name":"angular/metadata.Experimental","parameters":[]}]},"onStorage":{"name":"onStorage","qualifiedName":"angular/angular-mock.WindowEventHandlers.onStorage","comment":"","commentFrom":"angular-mock.WindowEventHandlers.onStorage","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.StorageEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"angular/metadata.DomName","parameters":["'WindowEventHandlers.onstorage'"]},{"name":"angular/metadata.Experimental","parameters":[]}]},"onUnload":{"name":"onUnload","qualifiedName":"angular/angular-mock.WindowEventHandlers.onUnload","comment":"","commentFrom":"angular-mock.WindowEventHandlers.onUnload","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"angular/metadata.DomName","parameters":["'WindowEventHandlers.onunload'"]},{"name":"angular/metadata.Experimental","parameters":[]}]}},"constructors":{},"operators":{},"methods":{}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"angular/angular-mock.WindowEventHandlers.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>angular/angular-mock.WindowEventHandlers.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"dart-core.Object.hashCode","inheritedFrom":"angular-mock.Interceptor.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"on":{"name":"on","qualifiedName":"angular/angular-mock.WindowEventHandlers.on","comment":"<p>This is an ease-of-use accessor for event streams which should only be\nused when an explicit accessor is not available.</p>","commentFrom":"","inheritedFrom":"angular-mock.EventTarget.on","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.Events","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"angular/angular-mock.WindowEventHandlers.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"dart-core.Object.runtimeType","inheritedFrom":"angular-mock.Interceptor.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"angular/angular-mock.WindowEventHandlers.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>angular/angular-mock.WindowEventHandlers.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>angular/angular-mock.WindowEventHandlers.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"dart-core.Object.==","inheritedFrom":"angular-mock.Interceptor.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"addEventListener":{"name":"addEventListener","qualifiedName":"angular/angular-mock.WindowEventHandlers.addEventListener","comment":"","commentFrom":"","inheritedFrom":"angular-mock.EventTarget.addEventListener","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"type":{"name":"type","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"listener":{"name":"listener","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.EventListener","inner":[]}],"value":null,"annotations":[]},"useCapture":{"name":"useCapture","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"angular/metadata.DomName","parameters":["'EventTarget.addEventListener'"]}]},"dispatchEvent":{"name":"dispatchEvent","qualifiedName":"angular/angular-mock.WindowEventHandlers.dispatchEvent","comment":"","commentFrom":"","inheritedFrom":"angular-mock.EventTarget.dispatchEvent","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"event":{"name":"event","optional":false,"named":false,"default":false,"type":[{"outer":"angular/angular-mock.Event","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"angular/metadata.DomName","parameters":["'EventTarget.dispatchEvent'"]}]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"angular/angular-mock.WindowEventHandlers.noSuchMethod","comment":"<p><a>angular/angular-mock.WindowEventHandlers.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>angular/angular-mock.WindowEventHandlers.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>angular/angular-mock.WindowEventHandlers.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>angular/angular-mock.WindowEventHandlers.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"dart-core.Object.noSuchMethod","inheritedFrom":"angular-mock.Interceptor.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"removeEventListener":{"name":"removeEventListener","qualifiedName":"angular/angular-mock.WindowEventHandlers.removeEventListener","comment":"","commentFrom":"","inheritedFrom":"angular-mock.EventTarget.removeEventListener","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"type":{"name":"type","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"listener":{"name":"listener","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.EventListener","inner":[]}],"value":null,"annotations":[]},"useCapture":{"name":"useCapture","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"angular/metadata.DomName","parameters":["'EventTarget.removeEventListener'"]}]},"toString":{"name":"toString","qualifiedName":"angular/angular-mock.WindowEventHandlers.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"angular-mock.Interceptor.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[{"name":"angular/metadata.DomName","parameters":["'WindowEventHandlers'"]},{"name":"angular/metadata.Experimental","parameters":[]}],"generics":{}}