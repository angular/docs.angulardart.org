{"name":"CssAnimate","qualifiedName":"angular/angular-animate.CssAnimate","comment":"<p>This defines the standard set of CSS animation classes, transitions, and\nnomenclature that will eventually be the foundation of the AngularDart\nanimation framework. This implementation uses the <a>angular/angular-animate.AnimationLoop</a> class to\nqueue and run CSS based transition and keyframe animations.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":["angular/angular-animate.NgAnimate"],"subclass":[],"variables":{"NG_ANIMATE":{"name":"NG_ANIMATE","qualifiedName":"angular/angular-animate.CssAnimate.NG_ANIMATE","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"NG_MOVE":{"name":"NG_MOVE","qualifiedName":"angular/angular-animate.CssAnimate.NG_MOVE","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"NG_INSERT":{"name":"NG_INSERT","qualifiedName":"angular/angular-animate.CssAnimate.NG_INSERT","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"NG_REMOVE":{"name":"NG_REMOVE","qualifiedName":"angular/angular-animate.CssAnimate.NG_REMOVE","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"NG_ADD_POSTFIX":{"name":"NG_ADD_POSTFIX","qualifiedName":"angular/angular-animate.CssAnimate.NG_ADD_POSTFIX","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"NG_REMOVE_POSTFIX":{"name":"NG_REMOVE_POSTFIX","qualifiedName":"angular/angular-animate.CssAnimate.NG_REMOVE_POSTFIX","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"NG_ACTIVE_POSTFIX":{"name":"NG_ACTIVE_POSTFIX","qualifiedName":"angular/angular-animate.CssAnimate.NG_ACTIVE_POSTFIX","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"angular/angular-animate.CssAnimate.CssAnimate-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"_runner":{"name":"_runner","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"_animationMap":{"name":"_animationMap","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"_optimizer":{"name":"_optimizer","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"operators":{},"methods":{"addClass":{"name":"addClass","qualifiedName":"angular/angular-animate.CssAnimate.addClass","comment":"<p>Add the <a>angular/angular-animate.CssAnimate.addClass.cssClass</a> to the classes on <a>angular/angular-animate.CssAnimate.addClass.element</a> after running any\ndefined animations.</p>","commentFrom":"angular.NgAnimate.addClass","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular/angular-animate.Animation","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Element","inner":[]}],"value":"null","annotations":[]},"cssClass":{"name":"cssClass","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"removeClass":{"name":"removeClass","qualifiedName":"angular/angular-animate.CssAnimate.removeClass","comment":"<p>Remove the <a>angular/angular-animate.CssAnimate.removeClass.cssClass</a> from the classes on <a>angular/angular-animate.CssAnimate.removeClass.element</a> after running any\ndefined animations.</p>","commentFrom":"angular.NgAnimate.removeClass","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular/angular-animate.Animation","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Element","inner":[]}],"value":"null","annotations":[]},"cssClass":{"name":"cssClass","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"insert":{"name":"insert","qualifiedName":"angular/angular-animate.CssAnimate.insert","comment":"<p>Perform an 'enter' animation for each element in <a>angular/angular-animate.CssAnimate.insert.nodes</a>. The elements\nmust exist in the dom. This is equivalent to running enter on each element\nin <a>angular/angular-animate.CssAnimate.insert.nodes</a> and returning Future.wait(handles); for the onCompleted\nproperty on <a>angular/angular-animate.Animation</a>.</p>","commentFrom":"angular.NgAnimate.insert","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular/angular-animate.Animation","inner":[]}],"parameters":{"nodes":{"name":"nodes","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-dom-html.Node","inner":[]}]}],"value":"null","annotations":[]},"parent":{"name":"parent","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Node","inner":[]}],"value":"null","annotations":[]},"insertBefore":{"name":"insertBefore","optional":true,"named":true,"default":false,"type":[{"outer":"dart-dom-html.Node","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"remove":{"name":"remove","qualifiedName":"angular/angular-animate.CssAnimate.remove","comment":"<p>Perform a 'remove' animation for each element in <a>angular/angular-animate.CssAnimate.remove.nodes</a>. The elements\nmust exist in the dom and should not be detached until the onCompleted\nfuture on the <a>angular/angular-animate.Animation</a> is executed AND the <a>angular/angular-core-dom.AnimationResult</a> is\n<a>angular/angular-core-dom.AnimationResult.COMPLETED</a> or <a>angular/angular-core-dom.AnimationResult.COMPLETED_IGNORED</a>.</p>\n<p>This is equivalent to running remove on each element in <a>angular/angular-animate.CssAnimate.remove.nodes</a> and\nreturning Future.wait(handles); for the onCompleted property on\n<a>angular/angular-animate.Animation</a>.</p>","commentFrom":"angular.NgAnimate.remove","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular/angular-animate.Animation","inner":[]}],"parameters":{"nodes":{"name":"nodes","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-dom-html.Node","inner":[]}]}],"value":"null","annotations":[]}},"annotations":[]},"move":{"name":"move","qualifiedName":"angular/angular-animate.CssAnimate.move","comment":"<p>Perform a 'move' animation for each element in <a>angular/angular-animate.CssAnimate.move.nodes</a>. The elements\nmust exist in the dom. This is equivalent to running move on each element\nin <a>angular/angular-animate.CssAnimate.move.nodes</a> and returning Future.wait(handles); for the onCompleted\nproperty on <a>angular/angular-animate.Animation</a>.</p>","commentFrom":"angular.NgAnimate.move","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular/angular-animate.Animation","inner":[]}],"parameters":{"nodes":{"name":"nodes","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-dom-html.Node","inner":[]}]}],"value":"null","annotations":[]},"parent":{"name":"parent","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Node","inner":[]}],"value":"null","annotations":[]},"insertBefore":{"name":"insertBefore","optional":true,"named":true,"default":false,"type":[{"outer":"dart-dom-html.Node","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"animate":{"name":"animate","qualifiedName":"angular/angular-animate.CssAnimate.animate","comment":"<p>Run a css animation on a element for a given css class. If the css\nanimation already exists, the method will attempt to return the existing\ninstance.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular/angular-animate.CssAnimation","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Element","inner":[]}],"value":"null","annotations":[]},"event":{"name":"event","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"addAtStart":{"name":"addAtStart","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"addAtEnd":{"name":"addAtEnd","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"removeAtStart":{"name":"removeAtStart","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"removeAtEnd":{"name":"removeAtEnd","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"cancelAnimation":{"name":"cancelAnimation","qualifiedName":"angular/angular-animate.CssAnimate.cancelAnimation","comment":"<p>For a given element and css event, attempt to find an existing instance\nof the given animation and cancel it.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Element","inner":[]}],"value":"null","annotations":[]},"event":{"name":"event","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"angular/angular-animate.CssAnimate.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>angular/angular-animate.CssAnimate.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"angular/angular-animate.CssAnimate.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"angular/angular-animate.CssAnimate.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>angular/angular-animate.CssAnimate.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>angular/angular-animate.CssAnimate.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"angular/angular-animate.CssAnimate.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"angular/angular-animate.CssAnimate.noSuchMethod","comment":"<p><a>angular/angular-animate.CssAnimate.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>angular/angular-animate.CssAnimate.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>angular/angular-animate.CssAnimate.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>angular/angular-animate.CssAnimate.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"addClass":{"name":"addClass","qualifiedName":"angular/angular-animate.CssAnimate.addClass","comment":"<p>Add the <a>angular/angular-animate.CssAnimate.addClass.cssClass</a> to the classes on <a>angular/angular-animate.CssAnimate.addClass.element</a> after running any\ndefined animations.</p>","commentFrom":"","inheritedFrom":"angular-animate.NgAnimate.addClass","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular/angular-animate.Animation","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Element","inner":[]}],"value":"null","annotations":[]},"cssClass":{"name":"cssClass","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"removeClass":{"name":"removeClass","qualifiedName":"angular/angular-animate.CssAnimate.removeClass","comment":"<p>Remove the <a>angular/angular-animate.CssAnimate.removeClass.cssClass</a> from the classes on <a>angular/angular-animate.CssAnimate.removeClass.element</a> after running any\ndefined animations.</p>","commentFrom":"","inheritedFrom":"angular-animate.NgAnimate.removeClass","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular/angular-animate.Animation","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Element","inner":[]}],"value":"null","annotations":[]},"cssClass":{"name":"cssClass","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"insert":{"name":"insert","qualifiedName":"angular/angular-animate.CssAnimate.insert","comment":"<p>Perform an 'enter' animation for each element in <a>angular/angular-animate.CssAnimate.insert.nodes</a>. The elements\nmust exist in the dom. This is equivalent to running enter on each element\nin <a>angular/angular-animate.CssAnimate.insert.nodes</a> and returning Future.wait(handles); for the onCompleted\nproperty on <a>angular/angular-animate.Animation</a>.</p>","commentFrom":"","inheritedFrom":"angular-animate.NgAnimate.insert","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular/angular-animate.Animation","inner":[]}],"parameters":{"nodes":{"name":"nodes","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-dom-html.Node","inner":[]}]}],"value":"null","annotations":[]},"parent":{"name":"parent","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Node","inner":[]}],"value":"null","annotations":[]},"insertBefore":{"name":"insertBefore","optional":true,"named":true,"default":false,"type":[{"outer":"dart-dom-html.Node","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"remove":{"name":"remove","qualifiedName":"angular/angular-animate.CssAnimate.remove","comment":"<p>Perform a 'remove' animation for each element in <a>angular/angular-animate.CssAnimate.remove.nodes</a>. The elements\nmust exist in the dom and should not be detached until the onCompleted\nfuture on the <a>angular/angular-animate.Animation</a> is executed AND the <a>angular/angular-core-dom.AnimationResult</a> is\n<a>angular/angular-core-dom.AnimationResult.COMPLETED</a> or <a>angular/angular-core-dom.AnimationResult.COMPLETED_IGNORED</a>.</p>\n<p>This is equivalent to running remove on each element in <a>angular/angular-animate.CssAnimate.remove.nodes</a> and\nreturning Future.wait(handles); for the onCompleted property on\n<a>angular/angular-animate.Animation</a>.</p>","commentFrom":"","inheritedFrom":"angular-animate.NgAnimate.remove","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular/angular-animate.Animation","inner":[]}],"parameters":{"nodes":{"name":"nodes","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-dom-html.Node","inner":[]}]}],"value":"null","annotations":[]}},"annotations":[]},"move":{"name":"move","qualifiedName":"angular/angular-animate.CssAnimate.move","comment":"<p>Perform a 'move' animation for each element in <a>angular/angular-animate.CssAnimate.move.nodes</a>. The elements\nmust exist in the dom. This is equivalent to running move on each element\nin <a>angular/angular-animate.CssAnimate.move.nodes</a> and returning Future.wait(handles); for the onCompleted\nproperty on <a>angular/angular-animate.Animation</a>.</p>","commentFrom":"","inheritedFrom":"angular-animate.NgAnimate.move","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular/angular-animate.Animation","inner":[]}],"parameters":{"nodes":{"name":"nodes","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-dom-html.Node","inner":[]}]}],"value":"null","annotations":[]},"parent":{"name":"parent","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Node","inner":[]}],"value":"null","annotations":[]},"insertBefore":{"name":"insertBefore","optional":true,"named":true,"default":false,"type":[{"outer":"dart-dom-html.Node","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}