{"name":"angular-mock","qualifiedName":"angular/angular-mock","comment":"<p>Classes and utilities for testing and prototyping in AngularDart.</p>\n<p>This is an optional library. You must import it in addition to the <a href=\"#angular/angular\">angular.dart</a> library,\nlike so:</p>\n<pre><code> import 'package:angular/angular.dart';\n import 'package:angular/mock/module.dart';\n</code></pre>","variables":{"depth":{"name":"depth","qualifiedName":"angular/angular-mock.depth","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]}},"functions":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{"ENTER":{"name":"ENTER","qualifiedName":"angular/angular-mock.ENTER","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"LEAVE":{"name":"LEAVE","qualifiedName":"angular/angular-mock.LEAVE","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"MARK":{"name":"MARK","qualifiedName":"angular/angular-mock.MARK","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"STRINGIFY":{"name":"STRINGIFY","qualifiedName":"angular/angular-mock.STRINGIFY","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"obj":{"name":"obj","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"async":{"name":"async","qualifiedName":"angular/angular-mock.async","comment":"<p>Captures all scheduleMicrotask calls and newly created Timers\ninside of a function.</p>\n<p><a>angular/angular-mock.async</a> will raise an exception if there are still active Timers\nwhen the function completes.</p>\n<p>Use <a>angular/angular-mock.clockTick</a> to process timers, and <a>angular/angular-mock.microLeap</a> to process\nscheduleMicrotask calls.</p>\n<p>NOTE: <a>angular/angular-mock.async</a> will not return the result of <a>angular/angular-mock.async.fn</a>.</p>\n<p>Typically used within a test:</p>\n<pre><code>it('should be async', async(() {\n  ...\n}));\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"fn":{"name":"fn","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"clockTick":{"name":"clockTick","qualifiedName":"angular/angular-mock.clockTick","comment":"<p>Simulates a clock tick by running any scheduled timers. Can only be used\nin <a>angular/angular-mock.async</a> tests.Clock tick will call <a>angular/angular-mock.microLeap</a> to process the microtask\nqueue before each timer callback.</p>\n<p>Note: microtasks scheduled form the last timer are not going to be processed.</p>\n<p>Example:</p>\n<pre><code>it('should run queued timer after sufficient clock ticks', async(() {\n  bool timerRan = false;\n  new Timer(new Duration(milliseconds: 10), () =&gt; timerRan = true);\n\n  clockTick(milliseconds: 9);\n  expect(timerRan).toBeFalsy();\n  clockTick(milliseconds: 1);\n  expect(timerRan).toBeTruthy();\n}));\n\nit('should run periodic timer', async(() {\n  int timerRan = 0;\n  new Timer.periodic(new Duration(milliseconds: 10), (_) =&gt; timerRan++);\n\n  clockTick(milliseconds: 9);\n  expect(timerRan).toBe(0);\n  clockTick(milliseconds: 1);\n  expect(timerRan).toBe(1);\n  clockTick(milliseconds: 30);\n  expect(timerRan).toBe(4);\n}));\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"days":{"name":"days","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]},"hours":{"name":"hours","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]},"minutes":{"name":"minutes","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]},"seconds":{"name":"seconds","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]},"milliseconds":{"name":"milliseconds","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]},"microseconds":{"name":"microseconds","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]}},"annotations":[]},"dump":{"name":"dump","qualifiedName":"angular/angular-mock.dump","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"p1":{"name":"p1","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"p2":{"name":"p2","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"p3":{"name":"p3","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"p4":{"name":"p4","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"p5":{"name":"p5","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"p6":{"name":"p6","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"p7":{"name":"p7","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"p8":{"name":"p8","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"p9":{"name":"p9","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"p10":{"name":"p10","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"inject":{"name":"inject","qualifiedName":"angular/angular-mock.inject","comment":"<p>Allows the injection of instances into a test. See <a>angular/angular-mock.module</a> on how to install new\ntypes into injector.</p>\n<p>NOTE: Calling inject creates an injector, which prevents any more calls to <a>angular/angular-mock.module</a>.</p>\n<p>NOTE: <a>angular/angular-mock.inject</a> will never return the result of <a>angular/angular-mock.inject.fn</a>. If you need to return a Future\nfor unittest to consume, take a look at <a>angular/angular-mock.async</a>, <a>angular/angular-mock.clockTick</a>, and <a>angular/angular-mock.microLeap</a> instead.</p>\n<p>Typical usage:</p>\n<pre><code>test('wrap whole test', inject((TestBed tb) {\n  tb.compile(...);\n}));\n\ntest('wrap part of a test', () {\n  module((Module module) {\n    module.bind(Foo);\n  });\n  inject((TestBed tb) {\n    tb.compile(...);\n  });\n});\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"fn":{"name":"fn","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"isAsyncQueueEmpty":{"name":"isAsyncQueueEmpty","qualifiedName":"angular/angular-mock.isAsyncQueueEmpty","comment":"<p>Returns whether the async queue is empty.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"isNonPeriodicTimerQueueEmpty":{"name":"isNonPeriodicTimerQueueEmpty","qualifiedName":"angular/angular-mock.isNonPeriodicTimerQueueEmpty","comment":"<p>Returns whether there are outstanding non-periodic timers.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"isPeriodicTimerQueueEmpty":{"name":"isPeriodicTimerQueueEmpty","qualifiedName":"angular/angular-mock.isPeriodicTimerQueueEmpty","comment":"<p>Returns whether there are outstanding periodic timers.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"isTimerQueueEmpty":{"name":"isTimerQueueEmpty","qualifiedName":"angular/angular-mock.isTimerQueueEmpty","comment":"<p>Returns whether there are outstanding timers.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"microLeap":{"name":"microLeap","qualifiedName":"angular/angular-mock.microLeap","comment":"<p>Processes the asynchronous queue established by <a>angular/angular-mock.async</a>.</p>\n<p><a>angular/angular-mock.microLeap</a> will process all items in the asynchronous queue,\nincluding new items queued during its execution. It will re-raise\nany exceptions that occur.</p>\n<p>NOTE: <a>angular/angular-mock.microLeap</a> can only be used in <a>angular/angular-mock.async</a> tests.</p>\n<p>Example:</p>\n<pre><code>it('should run async code', async(() {\n  var thenRan = false;\n  new Future.value('s').then((_) { thenRan = true; });\n  expect(thenRan).toBe(false);\n  microLeap();\n  expect(thenRan).toBe(true);\n}));\n\nit('should run chained thens', async(() {\n  var log = [];\n  new Future.value('s')\n    .then((_) { log.add('firstThen'); })\n    .then((_) { log.add('2ndThen'); });\n  expect(log.join(' ')).toEqual('');\n  microLeap();\n  expect(log.join(' ')).toEqual('firstThen 2ndThen');\n}));\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"module":{"name":"module","qualifiedName":"angular/angular-mock.module","comment":"<p>Allows the installation of new types/modules into the current test injector.</p>\n<p>This method can be called in declaration or inline in test. The method can be called\nrepeatedly, as long as <a>angular/angular-mock.inject</a> is not called. Invocation of <a>angular/angular-mock.inject</a> creates the injector and\nhence no more calls to <a>angular/angular-mock.module</a> can be made.</p>\n<pre><code>setUp(module((Module model) {\n  module.bind(Foo);\n});\n\ntest('foo', () {\n  module((Module module) {\n    module.bind(Foo);\n  });\n});\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"fnOrModule":{"name":"fnOrModule","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"noMoreAsync":{"name":"noMoreAsync","qualifiedName":"angular/angular-mock.noMoreAsync","comment":"<p>Causes scheduleMicrotask calls to throw exceptions.</p>\n<p>This function is useful while debugging async tests: the exception\nis thrown from the scheduleMicrotask call-site instead later in the test.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"setUpInjector":{"name":"setUpInjector","qualifiedName":"angular/angular-mock.setUpInjector","comment":"<p>Call this method in your test harness setUp method to setup the injector.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"sync":{"name":"sync","qualifiedName":"angular/angular-mock.sync","comment":"<p>Enforces synchronous code.  Any calls to scheduleMicrotask inside of 'sync'\nwill throw an exception.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"fn":{"name":"fn","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"tearDownInjector":{"name":"tearDownInjector","qualifiedName":"angular/angular-mock.tearDownInjector","comment":"<p>Call this method in your test harness tearDown method to cleanup the injector.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]}}},"classes":{"class":[{"name":"AngularMockModule","qualifiedName":"angular/angular-mock.AngularMockModule","preview":"<p>Use in addition to <a>angular/angular-app.AngularModule</a> in your tests.</p>"},{"name":"ExceptionWithStack","qualifiedName":"angular/angular-mock.ExceptionWithStack"},{"name":"FunctionComposition","qualifiedName":"angular/angular-mock.FunctionComposition"},{"name":"LogAttrDirective","qualifiedName":"angular/angular-mock.LogAttrDirective","preview":"<p>A convenient way to assert the order in which the DOM elements are processed.</p>"},{"name":"Logger","qualifiedName":"angular/angular-mock.Logger","preview":"<p>A convenient way to verify that a set of operations executed in a specific\norder. Simply inject the Logger into each operation and call:</p>"},{"name":"LoggingExceptionHandler","qualifiedName":"angular/angular-mock.LoggingExceptionHandler","preview":"<p>Mock implementation of <a>angular/angular-mock.ExceptionHandler</a> that logs all exceptions for\nlater processing.</p>"},{"name":"MockCacheRegister","qualifiedName":"angular/angular-mock.MockCacheRegister","preview":"<p>This is a null implementation of CacheRegister used in tests.</p>"},{"name":"MockDocument","qualifiedName":"angular/angular-mock.MockDocument"},{"name":"MockHistory","qualifiedName":"angular/angular-mock.MockHistory"},{"name":"MockHttpBackend","qualifiedName":"angular/angular-mock.MockHttpBackend","preview":"<p>A mock implementation of <a>angular/angular-mock.HttpBackend</a>, used in tests.</p>"},{"name":"MockHttpExpectation","qualifiedName":"angular/angular-mock.MockHttpExpectation","preview":"<p>An internal class used by <a>angular/angular-mock.MockHttpBackend</a>.</p>"},{"name":"MockHttpRequest","qualifiedName":"angular/angular-mock.MockHttpRequest","preview":"<p>Mock implementation of the <a>angular/angular-mock.HttpRequest</a> object returned from the HttpBackend.</p>"},{"name":"MockLocation","qualifiedName":"angular/angular-mock.MockLocation"},{"name":"MockProgressEvent","qualifiedName":"angular/angular-mock.MockProgressEvent"},{"name":"MockWebPlatformShim","qualifiedName":"angular/angular-mock.MockWebPlatformShim","preview":"<p>The mock platform exists to smooth out browser differences for tests that\ndo not wish to take browser variance into account. This mock provides null\nimplementations of all operations, but they can be overwritten if needed.</p>"},{"name":"MockWindow","qualifiedName":"angular/angular-mock.MockWindow"},{"name":"MockZone","qualifiedName":"angular/angular-mock.MockZone"},{"name":"Probe","qualifiedName":"angular/angular-mock.Probe"},{"name":"RecordedRequest","qualifiedName":"angular/angular-mock.RecordedRequest","preview":"<p>An internal class used by <a>angular/angular-mock.MockHttpBackend</a>.</p>"},{"name":"RethrowExceptionHandler","qualifiedName":"angular/angular-mock.RethrowExceptionHandler","preview":"<p>Mock implementation of <a>angular/angular-mock.ExceptionHandler</a> that rethrows exceptions.</p>"},{"name":"TestBed","qualifiedName":"angular/angular-mock.TestBed","preview":"<p>Class which simplifies bootstraping of angular for unit tests.</p>"}],"typedef":{},"error":[]},"packageName":"angular","packageIntro":"<h1>AngularDart</h1>\n<p>A port of <a href=\"http://angularjs.org/\">Angular</a> to <a href=\"http://www.dartlang.org\">Dart</a>.</p>\n<h2>Installing</h2>\n<p>Follow the instructions on <a href=\"http://pub.dartlang.org/packages/angular#installing\">AngularDart's page on pub</a>.</p>\n<h2>API documentation</h2>\n<p>Read the autogenerated <a href=\"https://docs.angulardart.org\">API documentation</a>.</p>\n<h2>Learning more</h2>\n<p>Study the <a href=\"https://angulardart.org/tutorial\">AngularDart Tutorial</a> to learn more about Angular\nin Dart.</p>\n<h2>Joining the discussion</h2>\n<p>Discuss AngularDart on the <a href=\"https://groups.google.com/forum/#!forum/angular-dart\">mailing list</a>,\nask questions on <a href=\"http://stackoverflow.com/questions/tagged/angular.dart\">StackOverflow</a>,\nfollow <a href=\"https://plus.google.com/117340875933142003564/posts\">+AngularDart on Google+</a>,\nand follow <a href=\"https://twitter.com/AngularDart\">@AngularDart</a> and <a href=\"https://twitter.com/AngularJS\">@AngularJS</a> on Twitter.</p>\n<h2>Filing bugs</h2>\n<p>Please file bugs and feature requests using the <a href=\"https://github.com/angular/angular.dart/issues?state=open\">Github Issues Tracker</a>.</p>\n<h2>I want to help</h2>\n<p>Excellent read up on <a href=\"https://github.com/angular/angular.dart/blob/master/CONTRIBUTING.md\">contributing</a>.</p>"}