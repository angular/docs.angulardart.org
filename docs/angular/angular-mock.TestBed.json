{"name":"TestBed","qualifiedName":"angular/angular-mock.TestBed","comment":"<p>Class which simplifies bootstraping of angular for unit tests.</p>\n<p>Simply inject <a>angular/angular-mock.TestBed</a> into the test, then use <a>angular/angular-mock.TestBed.compile</a> to\nmatch directives against the view.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"compiler":{"name":"compiler","qualifiedName":"angular/angular-mock.TestBed.compiler","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"angular-core-dom_internal.Compiler","inner":[]}],"annotations":[]},"expando":{"name":"expando","qualifiedName":"angular/angular-mock.TestBed.expando","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.Expando","inner":[]}],"annotations":[]},"injector":{"name":"injector","qualifiedName":"angular/angular-mock.TestBed.injector","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"di.Injector","inner":[]}],"annotations":[]},"rootElement":{"name":"rootElement","qualifiedName":"angular/angular-mock.TestBed.rootElement","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-dom-html.Element","inner":[]}],"annotations":[]},"rootElements":{"name":"rootElements","qualifiedName":"angular/angular-mock.TestBed.rootElements","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"angular/angular-mock.Node","inner":[]}]}],"annotations":[]},"rootScope":{"name":"rootScope","qualifiedName":"angular/angular-mock.TestBed.rootScope","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"angular-core_internal.Scope","inner":[]}],"annotations":[]},"rootView":{"name":"rootView","qualifiedName":"angular/angular-mock.TestBed.rootView","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"angular-core-dom_internal.View","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"angular/angular-mock.TestBed.TestBed-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"injector":{"name":"injector","optional":false,"named":false,"default":false,"type":[{"outer":"di.Injector","inner":[]}],"value":null,"annotations":[]},"rootScope":{"name":"rootScope","optional":false,"named":false,"default":false,"type":[{"outer":"angular-core_internal.Scope","inner":[]}],"value":null,"annotations":[]},"compiler":{"name":"compiler","optional":false,"named":false,"default":false,"type":[{"outer":"angular-core-dom_internal.Compiler","inner":[]}],"value":null,"annotations":[]},"_parser":{"name":"_parser","optional":false,"named":false,"default":false,"type":[{"outer":"angular-core-parser.Parser","inner":[]}],"value":null,"annotations":[]},"expando":{"name":"expando","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Expando","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{"compile":{"name":"compile","qualifiedName":"angular/angular-mock.TestBed.compile","comment":"<p>Use to compile HTML and activate its directives.</p>\n<p>If <a>angular/angular-mock.TestBed.compile.html</a> parameter is:</p><ul><li><a>dart-core.String</a> then treat it as HTML</li><li><a>angular/angular-mock.Node</a> then treat it as the root node</li><li><a>dart-core</a>&lt;Node> then treat it as a collection of nods</li></ul>\n<p>After the compilation the <a>angular/angular-mock.TestBed.rootElements</a> contains an array of compiled root nodes,\nand <a>angular/angular-mock.TestBed.rootElement</a> contains the first element from the rootElemets.</p>\n<p>An option <a>angular/angular-mock.TestBed.compile.scope</a> parameter can be supplied to link it with non root scope.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.Element","inner":[]}],"parameters":{"html":{"name":"html","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"scope":{"name":"scope","optional":true,"named":true,"default":false,"type":[{"outer":"angular-core_internal.Scope","inner":[]}],"value":null,"annotations":[]},"directives":{"name":"directives","optional":true,"named":true,"default":false,"type":[{"outer":"angular-core-dom_internal.DirectiveMap","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getProbe":{"name":"getProbe","qualifiedName":"angular/angular-mock.TestBed.getProbe","comment":"","commentFrom":"angular-mock.TestBed.getProbe","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"node":{"name":"node","optional":false,"named":false,"default":false,"type":[{"outer":"angular/angular-mock.Node","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getScope":{"name":"getScope","qualifiedName":"angular/angular-mock.TestBed.getScope","comment":"","commentFrom":"angular-mock.TestBed.getScope","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"node":{"name":"node","optional":false,"named":false,"default":false,"type":[{"outer":"angular/angular-mock.Node","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"selectOption":{"name":"selectOption","qualifiedName":"angular/angular-mock.TestBed.selectOption","comment":"<p>Select an OPTION in a SELECT with a given name and trigger the\nappropriate DOM event. Used when testing SELECT controlls in forms.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"text":{"name":"text","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toNodeList":{"name":"toNodeList","qualifiedName":"angular/angular-mock.TestBed.toNodeList","comment":"<p>Convert an <a>angular/angular-mock.TestBed.toNodeList.html</a> String to a <a>dart-core.List</a> of <a>angular/dart-dom-html.Element</a>s.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-dom-html.Element","inner":[]}]}],"parameters":{"html":{"name":"html","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"triggerEvent":{"name":"triggerEvent","qualifiedName":"angular/angular-mock.TestBed.triggerEvent","comment":"<p>Trigger a specific DOM element on a given node to test directives\nwhich listen to events.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"type":{"name":"type","optional":true,"named":false,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"\"MouseEvent\"","annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"angular/angular-mock.TestBed.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>angular/angular-mock.TestBed.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"angular/angular-mock.TestBed.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"angular/angular-mock.TestBed.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>angular/angular-mock.TestBed.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>angular/angular-mock.TestBed.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"angular/angular-mock.TestBed.noSuchMethod","comment":"<p><a>angular/angular-mock.TestBed.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>angular/angular-mock.TestBed.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>angular/angular-mock.TestBed.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>angular/angular-mock.TestBed.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"angular/angular-mock.TestBed.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}