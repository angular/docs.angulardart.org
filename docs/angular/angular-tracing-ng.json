{"name":"angular-tracing-ng","qualifiedName":"angular/angular-tracing-ng","comment":"<p>Tracing scopes in AngularDart.</p>\n<p>This library contains the scope definitions used in AngularDart for tracing purposes.</p>","variables":{"Application_bootstrap":{"name":"Application_bootstrap","qualifiedName":"angular/angular-tracing-ng.Application_bootstrap","comment":"<p>Name: <code>Application#bootstrap()</code></p>\n<p>Designates a bootstrapping of AngularDart application in response to Application.run().\nIt usually contains compilation of templates and initial Scope.apply()</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"ChangeDetector_check":{"name":"ChangeDetector_check","qualifiedName":"angular/angular-tracing-ng.ChangeDetector_check","comment":"<p>Name: <code>ChangeDetector#check()</code></p>\n<p>Designates where AngularDart detects changes in the model.\nThe checking is further subdivided into these sections:\n- <code>ChangeDetector#fields()</code> looking for changes in object fields.\n- <code>ChangeDetector#eval()</code> looking for changes by invoking functions.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"ChangeDetector_eval":{"name":"ChangeDetector_eval","qualifiedName":"angular/angular-tracing-ng.ChangeDetector_eval","comment":"<p>Name: <code>ChangeDetector#eval()</code></p>\n<p>Designates where AngularDart looks for changes in the model by invoking functions in watch\nexpressions.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"ChangeDetector_fields":{"name":"ChangeDetector_fields","qualifiedName":"angular/angular-tracing-ng.ChangeDetector_fields","comment":"<p>Name: <code>ChangeDetector#fields()</code></p>\n<p>Designates where AngularDart looks for changes in the model by differencing fields in watch\nexpressions.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"ChangeDetector_invoke":{"name":"ChangeDetector_invoke","qualifiedName":"angular/angular-tracing-ng.ChangeDetector_invoke","comment":"<p>Name: <code>ChangeDetector#reaction()</code></p>\n<p>Designates time spent processing the individual expressions in <code>ChangeDetector#reaction()</code>.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"ChangeDetector_reaction":{"name":"ChangeDetector_reaction","qualifiedName":"angular/angular-tracing-ng.ChangeDetector_reaction","comment":"<p>Name: <code>ChangeDetector#reaction()</code></p>\n<p>Designates time spent processing the changes which were detected in <code>ChangeDetector#check()</code>.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"Compiler_compile":{"name":"Compiler_compile","qualifiedName":"angular/angular-tracing-ng.Compiler_compile","comment":"<p>Name: <code>Compiler#compile()</code></p>\n<p>Designates where template HTML is compiled. Compilation is a process of walking the DOM and\nfinding all of the directives.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"Compiler_template":{"name":"Compiler_template","qualifiedName":"angular/angular-tracing-ng.Compiler_template","comment":"<p>Name: <code>Compiler#template()</code></p>\n<p>Designates <code>@Template</code> directive needs to compile its children. For example <code>ng-repeat</code>.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"Directive_create":{"name":"Directive_create","qualifiedName":"angular/angular-tracing-ng.Directive_create","comment":"<p>Name: <code>Directive#create(ascii name)</code></p>\n<p>Designates a particular directive is created. This includes the setting up of bindings for\nthe directive.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"Scope_apply":{"name":"Scope_apply","qualifiedName":"angular/angular-tracing-ng.Scope_apply","comment":"<p>Name: <code>Scope#apply()</code></p>\n<p>When processing events angular transitions through stages in this sequence:</p><ul><li><code>Scope#apply()</code></li><li><code>Scope#digest()</code></li><li><code>Scope#flush()</code></li><li><code>Scope#domWrite()</code></li><li><code>Scope#domRead()</code></li><li><code>Scope#assert()</code></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"Scope_assert":{"name":"Scope_assert","qualifiedName":"angular/angular-tracing-ng.Scope_assert","comment":"<p>Name: <code>Scope#assert()</code></p>\n<p>When asserts are enabled, verify that the <code>Scope#flush()</code> is idempotent, meaning it did\nnot make any further model changes.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"Scope_createChild":{"name":"Scope_createChild","qualifiedName":"angular/angular-tracing-ng.Scope_createChild","comment":"<p>Name: <code>Scope#create()</code></p>\n<p>Create new Scope.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"Scope_digest":{"name":"Scope_digest","qualifiedName":"angular/angular-tracing-ng.Scope_digest","comment":"<p>Name: <code>Scope#digest()</code></p>\n<p>Process non-DOM changes in the model.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"Scope_domRead":{"name":"Scope_domRead","qualifiedName":"angular/angular-tracing-ng.Scope_domRead","comment":"<p>Name: <code>Scope#domRead()</code></p>\n<p>Process DOM read coalescence queue.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"Scope_domWrite":{"name":"Scope_domWrite","qualifiedName":"angular/angular-tracing-ng.Scope_domWrite","comment":"<p>Name: <code>Scope#domWrite()</code></p>\n<p>Process DOM write coalescence queue.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"Scope_execAsync":{"name":"Scope_execAsync","qualifiedName":"angular/angular-tracing-ng.Scope_execAsync","comment":"<p>Name: <code>Scope#execAsync()</code></p>\n<p>Process asynchronous microtask queue.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"Scope_flush":{"name":"Scope_flush","qualifiedName":"angular/angular-tracing-ng.Scope_flush","comment":"<p>Name: <code>Scope#flush()</code></p>\n<p>Process DOM changes in the model.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"View_create":{"name":"View_create","qualifiedName":"angular/angular-tracing-ng.View_create","comment":"<p>Name: <code>View#create(ascii html)</code></p>\n<p>Designates new views are created.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"View_createComponent":{"name":"View_createComponent","qualifiedName":"angular/angular-tracing-ng.View_createComponent","comment":"<p>Name: <code>View#createComponent()</code></p>\n<p>Designates components are created in a view. Components are treated differently than\nother directives because they require creation of shadow scope and shadow DOM.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"VmTurnZone_run":{"name":"VmTurnZone_run","qualifiedName":"angular/angular-tracing-ng.VmTurnZone_run","comment":"<p>Name: <code>VmTurnZone#run()</code></p>\n<p>Designates VM turn boundary, which ensures that Model changes get processed.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"VmTurnZone_scheduleMicrotask":{"name":"VmTurnZone_scheduleMicrotask","qualifiedName":"angular/angular-tracing-ng.VmTurnZone_scheduleMicrotask","comment":"<p>Name: <code>VmTurnZone#scheduleMicrotask()</code></p>\n<p>Designates where new microtasks are scheduled. This is usually in response to creating Futures.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]}},"functions":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{}},"classes":{"class":[],"typedef":{},"error":[]},"packageName":"angular","packageIntro":"<h1>AngularDart</h1>\n<p>A port of <a href=\"http://angularjs.org/\">Angular</a> to <a href=\"http://www.dartlang.org\">Dart</a>.</p>\n<h2>Installing</h2>\n<p>Follow the instructions on <a href=\"http://pub.dartlang.org/packages/angular#installing\">AngularDart's page on pub</a>.</p>\n<h2>API documentation</h2>\n<p>Read the autogenerated <a href=\"https://docs.angulardart.org\">API documentation</a>.</p>\n<h2>Learning more</h2>\n<p>Study the <a href=\"https://angulardart.org/tutorial\">AngularDart Tutorial</a> to learn more about Angular\nin Dart.</p>\n<h2>Joining the discussion</h2>\n<p>Discuss AngularDart on the <a href=\"https://groups.google.com/forum/#!forum/angular-dart\">mailing list</a>,\nask questions on <a href=\"http://stackoverflow.com/questions/tagged/angular.dart\">StackOverflow</a>,\nfollow <a href=\"https://plus.google.com/117340875933142003564/posts\">+AngularDart on Google+</a>,\nand follow <a href=\"https://twitter.com/AngularDart\">@AngularDart</a> and <a href=\"https://twitter.com/AngularJS\">@AngularJS</a> on Twitter.</p>\n<h2>Filing bugs</h2>\n<p>Please file bugs and feature requests using the <a href=\"https://github.com/angular/angular.dart/issues?state=open\">Github Issues Tracker</a>.</p>\n<h2>I want to help</h2>\n<p>Excellent read up on <a href=\"https://github.com/angular/angular.dart/blob/master/CONTRIBUTING.md\">contributing</a>.</p>"}