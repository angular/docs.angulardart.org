{"name":"NgBooleanAttribute","qualifiedName":"angular/angular.NgBooleanAttribute","comment":"<p>Allows adding and removing the boolean attributes from the element.</p>\n<p>Using <code>&lt;button disabled=\"{{false}}\"&gt;</code> does not work since it would result\nin <code>&lt;button disabled=\"false\"&gt;</code> rather than <code>&lt;button&gt;</code>.\nBrowsers change behavior based on presence/absence of the attribute rather\nits value.</p>\n<p>For this reason we provide alternate <code>ng-</code>attribute directives to\nadd/remove boolean attributes such as <code>&lt;button ng-disabled=\"{{false}}\"&gt;</code>\nwhich will result in proper removal of the attribute.</p>\n<p>The full list of supported attributes are:</p><ul><li>ng-checked</li><li>ng-disabled</li><li>ng-multiple</li><li>ng-open</li><li>ng-readonly</li><li>ng-required</li><li>ng-selected</li></ul>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{"checked=":{"name":"checked=","qualifiedName":"angular/angular.NgBooleanAttribute.checked=","comment":"","commentFrom":"angular-directive.NgBooleanAttribute.checked=","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"on":{"name":"on","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"disabled=":{"name":"disabled=","qualifiedName":"angular/angular.NgBooleanAttribute.disabled=","comment":"","commentFrom":"angular-directive.NgBooleanAttribute.disabled=","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"on":{"name":"on","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"multiple=":{"name":"multiple=","qualifiedName":"angular/angular.NgBooleanAttribute.multiple=","comment":"","commentFrom":"angular-directive.NgBooleanAttribute.multiple=","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"on":{"name":"on","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"open=":{"name":"open=","qualifiedName":"angular/angular.NgBooleanAttribute.open=","comment":"","commentFrom":"angular-directive.NgBooleanAttribute.open=","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"on":{"name":"on","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"readonly=":{"name":"readonly=","qualifiedName":"angular/angular.NgBooleanAttribute.readonly=","comment":"","commentFrom":"angular-directive.NgBooleanAttribute.readonly=","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"on":{"name":"on","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"required=":{"name":"required=","qualifiedName":"angular/angular.NgBooleanAttribute.required=","comment":"","commentFrom":"angular-directive.NgBooleanAttribute.required=","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"on":{"name":"on","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"selected=":{"name":"selected=","qualifiedName":"angular/angular.NgBooleanAttribute.selected=","comment":"","commentFrom":"angular-directive.NgBooleanAttribute.selected=","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"on":{"name":"on","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"getters":{},"constructors":{"":{"name":"","qualifiedName":"angular/angular.NgBooleanAttribute.NgBooleanAttribute-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"_ngElement":{"name":"_ngElement","optional":false,"named":false,"default":false,"type":[{"outer":"angular/angular.NgElement","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"angular/angular.NgBooleanAttribute.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>angular/angular.NgBooleanAttribute.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"angular/angular.NgBooleanAttribute.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"angular/angular.NgBooleanAttribute.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>angular/angular.NgBooleanAttribute.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>angular/angular.NgBooleanAttribute.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"angular/angular.NgBooleanAttribute.noSuchMethod","comment":"<p><a>angular/angular.NgBooleanAttribute.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>angular/angular.NgBooleanAttribute.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>angular/angular.NgBooleanAttribute.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>angular/angular.NgBooleanAttribute.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"angular/angular.NgBooleanAttribute.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[{"name":"angular/angular.Decorator","parameters":["selector:'[ng-checked]'","map:const{'ng-checked':'=>checked'","}"]},{"name":"angular/angular.Decorator","parameters":["selector:'[ng-disabled]'","map:const{'ng-disabled':'=>disabled'","}"]},{"name":"angular/angular.Decorator","parameters":["selector:'[ng-multiple]'","map:const{'ng-multiple':'=>multiple'","}"]},{"name":"angular/angular.Decorator","parameters":["selector:'[ng-open]'","map:const{'ng-open':'=>open'","}"]},{"name":"angular/angular.Decorator","parameters":["selector:'[ng-readonly]'","map:const{'ng-readonly':'=>readonly'","}"]},{"name":"angular/angular.Decorator","parameters":["selector:'[ng-required]'","map:const{'ng-required':'=>required'","}"]},{"name":"angular/angular.Decorator","parameters":["selector:'[ng-selected]'","map:const{'ng-selected':'=>selected'","}"]}],"generics":{}}