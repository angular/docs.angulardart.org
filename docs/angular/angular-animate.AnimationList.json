{"name":"AnimationList","qualifiedName":"angular/angular-animate.AnimationList","comment":"<p>This is a proxy class for dealing with a set of elements where the 'same'\nor similar animations are being run on them and it's more convenient to have\na merged animation to control and listen to a set of animations.</p>","isAbstract":false,"superclass":"angular/angular-animate.Animation","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{"onCompleted":{"name":"onCompleted","qualifiedName":"angular/angular-animate.AnimationList.onCompleted","comment":"<p>OnCompleted executes once all the OnCompleted futures for each of the\nanimations completes.</p>\n<p>if every animation returns <a>angular/angular-core-dom.AnimationResult.COMPLETED</a>,\n  <a>angular/angular-core-dom.AnimationResult.COMPLETED</a> will be returned.\nif any animation was <a>angular/angular-core-dom.AnimationResult.COMPLETED_IGNORED</a> instead, even if\n  some animations were completed, <a>angular/angular-core-dom.AnimationResult.COMPLETED_IGNORED</a> will\n  be returned.\nif any animation was <a>angular/angular-core-dom.AnimationResult.CANCELED</a>, the result will be\n  <a>angular/angular-core-dom.AnimationResult.CANCELED</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"angular-core-dom.AnimationResult","inner":[]}]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"angular/angular-animate.AnimationList.AnimationList-","comment":"<p>track and create a new <a>angular/angular-animate.Animation</a> that acts as a proxy to a list of\nexisting <a>angular/angular-animate.Animation</a>s.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"_animations":{"name":"_animations","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"operators":{},"methods":{"complete":{"name":"complete","qualifiedName":"angular/angular-animate.AnimationList.complete","comment":"<p>For each of the tracked <a>angular/angular-animate.Animation</a>s, call complete().</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"cancel":{"name":"cancel","qualifiedName":"angular/angular-animate.AnimationList.cancel","comment":"<p>For each of the tracked <a>angular/angular-animate.Animation</a>s, call cancel().</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"angular/angular-animate.AnimationList.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>angular/angular-animate.AnimationList.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"angular/angular-animate.AnimationList.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"onCompleted":{"name":"onCompleted","qualifiedName":"angular/angular-animate.AnimationList.onCompleted","comment":"<p>Executed once when the animation is completed with the type of completion\nresult.</p>","commentFrom":"","inheritedFrom":"angular-animate.Animation.onCompleted","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"angular-core-dom.AnimationResult","inner":[]}]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"angular/angular-animate.AnimationList.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>angular/angular-animate.AnimationList.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>angular/angular-animate.AnimationList.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"angular/angular-animate.AnimationList.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"angular/angular-animate.AnimationList.noSuchMethod","comment":"<p><a>angular/angular-animate.AnimationList.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>angular/angular-animate.AnimationList.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>angular/angular-animate.AnimationList.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>angular/angular-animate.AnimationList.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"complete":{"name":"complete","qualifiedName":"angular/angular-animate.AnimationList.complete","comment":"<p>Stop and complete the animation immediately. This has no effect if the\nanimation has already completed.</p>\n<p>The onCompleted future will be executed if the animation has not been\ncompleted.</p>","commentFrom":"","inheritedFrom":"angular-animate.Animation.complete","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"cancel":{"name":"cancel","qualifiedName":"angular/angular-animate.AnimationList.cancel","comment":"<p>Stop and cancel the animation immediately. This has no effect if the\nanimation has already completed.</p>\n<p>The onCompleted future will be executed if the animation has not been\ncompleted.</p>","commentFrom":"","inheritedFrom":"angular-animate.Animation.cancel","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}