{"name":"NgRepeatDirective","qualifiedName":"angular/angular.NgRepeatDirective","comment":"<p>The <code>ngRepeat</code> directive instantiates a template once per item from a\ncollection. Each template instance gets its own scope, where the given loop\nvariable is set to the current collection item, and <code>$index</code> is set to the\nitem index or key.</p>\n<p>Special properties are exposed on the local scope of each template instance,\nincluding:</p><table>\n<tr><th> Variable  </th><th> Type </th><th> Details                                                                     <th></tr>\n<tr><td> `$index`  </td><td>[num] </td><td> iterator offset of the repeated element (0..length-1)                       <td></tr>\n<tr><td> `$first`  </td><td>[bool]</td><td> true if the repeated element is first in the iterator.                      <td></tr>\n<tr><td> `$middle` </td><td>[bool]</td><td> true if the repeated element is between the first and last in the iterator. <td></tr>\n<tr><td> `$last`   </td><td>[bool]</td><td> true if the repeated element is last in the iterator.                       <td></tr>\n<tr><td> `$even`   </td><td>[bool]</td><td> true if the iterator position `$index` is even (otherwise false).           <td></tr>\n<tr><td> `$odd`    </td><td>[bool]</td><td> true if the iterator position `$index` is odd (otherwise false).            <td></tr>\n</table>\n<p>repeat_expression ngRepeat The expression indicating how to enumerate a\ncollection. These formats are currently supported:</p><ul><li>\n<p><code>variable in expression</code> – where variable is the user defined loop\n  variable and <code>expression</code> is a scope expression giving the collection to\n  enumerate.</p>\n<p>For example: <code>album in artist.albums</code>.</p></li><li>\n<p><code>variable in expression track by tracking_expression</code> – You can also\n  provide an optional tracking function which can be used to associate the\n  objects in the collection with the DOM elements. If no tracking function is\n  specified the ng-repeat associates elements by identity in the collection.\n  It is an error to have more than one tracking function to resolve to the\n  same key. (This would mean that two distinct objects are mapped to the same\n  DOM element, which is not possible.)  Filters should be applied to the\n  expression, before specifying a tracking expression.</p>\n<p>For example: <code>item in items</code> is equivalent to <code>item in items track by\n$id(item)</code>. This implies that the DOM elements will be associated by item\nidentity in the array.</p>\n<p>For example: <code>item in items track by $id(item)</code>. A built in <code>$id()</code>\nfunction can be used to assign a unique <code>$$hashKey</code> property to each item\nin the array. This property is then used as a key to associated DOM\nelements with the corresponding item in the array by identity. Moving the\nsame object in array would move the DOM element in the same way ian the\nDOM.</p>\n<p>For example: <code>item in items track by item.id</code> is a typical pattern when\nthe items come from the database. In this case the object identity does\nnot matter. Two objects are considered equivalent as long as their <code>id</code>\nproperty is same.</p>\n<p>For example: <code>item in items | filter:searchText track by item.id</code> is a\npattern that might be used to apply a filter to items in conjunction with\na tracking expression.</p></li></ul>\n<h1>Example:</h1>\n<pre><code>&lt;ul&gt;\n  &lt;li ng-repeat=\"item in ['foo', 'bar', 'baz']\"&gt;{{item}}&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>","isAbstract":false,"superclass":"angular/angular.AbstractNgRepeatDirective","implements":[],"subclass":[],"variables":{},"inheritedVariables":{"filters":{"name":"filters","qualifiedName":"angular/angular.AbstractNgRepeatDirective.filters","comment":"","final":"true","static":"false","constant":"false","type":[{"outer":"angular/angular.FilterMap","inner":[]}],"annotations":[]}},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"angular/angular.NgRepeatDirective.NgRepeatDirective-","comment":"","commentFrom":"","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{"viewPort":{"name":"viewPort","optional":"false","named":"false","default":"false","type":[{"outer":"angular/angular.ViewPort","inner":[]}],"value":"null","annotations":[]},"boundViewFactory":{"name":"boundViewFactory","optional":"false","named":"false","default":"false","type":[{"outer":"angular/angular.BoundViewFactory","inner":[]}],"value":"null","annotations":[]},"scope":{"name":"scope","optional":"false","named":"false","default":"false","type":[{"outer":"angular/angular.Scope","inner":[]}],"value":"null","annotations":[]},"parser":{"name":"parser","optional":"false","named":"false","default":"false","type":[{"outer":"angular/angular.Parser","inner":[]}],"value":"null","annotations":[]},"astParser":{"name":"astParser","optional":"false","named":"false","default":"false","type":[{"outer":"angular/angular.AstParser","inner":[]}],"value":"null","annotations":[]},"filters":{"name":"filters","optional":"false","named":"false","default":"false","type":[{"outer":"angular/angular.FilterMap","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"operators":{},"methods":{}},"inheritedMethods":{"setters":{"expression=":{"name":"expression=","qualifiedName":"angular/angular.NgRepeatDirective.expression=","comment":"","commentFrom":"","inheritedFrom":"angular.AbstractNgRepeatDirective.expression=","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{"value":{"name":"value","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"angular/angular.NgRepeatDirective.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>angular/angular.NgRepeatDirective.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"angular/angular.NgRepeatDirective.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"angular/angular.NgRepeatDirective.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>angular/angular.NgRepeatDirective.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>angular/angular.NgRepeatDirective.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"angular/angular.NgRepeatDirective.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"angular/angular.NgRepeatDirective.noSuchMethod","comment":"<p><a>angular/angular.NgRepeatDirective.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>angular/angular.NgRepeatDirective.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>angular/angular.NgRepeatDirective.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>angular/angular.NgRepeatDirective.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[{"name":"angular.NgDirective","parameters":[]}],"generics":{}}