{"name":"AnimationOptimizer","qualifiedName":"angular/angular-animate.AnimationOptimizer","comment":"<p>The optimizer tracks elements and running animations. It's used to control\nand optionally skip certain animations that are deemed \"expensive\" such as\nrunning animations on child elements while the dom parent is also running an\nanimation.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"angular/angular-animate.AnimationOptimizer.AnimationOptimizer-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"_expando":{"name":"_expando","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Expando","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"operators":{},"methods":{"track":{"name":"track","qualifiedName":"angular/angular-animate.AnimationOptimizer.track","comment":"<p>Track an animation that is running against a dom element. Usually, this\nshould occur when an animation starts.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"animation":{"name":"animation","optional":false,"named":false,"default":false,"type":[{"outer":"angular/angular-animate.Animation","inner":[]}],"value":"null","annotations":[]},"forElement":{"name":"forElement","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Element","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"forget":{"name":"forget","qualifiedName":"angular/angular-animate.AnimationOptimizer.forget","comment":"<p>Stop tracking an animation. If it's the last tracked animation on an\nelement forget about that element as well.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"animation":{"name":"animation","optional":false,"named":false,"default":false,"type":[{"outer":"angular/angular-animate.Animation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"detachAlwaysAnimateOptions":{"name":"detachAlwaysAnimateOptions","qualifiedName":"angular/angular-animate.AnimationOptimizer.detachAlwaysAnimateOptions","comment":"<p>Since we can't overload forget...</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Element","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"alwaysAnimate":{"name":"alwaysAnimate","qualifiedName":"angular/angular-animate.AnimationOptimizer.alwaysAnimate","comment":"<p>Control animation for a specific element, ignoring every other option.\n  <a>angular/angular-animate.AnimationOptimizer.alwaysAnimate.mode</a> \"always\" will always animate this element.\n  <a>angular/angular-animate.AnimationOptimizer.alwaysAnimate.mode</a> \"never\" will never animate this element.\n  <a>angular/angular-animate.AnimationOptimizer.alwaysAnimate.mode</a> \"auto\" will detect if a parent animation is running or has child animations set.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Element","inner":[]}],"value":"null","annotations":[]},"mode":{"name":"mode","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"alwaysAnimateChildren":{"name":"alwaysAnimateChildren","qualifiedName":"angular/angular-animate.AnimationOptimizer.alwaysAnimateChildren","comment":"<p>Control animation for child elements, ignoring running animations unless 'auto' is provided as an option.\n  <a>angular/angular-animate.AnimationOptimizer.alwaysAnimateChildren.mode</a> \"always\" will always animate children, unless it is specifically marked not to by <a>angular/angular-animate.AnimationOptimizer.alwaysAnimate</a>.\n  <a>angular/angular-animate.AnimationOptimizer.alwaysAnimateChildren.mode</a> \"never\" will never animate children.\n  <a>angular/angular-animate.AnimationOptimizer.alwaysAnimateChildren.mode</a> \"auto\" will detect if a parent animation is running or has child animations set.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Element","inner":[]}],"value":"null","annotations":[]},"mode":{"name":"mode","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"shouldAnimate":{"name":"shouldAnimate","qualifiedName":"angular/angular-animate.AnimationOptimizer.shouldAnimate","comment":"<p>Given all the information this optimizer knows about currently executing\nanimations, return true if this element can be animated in an ideal case\nand false if the optimizer thinks that it should not execute.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"node":{"name":"node","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Node","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"angular/angular-animate.AnimationOptimizer.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>angular/angular-animate.AnimationOptimizer.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"angular/angular-animate.AnimationOptimizer.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"angular/angular-animate.AnimationOptimizer.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>angular/angular-animate.AnimationOptimizer.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>angular/angular-animate.AnimationOptimizer.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"angular/angular-animate.AnimationOptimizer.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"angular/angular-animate.AnimationOptimizer.noSuchMethod","comment":"<p><a>angular/angular-animate.AnimationOptimizer.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>angular/angular-animate.AnimationOptimizer.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>angular/angular-animate.AnimationOptimizer.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>angular/angular-animate.AnimationOptimizer.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}