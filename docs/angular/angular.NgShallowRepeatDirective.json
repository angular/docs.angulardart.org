{"name":"NgShallowRepeatDirective","qualifiedName":"angular/angular.NgShallowRepeatDirective","comment":"<p><em>EXPERIMENTAL:</em> This feature is experimental. We reserve the right to change\nor delete it.</p>\n<p>ng-shallow-repeat is same as ng-repeat with some tradeoffs designed for\nspeed. Use ng-shallow-repeat when you expect that your items you are\nrepeating over do not change during the repeater lifetime.</p>\n<p>The shallow repeater introduces these changes:</p><ul><li>\n<p>The repeater only fires if the identity of the list changes or if the list\n length property changes. This means that the repeater will still see\n additions and deletions but not changes to the array.</p></li><li>\n<p>The child scopes for each item are created in the lazy mode\n (see Scope.$new). This means the scopes are effectively taken out of the\n digest cycle and will not update on changes to the model.</p></li></ul>","isAbstract":false,"superclass":"angular/angular.AbstractNgRepeatDirective","implements":[],"subclass":[],"variables":{},"inheritedVariables":{"filters":{"name":"filters","qualifiedName":"angular/angular.AbstractNgRepeatDirective.filters","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"angular/angular.FilterMap","inner":[]}],"annotations":[]}},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"angular/angular.NgShallowRepeatDirective.NgShallowRepeatDirective-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"blockHole":{"name":"blockHole","optional":false,"named":false,"default":false,"type":[{"outer":"angular/angular.BlockHole","inner":[]}],"value":"null","annotations":[]},"boundBlockFactory":{"name":"boundBlockFactory","optional":false,"named":false,"default":false,"type":[{"outer":"angular/angular.BoundBlockFactory","inner":[]}],"value":"null","annotations":[]},"scope":{"name":"scope","optional":false,"named":false,"default":false,"type":[{"outer":"angular/angular.Scope","inner":[]}],"value":"null","annotations":[]},"parser":{"name":"parser","optional":false,"named":false,"default":false,"type":[{"outer":"angular/angular.Parser","inner":[]}],"value":"null","annotations":[]},"astParser":{"name":"astParser","optional":false,"named":false,"default":false,"type":[{"outer":"angular/angular.AstParser","inner":[]}],"value":"null","annotations":[]},"filters":{"name":"filters","optional":false,"named":false,"default":false,"type":[{"outer":"angular/angular.FilterMap","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"operators":{},"methods":{}},"inheritedMethods":{"setters":{"expression=":{"name":"expression=","qualifiedName":"angular/angular.NgShallowRepeatDirective.expression=","comment":"","commentFrom":"","inheritedFrom":"angular.AbstractNgRepeatDirective.expression=","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"angular/angular.NgShallowRepeatDirective.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>angular/angular.NgShallowRepeatDirective.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"angular/angular.NgShallowRepeatDirective.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"angular/angular.NgShallowRepeatDirective.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>angular/angular.NgShallowRepeatDirective.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>angular/angular.NgShallowRepeatDirective.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"angular/angular.NgShallowRepeatDirective.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"angular/angular.NgShallowRepeatDirective.noSuchMethod","comment":"<p><a>angular/angular.NgShallowRepeatDirective.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>angular/angular.NgShallowRepeatDirective.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>angular/angular.NgShallowRepeatDirective.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>angular/angular.NgShallowRepeatDirective.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[{"name":"dart-core.Deprecated","parameters":["next release"]},{"name":"angular.NgDirective","parameters":[]}],"generics":{}}