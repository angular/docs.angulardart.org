{"name":"CssAnimation","qualifiedName":"angular/angular-animate.CssAnimation","comment":"<p><a>angular/angular-animate.Animation</a> implementation for handling the standard angular 'event' and\n'event-active' class pattern with css. This will compute transition and\nanimation duration from the css classes and use it to complete futures when\nthe css animations complete.</p>","isAbstract":false,"superclass":"angular/angular-animate.LoopedAnimation","implements":[],"subclass":[],"variables":{"element":{"name":"element","qualifiedName":"angular/angular-animate.CssAnimation.element","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-dom-html.Element","inner":[]}],"annotations":[]},"addAtStart":{"name":"addAtStart","qualifiedName":"angular/angular-animate.CssAnimation.addAtStart","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"addAtEnd":{"name":"addAtEnd","qualifiedName":"angular/angular-animate.CssAnimation.addAtEnd","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"removeAtStart":{"name":"removeAtStart","qualifiedName":"angular/angular-animate.CssAnimation.removeAtStart","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"removeAtEnd":{"name":"removeAtEnd","qualifiedName":"angular/angular-animate.CssAnimation.removeAtEnd","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"eventClass":{"name":"eventClass","qualifiedName":"angular/angular-animate.CssAnimation.eventClass","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"activeClass":{"name":"activeClass","qualifiedName":"angular/angular-animate.CssAnimation.activeClass","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"EXTRA_DURATION":{"name":"EXTRA_DURATION","qualifiedName":"angular/angular-animate.CssAnimation.EXTRA_DURATION","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"onCompleted":{"name":"onCompleted","qualifiedName":"angular/angular-animate.CssAnimation.onCompleted","comment":"<p>Executed once when the animation is completed with the type of completion\nresult.</p>","commentFrom":"angular.Animation.onCompleted","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"angular-core-dom.AnimationResult","inner":[]}]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"angular/angular-animate.CssAnimation.CssAnimation-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"eventClass":{"name":"eventClass","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"activeClass":{"name":"activeClass","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"addAtStart":{"name":"addAtStart","optional":true,"named":true,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"removeAtStart":{"name":"removeAtStart","optional":true,"named":true,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"addAtEnd":{"name":"addAtEnd","optional":true,"named":true,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"removeAtEnd":{"name":"removeAtEnd","optional":true,"named":true,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"animationMap":{"name":"animationMap","optional":true,"named":true,"default":false,"type":[{"outer":"angular/angular-animate.CssAnimationMap","inner":[]}],"value":"null","annotations":[]},"optimizer":{"name":"optimizer","optional":true,"named":true,"default":false,"type":[{"outer":"angular/angular-animate.AnimationOptimizer","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"operators":{},"methods":{"read":{"name":"read","qualifiedName":"angular/angular-animate.CssAnimation.read","comment":"<p>This is used to batch dom read operations to prevent excessive\nrecalculations when dom is modified.</p>\n<p><a>angular/angular-animate.CssAnimation.read.timeInMs</a> is the time since the last animation frame.</p>","commentFrom":"angular-animate.LoopedAnimation.read","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"timeInMs":{"name":"timeInMs","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"update":{"name":"update","qualifiedName":"angular/angular-animate.CssAnimation.update","comment":"<p>Occurs every animation frame. Return false to stop receiving animation\nframe updates. Detach will be called after <a>angular/angular-animate.CssAnimation.update</a> returns false.</p>\n<p><a>angular/angular-animate.CssAnimation.update.timeInMs</a> is the time since the last animation frame.</p>","commentFrom":"angular-animate.LoopedAnimation.update","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"timeInMs":{"name":"timeInMs","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"cancel":{"name":"cancel","qualifiedName":"angular/angular-animate.CssAnimation.cancel","comment":"<p>Stop and cancel the animation immediately. This has no effect if the\nanimation has already completed.</p>\n<p>The onCompleted future will be executed if the animation has not been\ncompleted.</p>","commentFrom":"angular.Animation.cancel","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"complete":{"name":"complete","qualifiedName":"angular/angular-animate.CssAnimation.complete","comment":"<p>Stop and complete the animation immediately. This has no effect if the\nanimation has already completed.</p>\n<p>The onCompleted future will be executed if the animation has not been\ncompleted.</p>","commentFrom":"angular.Animation.complete","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"angular/angular-animate.CssAnimation.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>angular/angular-animate.CssAnimation.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"angular/angular-animate.CssAnimation.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"onCompleted":{"name":"onCompleted","qualifiedName":"angular/angular-animate.CssAnimation.onCompleted","comment":"<p>Executed once when the animation is completed with the type of completion\nresult.</p>","commentFrom":"","inheritedFrom":"angular-animate.Animation.onCompleted","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"angular-core-dom.AnimationResult","inner":[]}]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"angular/angular-animate.CssAnimation.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>angular/angular-animate.CssAnimation.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>angular/angular-animate.CssAnimation.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"angular/angular-animate.CssAnimation.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"angular/angular-animate.CssAnimation.noSuchMethod","comment":"<p><a>angular/angular-animate.CssAnimation.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>angular/angular-animate.CssAnimation.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>angular/angular-animate.CssAnimation.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>angular/angular-animate.CssAnimation.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"complete":{"name":"complete","qualifiedName":"angular/angular-animate.CssAnimation.complete","comment":"<p>Stop and complete the animation immediately. This has no effect if the\nanimation has already completed.</p>\n<p>The onCompleted future will be executed if the animation has not been\ncompleted.</p>","commentFrom":"","inheritedFrom":"angular-animate.Animation.complete","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"cancel":{"name":"cancel","qualifiedName":"angular/angular-animate.CssAnimation.cancel","comment":"<p>Stop and cancel the animation immediately. This has no effect if the\nanimation has already completed.</p>\n<p>The onCompleted future will be executed if the animation has not been\ncompleted.</p>","commentFrom":"","inheritedFrom":"angular-animate.Animation.cancel","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"read":{"name":"read","qualifiedName":"angular/angular-animate.CssAnimation.read","comment":"<p>This is used to batch dom read operations to prevent excessive\nrecalculations when dom is modified.</p>\n<p><a>angular/angular-animate.CssAnimation.read.timeInMs</a> is the time since the last animation frame.</p>","commentFrom":"","inheritedFrom":"angular-animate.LoopedAnimation.read","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"timeInMs":{"name":"timeInMs","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"update":{"name":"update","qualifiedName":"angular/angular-animate.CssAnimation.update","comment":"<p>Occurs every animation frame. Return false to stop receiving animation\nframe updates. Detach will be called after <a>angular/angular-animate.CssAnimation.update</a> returns false.</p>\n<p><a>angular/angular-animate.CssAnimation.update.timeInMs</a> is the time since the last animation frame.</p>","commentFrom":"","inheritedFrom":"angular-animate.LoopedAnimation.update","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"timeInMs":{"name":"timeInMs","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}