{"name":"Window","qualifiedName":"angular/angular-mock.Window","comment":"<p>Top-level container for the current browser tab or window.</p>\n<p>In a web browser, each window has a <a>angular/angular-mock.Window</a> object, but within the context\nof a script, this object represents only the current window.\nEach other window, tab, and iframe has its own <a>angular/angular-mock.Window</a> object.</p>\n<p>Each window contains a <a>angular/angular-mock.Document</a> object, which contains all of the window's\ncontent.</p>\n<p>Use the top-level <code>window</code> object to access the current window.\nFor example:</p>\n<pre><code>// Draw a scene when the window repaints.\ndrawScene(num delta) {...}\nwindow.animationFrame.then(drawScene);.\n\n// Write to the console.\nwindow.console.log('Jinkies!');\nwindow.console.error('Jeepers!');\n</code></pre>\n<p><strong>Note:</strong> This class represents only the current window, while <a>angular/angular-mock.WindowBase</a>\nis a representation of any window, including other tabs, windows, and frames.</p>\n<h2>See also</h2><ul><li><a>angular/angular-mock.WindowBase</a></li></ul>\n<h2>Other resources</h2><ul><li><a href=\"https://developer.mozilla.org/en-US/docs/DOM/window\">DOM Window</a> from MDN.</li><li><a href=\"http://www.w3.org/TR/Window/\">Window</a> from the W3C.</li></ul>","isAbstract":false,"superclass":"angular/angular-mock.EventTarget","implements":["angular/angular-mock.WindowBase64","angular/angular-mock.GlobalEventHandlers","angular/angular-mock.WindowBase","angular/angular-mock.WindowEventHandlers"],"subclass":[],"variables":{"contentLoadedEvent":{"name":"contentLoadedEvent","qualifiedName":"angular/angular-mock.Window.contentLoadedEvent","comment":"<p>Static factory designed to expose <code>contentloaded</code> events to event\nhandlers that are not necessarily instances of <a>angular/angular-mock.Window</a>.</p>\n<p>See <a>angular/dart-dom-html.EventStreamProvider</a> for usage information.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-dom-html.EventStreamProvider","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.DOMContentLoadedEvent"]}]},"deviceMotionEvent":{"name":"deviceMotionEvent","qualifiedName":"angular/angular-mock.Window.deviceMotionEvent","comment":"<p>Static factory designed to expose <code>devicemotion</code> events to event\nhandlers that are not necessarily instances of <a>angular/angular-mock.Window</a>.</p>\n<p>See <a>angular/dart-dom-html.EventStreamProvider</a> for usage information.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-dom-html.EventStreamProvider","inner":[{"outer":"dart-dom-html.DeviceMotionEvent","inner":[]}]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.devicemotionEvent"]},{"name":"metadata.Experimental","parameters":[]}]},"deviceOrientationEvent":{"name":"deviceOrientationEvent","qualifiedName":"angular/angular-mock.Window.deviceOrientationEvent","comment":"<p>Static factory designed to expose <code>deviceorientation</code> events to event\nhandlers that are not necessarily instances of <a>angular/angular-mock.Window</a>.</p>\n<p>See <a>angular/dart-dom-html.EventStreamProvider</a> for usage information.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-dom-html.EventStreamProvider","inner":[{"outer":"dart-dom-html.DeviceOrientationEvent","inner":[]}]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.deviceorientationEvent"]},{"name":"metadata.Experimental","parameters":[]}]},"hashChangeEvent":{"name":"hashChangeEvent","qualifiedName":"angular/angular-mock.Window.hashChangeEvent","comment":"<p>Static factory designed to expose <code>hashchange</code> events to event\nhandlers that are not necessarily instances of <a>angular/angular-mock.Window</a>.</p>\n<p>See <a>angular/dart-dom-html.EventStreamProvider</a> for usage information.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-dom-html.EventStreamProvider","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.hashchangeEvent"]}]},"messageEvent":{"name":"messageEvent","qualifiedName":"angular/angular-mock.Window.messageEvent","comment":"<p>Static factory designed to expose <code>message</code> events to event\nhandlers that are not necessarily instances of <a>angular/angular-mock.Window</a>.</p>\n<p>See <a>angular/dart-dom-html.EventStreamProvider</a> for usage information.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-dom-html.EventStreamProvider","inner":[{"outer":"dart-dom-html.MessageEvent","inner":[]}]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.messageEvent"]}]},"offlineEvent":{"name":"offlineEvent","qualifiedName":"angular/angular-mock.Window.offlineEvent","comment":"<p>Static factory designed to expose <code>offline</code> events to event\nhandlers that are not necessarily instances of <a>angular/angular-mock.Window</a>.</p>\n<p>See <a>angular/dart-dom-html.EventStreamProvider</a> for usage information.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-dom-html.EventStreamProvider","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.offlineEvent"]}]},"onlineEvent":{"name":"onlineEvent","qualifiedName":"angular/angular-mock.Window.onlineEvent","comment":"<p>Static factory designed to expose <code>online</code> events to event\nhandlers that are not necessarily instances of <a>angular/angular-mock.Window</a>.</p>\n<p>See <a>angular/dart-dom-html.EventStreamProvider</a> for usage information.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-dom-html.EventStreamProvider","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.onlineEvent"]}]},"pageHideEvent":{"name":"pageHideEvent","qualifiedName":"angular/angular-mock.Window.pageHideEvent","comment":"<p>Static factory designed to expose <code>pagehide</code> events to event\nhandlers that are not necessarily instances of <a>angular/angular-mock.Window</a>.</p>\n<p>See <a>angular/dart-dom-html.EventStreamProvider</a> for usage information.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-dom-html.EventStreamProvider","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.pagehideEvent"]}]},"pageShowEvent":{"name":"pageShowEvent","qualifiedName":"angular/angular-mock.Window.pageShowEvent","comment":"<p>Static factory designed to expose <code>pageshow</code> events to event\nhandlers that are not necessarily instances of <a>angular/angular-mock.Window</a>.</p>\n<p>See <a>angular/dart-dom-html.EventStreamProvider</a> for usage information.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-dom-html.EventStreamProvider","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.pageshowEvent"]}]},"popStateEvent":{"name":"popStateEvent","qualifiedName":"angular/angular-mock.Window.popStateEvent","comment":"<p>Static factory designed to expose <code>popstate</code> events to event\nhandlers that are not necessarily instances of <a>angular/angular-mock.Window</a>.</p>\n<p>See <a>angular/dart-dom-html.EventStreamProvider</a> for usage information.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-dom-html.EventStreamProvider","inner":[{"outer":"dart-dom-html.PopStateEvent","inner":[]}]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.popstateEvent"]}]},"resizeEvent":{"name":"resizeEvent","qualifiedName":"angular/angular-mock.Window.resizeEvent","comment":"<p>Static factory designed to expose <code>resize</code> events to event\nhandlers that are not necessarily instances of <a>angular/angular-mock.Window</a>.</p>\n<p>See <a>angular/dart-dom-html.EventStreamProvider</a> for usage information.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-dom-html.EventStreamProvider","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.resizeEvent"]}]},"storageEvent":{"name":"storageEvent","qualifiedName":"angular/angular-mock.Window.storageEvent","comment":"<p>Static factory designed to expose <code>storage</code> events to event\nhandlers that are not necessarily instances of <a>angular/angular-mock.Window</a>.</p>\n<p>See <a>angular/dart-dom-html.EventStreamProvider</a> for usage information.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-dom-html.EventStreamProvider","inner":[{"outer":"dart-dom-html.StorageEvent","inner":[]}]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.storageEvent"]}]},"unloadEvent":{"name":"unloadEvent","qualifiedName":"angular/angular-mock.Window.unloadEvent","comment":"<p>Static factory designed to expose <code>unload</code> events to event\nhandlers that are not necessarily instances of <a>angular/angular-mock.Window</a>.</p>\n<p>See <a>angular/dart-dom-html.EventStreamProvider</a> for usage information.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-dom-html.EventStreamProvider","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.unloadEvent"]}]},"animationEndEvent":{"name":"animationEndEvent","qualifiedName":"angular/angular-mock.Window.animationEndEvent","comment":"<p>Static factory designed to expose <code>animationend</code> events to event\nhandlers that are not necessarily instances of <a>angular/angular-mock.Window</a>.</p>\n<p>See <a>angular/dart-dom-html.EventStreamProvider</a> for usage information.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-dom-html.EventStreamProvider","inner":[{"outer":"dart-dom-html.AnimationEvent","inner":[]}]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.webkitAnimationEndEvent"]},{"name":"metadata.SupportedBrowser","parameters":["Chrome"]},{"name":"metadata.SupportedBrowser","parameters":["Safari"]},{"name":"metadata.Experimental","parameters":[]}]},"animationIterationEvent":{"name":"animationIterationEvent","qualifiedName":"angular/angular-mock.Window.animationIterationEvent","comment":"<p>Static factory designed to expose <code>animationiteration</code> events to event\nhandlers that are not necessarily instances of <a>angular/angular-mock.Window</a>.</p>\n<p>See <a>angular/dart-dom-html.EventStreamProvider</a> for usage information.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-dom-html.EventStreamProvider","inner":[{"outer":"dart-dom-html.AnimationEvent","inner":[]}]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.webkitAnimationIterationEvent"]},{"name":"metadata.SupportedBrowser","parameters":["Chrome"]},{"name":"metadata.SupportedBrowser","parameters":["Safari"]},{"name":"metadata.Experimental","parameters":[]}]},"animationStartEvent":{"name":"animationStartEvent","qualifiedName":"angular/angular-mock.Window.animationStartEvent","comment":"<p>Static factory designed to expose <code>animationstart</code> events to event\nhandlers that are not necessarily instances of <a>angular/angular-mock.Window</a>.</p>\n<p>See <a>angular/dart-dom-html.EventStreamProvider</a> for usage information.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-dom-html.EventStreamProvider","inner":[{"outer":"dart-dom-html.AnimationEvent","inner":[]}]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.webkitAnimationStartEvent"]},{"name":"metadata.SupportedBrowser","parameters":["Chrome"]},{"name":"metadata.SupportedBrowser","parameters":["Safari"]},{"name":"metadata.Experimental","parameters":[]}]},"PERSISTENT":{"name":"PERSISTENT","qualifiedName":"angular/angular-mock.Window.PERSISTENT","comment":"<p>Indicates that file system data cannot be cleared unless given user\npermission.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://www.html5rocks.com/en/tutorials/file/filesystem/\">Exploring the FileSystem APIs</a> from HTML5Rocks.</p></li><li>\n<p><a href=\"http://www.w3.org/TR/file-system-api/#idl-def-LocalFileSystem\">File API</a> from W3C.</p></li></ul>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.PERSISTENT"]},{"name":"metadata.Experimental","parameters":[]}]},"TEMPORARY":{"name":"TEMPORARY","qualifiedName":"angular/angular-mock.Window.TEMPORARY","comment":"<p>Indicates that file system data can be cleared at any time.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://www.html5rocks.com/en/tutorials/file/filesystem/\">Exploring the FileSystem APIs</a> from HTML5Rocks.</p></li><li>\n<p><a href=\"http://www.w3.org/TR/file-system-api/#idl-def-LocalFileSystem\">File API</a> from W3C.</p></li></ul>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.TEMPORARY"]},{"name":"metadata.Experimental","parameters":[]}]},"css":{"name":"css","qualifiedName":"angular/angular-mock.Window.css","comment":"<p>Entrypoint for CSS-related functions.</p>\n<h2>Other resources</h2><ul><li><a href=\"http://dev.w3.org/csswg/css-conditional/#the-css-interface\">The CSS interface</a> from W3C.</li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-dom-html.Css","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.CSS"]}]},"applicationCache":{"name":"applicationCache","qualifiedName":"angular/angular-mock.Window.applicationCache","comment":"<p>The application cache for this window.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://www.html5rocks.com/en/tutorials/appcache/beginner\">A beginner's guide to using the application cache</a> from HTML5Rocks.</p></li><li>\n<p><a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/offline.html#application-cache-api\">Application cache API</a>\nfrom WHATWG.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-dom-html.ApplicationCache","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.applicationCache"]}]},"closed":{"name":"closed","qualifiedName":"angular/angular-mock.Window.closed","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.closed"]}]},"crypto":{"name":"crypto","qualifiedName":"angular/angular-mock.Window.crypto","comment":"<p>Entrypoint for the browser's cryptographic functions.</p>\n<h2>Other resources</h2><ul><li><a href=\"http://www.w3.org/TR/WebCryptoAPI/\">Web cryptography API</a> from W3C.</li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-dom-html.Crypto","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.crypto"]},{"name":"metadata.Experimental","parameters":[]}]},"defaultStatus":{"name":"defaultStatus","qualifiedName":"angular/angular-mock.Window.defaultStatus","comment":"<p><em>Deprecated</em>.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.defaultStatus"]},{"name":"metadata.Experimental","parameters":[]}]},"defaultstatus":{"name":"defaultstatus","qualifiedName":"angular/angular-mock.Window.defaultstatus","comment":"<p><em>Deprecated</em>.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.defaultstatus"]},{"name":"metadata.Experimental","parameters":[]}]},"devicePixelRatio":{"name":"devicePixelRatio","qualifiedName":"angular/angular-mock.Window.devicePixelRatio","comment":"<p>The ratio between physical pixels and logical CSS pixels.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://www.quirksmode.org/blog/archives/2012/06/devicepixelrati.html\">devicePixelRatio</a> from\nquirksmode.</p></li><li>\n<p><a href=\"http://www.quirksmode.org/blog/archives/2012/07/more_about_devi.html\">More about devicePixelRatio</a> from\nquirksmode.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.double","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.devicePixelRatio"]},{"name":"metadata.Experimental","parameters":[]}]},"history":{"name":"history","qualifiedName":"angular/angular-mock.Window.history","comment":"<p>The current session history for this window's newest document.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/browsers.html\">Loading web pages</a>\nfrom WHATWG.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"angular/angular-mock.History","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.history"]}]},"innerHeight":{"name":"innerHeight","qualifiedName":"angular/angular-mock.Window.innerHeight","comment":"<p>The height of the viewport including scrollbars.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://docs.webplatform.org/wiki/css/cssom/properties/innerHeight\">innerHeight</a> from\nWebPlatform.org.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.innerHeight"]}]},"innerWidth":{"name":"innerWidth","qualifiedName":"angular/angular-mock.Window.innerWidth","comment":"<p>The width of the viewport including scrollbars.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://docs.webplatform.org/wiki/css/cssom/properties/innerWidth\">innerWidth</a> from\nWebPlatform.org.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.innerWidth"]}]},"localStorage":{"name":"localStorage","qualifiedName":"angular/angular-mock.Window.localStorage","comment":"<p>Storage for this window that persists across sessions.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Storage\">DOM storage guide</a> from\nMDN.</p></li><li>\n<p><a href=\"http://diveintohtml5.info/storage.html\">The past, present &amp; future of local storage for web applications</a> from Dive Into HTML5.</p></li><li>\n<p><a href=\"http://www.w3.org/TR/webstorage/#the-localstorage-attribute\">Local storage specification</a> from W3C.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-dom-html.Storage","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.localStorage"]}]},"locationbar":{"name":"locationbar","qualifiedName":"angular/angular-mock.Window.locationbar","comment":"<p>This window's location bar, which displays the URL.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/browsers.html#browser-interface-elements\">Browser interface elements</a>\nfrom WHATWG.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-dom-html.BarProp","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.locationbar"]}]},"menubar":{"name":"menubar","qualifiedName":"angular/angular-mock.Window.menubar","comment":"<p>This window's menu bar, which displays menu commands.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/browsers.html#browser-interface-elements\">Browser interface elements</a>\nfrom WHATWG.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-dom-html.BarProp","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.menubar"]}]},"name":{"name":"name","qualifiedName":"angular/angular-mock.Window.name","comment":"<p>The name of this window.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://docs.webplatform.org/wiki/html/attributes/name_(window\">Window name</a>) from\nWebPlatform.org.</p></li></ul>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.name"]}]},"navigator":{"name":"navigator","qualifiedName":"angular/angular-mock.Window.navigator","comment":"<p>The user agent accessing this window.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#the-navigator-object\">The navigator object</a>\nfrom WHATWG.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-dom-html.Navigator","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.navigator"]}]},"offscreenBuffering":{"name":"offscreenBuffering","qualifiedName":"angular/angular-mock.Window.offscreenBuffering","comment":"<p>Whether objects are drawn offscreen before being displayed.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://docs.webplatform.org/wiki/dom/properties/offscreenBuffering\">offscreenBuffering</a> from\nWebPlatform.org.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.offscreenBuffering"]},{"name":"metadata.Experimental","parameters":[]}]},"outerHeight":{"name":"outerHeight","qualifiedName":"angular/angular-mock.Window.outerHeight","comment":"<p>The height of this window including all user interface elements.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://docs.webplatform.org/wiki/css/cssom/properties/outerHeight\">outerHeight</a> from\nWebPlatform.org.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.outerHeight"]}]},"outerWidth":{"name":"outerWidth","qualifiedName":"angular/angular-mock.Window.outerWidth","comment":"<p>The width of the window including all user interface elements.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://docs.webplatform.org/wiki/css/cssom/properties/outerWidth\">outerWidth</a> from\nWebPlatform.org.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.outerWidth"]}]},"pageXOffset":{"name":"pageXOffset","qualifiedName":"angular/angular-mock.Window.pageXOffset","comment":"<p>The distance this window has been scrolled horizontally.</p>\n<p>This attribute is an alias for <a>angular/angular-mock.Window.scrollX</a>.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://www.w3.org/TR/cssom-view/#screen\">The Screen interface specification</a> from W3C.</p></li><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window.scrollX\">scrollX and pageXOffset</a> from MDN.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.pageXOffset"]}]},"pageYOffset":{"name":"pageYOffset","qualifiedName":"angular/angular-mock.Window.pageYOffset","comment":"<p>The distance this window has been scrolled vertically.</p>\n<p>This attribute is an alias for <a>angular/angular-mock.Window.scrollY</a>.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://www.w3.org/TR/cssom-view/#screen\">The Screen interface specification</a> from W3C.</p></li><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window.scrollY\">scrollY and pageYOffset</a> from MDN.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.pageYOffset"]}]},"performance":{"name":"performance","qualifiedName":"angular/angular-mock.Window.performance","comment":"<p>Timing and navigation data for this window.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://www.html5rocks.com/en/tutorials/webperformance/basics/\">Measuring page load speed with navigation timeing</a> from\nHTML5Rocks.</p></li><li>\n<p><a href=\"http://www.w3.org/TR/navigation-timing/\">Navigation timing specification</a> from W3C.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-dom-html.Performance","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.performance"]},{"name":"metadata.SupportedBrowser","parameters":["Chrome"]},{"name":"metadata.SupportedBrowser","parameters":["Firefox"]},{"name":"metadata.SupportedBrowser","parameters":["Internet Explorer"]}]},"screen":{"name":"screen","qualifiedName":"angular/angular-mock.Window.screen","comment":"<p>Information about the screen displaying this window.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://www.w3.org/TR/cssom-view/#screen\">The Screen interface specification</a> from W3C.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-dom-html.Screen","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.screen"]}]},"screenLeft":{"name":"screenLeft","qualifiedName":"angular/angular-mock.Window.screenLeft","comment":"<p>The distance from the left side of the screen to the left side of this\nwindow.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://www.w3.org/TR/cssom-view/#screen\">The Screen interface specification</a> from W3C.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.screenLeft"]}]},"screenTop":{"name":"screenTop","qualifiedName":"angular/angular-mock.Window.screenTop","comment":"<p>The distance from the top of the screen to the top of this window.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://www.w3.org/TR/cssom-view/#screen\">The Screen interface specification</a> from W3C.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.screenTop"]}]},"screenX":{"name":"screenX","qualifiedName":"angular/angular-mock.Window.screenX","comment":"<p>The distance from the left side of the screen to the mouse pointer.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://www.w3.org/TR/cssom-view/#screen\">The Screen interface specification</a> from W3C.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.screenX"]}]},"screenY":{"name":"screenY","qualifiedName":"angular/angular-mock.Window.screenY","comment":"<p>The distance from the top of the screen to the mouse pointer.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://www.w3.org/TR/cssom-view/#screen\">The Screen interface specification</a> from W3C.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.screenY"]}]},"scrollbars":{"name":"scrollbars","qualifiedName":"angular/angular-mock.Window.scrollbars","comment":"<p>This window's scroll bars.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/browsers.html#browser-interface-elements\">Browser interface elements</a>\nfrom WHATWG.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-dom-html.BarProp","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.scrollbars"]}]},"sessionStorage":{"name":"sessionStorage","qualifiedName":"angular/angular-mock.Window.sessionStorage","comment":"<p>Storage for this window that is cleared when this session ends.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Storage\">DOM storage guide</a> from\nMDN.</p></li><li>\n<p><a href=\"http://diveintohtml5.info/storage.html\">The past, present &amp; future of local storage for web applications</a> from Dive Into HTML5.</p></li><li>\n<p><a href=\"http://www.w3.org/TR/webstorage/#dom-sessionstorage\">Local storage specification</a> from W3C.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-dom-html.Storage","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.sessionStorage"]}]},"speechSynthesis":{"name":"speechSynthesis","qualifiedName":"angular/angular-mock.Window.speechSynthesis","comment":"<p>Access to speech synthesis in the browser.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://dvcs.w3.org/hg/speech-api/raw-file/tip/speechapi.html#tts-section\">Web speech specification</a>\nfrom W3C.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-dom-html.SpeechSynthesis","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.speechSynthesis"]},{"name":"metadata.Experimental","parameters":[]}]},"status":{"name":"status","qualifiedName":"angular/angular-mock.Window.status","comment":"<p><em>Deprecated</em>.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.status"]}]},"statusbar":{"name":"statusbar","qualifiedName":"angular/angular-mock.Window.statusbar","comment":"<p>This window's status bar.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/browsers.html#browser-interface-elements\">Browser interface elements</a>\nfrom WHATWG.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-dom-html.BarProp","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.statusbar"]}]},"styleMedia":{"name":"styleMedia","qualifiedName":"angular/angular-mock.Window.styleMedia","comment":"<p>Access to CSS media queries.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.apple.com/library/safari/documentation/SafariDOMAdditions/Reference/StyleMedia/StyleMedia/StyleMedia.html\">StyleMedia class reference</a>\nfrom Safari Developer Library.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-dom-html.StyleMedia","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.styleMedia"]},{"name":"metadata.Experimental","parameters":[]}]},"toolbar":{"name":"toolbar","qualifiedName":"angular/angular-mock.Window.toolbar","comment":"<p>This window's tool bar.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/browsers.html#browser-interface-elements\">Browser interface elements</a>\nfrom WHATWG.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-dom-html.BarProp","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.toolbar"]}]},"beforeUnloadEvent":{"name":"beforeUnloadEvent","qualifiedName":"angular/angular-mock.Window.beforeUnloadEvent","comment":"<p>Static factory designed to expose <code>beforeunload</code> events to event\nhandlers that are not necessarily instances of <a>angular/angular-mock.Window</a>.</p>\n<p>See <a>angular/dart-dom-html.EventStreamProvider</a> for usage information.</p>","final":false,"static":true,"constant":true,"type":[{"outer":"dart-dom-html.EventStreamProvider","inner":[{"outer":"dart-dom-html.BeforeUnloadEvent","inner":[]}]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.beforeunloadEvent"]}]}},"inheritedVariables":{},"methods":{"setters":{"location=":{"name":"location=","qualifiedName":"angular/angular-mock.Window.location=","comment":"<p>Sets the window's location, which causes the browser to navigate to the new\nlocation. <a>angular/angular-mock.Window.location=.value</a> may be a Location object or a string.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"opener=":{"name":"opener=","qualifiedName":"angular/angular-mock.Window.opener=","comment":"","commentFrom":"angular-mock.Window.opener=","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"angular/angular-mock.Window","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"getters":{"animationFrame":{"name":"animationFrame","qualifiedName":"angular/angular-mock.Window.animationFrame","comment":"<p>Returns a Future that completes just before the window is about to\nrepaint so the user can draw an animation frame.</p>\n<p>If you need to later cancel this animation, use <a>angular/angular-mock.Window.requestAnimationFrame</a>\ninstead.</p>\n<p>The <a>angular/dart-async.Future</a> completes to a timestamp that represents a floating\npoint value of the number of milliseconds that have elapsed since the page\nstarted to load (which is also the timestamp at this call to\nanimationFrame).</p>\n<p>Note: The code that runs when the future completes should call\n<a>angular/angular-mock.Window.animationFrame</a> again for the animation to continue.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.num","inner":[]}]}],"parameters":{},"annotations":[]},"document":{"name":"document","qualifiedName":"angular/angular-mock.Window.document","comment":"<p>The newest document in this window.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/browsers.html\">Loading web pages</a>\nfrom WHATWG.</p></li></ul>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular/angular-mock.Document","inner":[]}],"parameters":{},"annotations":[]},"location":{"name":"location","qualifiedName":"angular/angular-mock.Window.location","comment":"<p>The current location of this window.</p>\n<pre><code>Location currentLocation = window.location;\nprint(currentLocation.href); // 'http://www.example.com:80/'\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular/angular-mock.Location","inner":[]}],"parameters":{},"annotations":[]},"indexedDB":{"name":"indexedDB","qualifiedName":"angular/angular-mock.Window.indexedDB","comment":"<p>Gets an instance of the Indexed DB factory to being using Indexed DB.</p>\n<p>Use <a>angular/dart-dom-indexed_db.IdbFactory.supported</a> to check if Indexed DB is supported on the\ncurrent platform.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-indexed_db.IdbFactory","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.SupportedBrowser","parameters":["Chrome","23.0"]},{"name":"metadata.SupportedBrowser","parameters":["Firefox","15.0"]},{"name":"metadata.SupportedBrowser","parameters":["Internet Explorer","10.0"]},{"name":"metadata.Experimental","parameters":[]}]},"console":{"name":"console","qualifiedName":"angular/angular-mock.Window.console","comment":"<p>The debugging console for this window.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.Console","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.console"]}]},"supportsPointConversions":{"name":"supportsPointConversions","qualifiedName":"angular/angular-mock.Window.supportsPointConversions","comment":"<p>Checks whether <a>angular/angular-mock.Window.convertPointFromNodeToPage</a> and\n<a>angular/angular-mock.Window.convertPointFromPageToNode</a> are supported on the current platform.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"opener":{"name":"opener","qualifiedName":"angular/angular-mock.Window.opener","comment":"<p>A reference to the window that opened this one.</p>\n<pre><code>Window thisWindow = window;\nWindowBase otherWindow = thisWindow.open('http://www.example.com/', 'foo');\nprint(otherWindow.opener == thisWindow); // 'true'\n</code></pre>","commentFrom":"angular-mock.WindowBase.opener","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular/angular-mock.WindowBase","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.opener"]}]},"parent":{"name":"parent","qualifiedName":"angular/angular-mock.Window.parent","comment":"<p>A reference to the parent of this window.</p>\n<p>If this <a>angular/angular-mock.WindowBase</a> has no parent, <a>angular/angular-mock.Window.parent</a> will return a reference to\nthe <a>angular/angular-mock.WindowBase</a> itself.</p>\n<pre><code>IFrameElement myIFrame = new IFrameElement();\nwindow.document.body.elements.add(myIFrame);\nprint(myIframe.contentWindow.parent == window) // 'true'\n\nprint(window.parent == window) // 'true'\n</code></pre>","commentFrom":"angular-mock.WindowBase.parent","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular/angular-mock.WindowBase","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.parent"]}]},"self":{"name":"self","qualifiedName":"angular/angular-mock.Window.self","comment":"<p>The current window.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window.self\">Window.self</a> from MDN.</p></li></ul>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular/angular-mock.WindowBase","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.self"]}]},"top":{"name":"top","qualifiedName":"angular/angular-mock.Window.top","comment":"<p>A reference to the topmost window in the window hierarchy.</p>\n<p>If this <a>angular/angular-mock.WindowBase</a> is the topmost <a>angular/angular-mock.WindowBase</a>, <a>angular/angular-mock.Window.top</a> will return a\nreference to the <a>angular/angular-mock.WindowBase</a> itself.</p>\n<pre><code>// Add an IFrame to the current window.\nIFrameElement myIFrame = new IFrameElement();\nwindow.document.body.elements.add(myIFrame);\n\n// Add an IFrame inside of the other IFrame.\nIFrameElement innerIFrame = new IFrameElement();\nmyIFrame.elements.add(innerIFrame);\n\nprint(myIframe.contentWindow.top == window) // 'true'\nprint(innerIFrame.contentWindow.top == window) // 'true'\n\nprint(window.top == window) // 'true'\n</code></pre>","commentFrom":"angular-mock.WindowBase.top","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular/angular-mock.WindowBase","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.top"]}]},"window":{"name":"window","qualifiedName":"angular/angular-mock.Window.window","comment":"<p>The current window.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window.window\">Window.window</a> from MDN.</p></li></ul>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular/angular-mock.WindowBase","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.window"]}]},"onContentLoaded":{"name":"onContentLoaded","qualifiedName":"angular/angular-mock.Window.onContentLoaded","comment":"<p>Stream of <code>contentloaded</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onDOMContentLoaded"]}]},"onAbort":{"name":"onAbort","qualifiedName":"angular/angular-mock.Window.onAbort","comment":"<p>Stream of <code>abort</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onabort"]}]},"onBlur":{"name":"onBlur","qualifiedName":"angular/angular-mock.Window.onBlur","comment":"<p>Stream of <code>blur</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onblur"]}]},"onChange":{"name":"onChange","qualifiedName":"angular/angular-mock.Window.onChange","comment":"<p>Stream of <code>change</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onchange"]}]},"onClick":{"name":"onClick","qualifiedName":"angular/angular-mock.Window.onClick","comment":"<p>Stream of <code>click</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onclick"]}]},"onContextMenu":{"name":"onContextMenu","qualifiedName":"angular/angular-mock.Window.onContextMenu","comment":"<p>Stream of <code>contextmenu</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.oncontextmenu"]}]},"onDoubleClick":{"name":"onDoubleClick","qualifiedName":"angular/angular-mock.Window.onDoubleClick","comment":"<p>Stream of <code>doubleclick</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.ondblclick"]}]},"onDeviceMotion":{"name":"onDeviceMotion","qualifiedName":"angular/angular-mock.Window.onDeviceMotion","comment":"<p>Stream of <code>devicemotion</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.DeviceMotionEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.ondevicemotion"]},{"name":"metadata.Experimental","parameters":[]}]},"onDeviceOrientation":{"name":"onDeviceOrientation","qualifiedName":"angular/angular-mock.Window.onDeviceOrientation","comment":"<p>Stream of <code>deviceorientation</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.DeviceOrientationEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.ondeviceorientation"]},{"name":"metadata.Experimental","parameters":[]}]},"onDrag":{"name":"onDrag","qualifiedName":"angular/angular-mock.Window.onDrag","comment":"<p>Stream of <code>drag</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.ondrag"]}]},"onDragEnd":{"name":"onDragEnd","qualifiedName":"angular/angular-mock.Window.onDragEnd","comment":"<p>Stream of <code>dragend</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.ondragend"]}]},"onDragEnter":{"name":"onDragEnter","qualifiedName":"angular/angular-mock.Window.onDragEnter","comment":"<p>Stream of <code>dragenter</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.ondragenter"]}]},"onDragLeave":{"name":"onDragLeave","qualifiedName":"angular/angular-mock.Window.onDragLeave","comment":"<p>Stream of <code>dragleave</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.ondragleave"]}]},"onDragOver":{"name":"onDragOver","qualifiedName":"angular/angular-mock.Window.onDragOver","comment":"<p>Stream of <code>dragover</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.ondragover"]}]},"onDragStart":{"name":"onDragStart","qualifiedName":"angular/angular-mock.Window.onDragStart","comment":"<p>Stream of <code>dragstart</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.ondragstart"]}]},"onDrop":{"name":"onDrop","qualifiedName":"angular/angular-mock.Window.onDrop","comment":"<p>Stream of <code>drop</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.ondrop"]}]},"onError":{"name":"onError","qualifiedName":"angular/angular-mock.Window.onError","comment":"<p>Stream of <code>error</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onerror"]}]},"onFocus":{"name":"onFocus","qualifiedName":"angular/angular-mock.Window.onFocus","comment":"<p>Stream of <code>focus</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onfocus"]}]},"onHashChange":{"name":"onHashChange","qualifiedName":"angular/angular-mock.Window.onHashChange","comment":"<p>Stream of <code>hashchange</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onhashchange"]}]},"onInput":{"name":"onInput","qualifiedName":"angular/angular-mock.Window.onInput","comment":"<p>Stream of <code>input</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.oninput"]}]},"onInvalid":{"name":"onInvalid","qualifiedName":"angular/angular-mock.Window.onInvalid","comment":"<p>Stream of <code>invalid</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.oninvalid"]}]},"onKeyDown":{"name":"onKeyDown","qualifiedName":"angular/angular-mock.Window.onKeyDown","comment":"<p>Stream of <code>keydown</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.KeyboardEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onkeydown"]}]},"onKeyPress":{"name":"onKeyPress","qualifiedName":"angular/angular-mock.Window.onKeyPress","comment":"<p>Stream of <code>keypress</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.KeyboardEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onkeypress"]}]},"onKeyUp":{"name":"onKeyUp","qualifiedName":"angular/angular-mock.Window.onKeyUp","comment":"<p>Stream of <code>keyup</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.KeyboardEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onkeyup"]}]},"onLoad":{"name":"onLoad","qualifiedName":"angular/angular-mock.Window.onLoad","comment":"<p>Stream of <code>load</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onload"]}]},"onMessage":{"name":"onMessage","qualifiedName":"angular/angular-mock.Window.onMessage","comment":"<p>Stream of <code>message</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MessageEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onmessage"]}]},"onMouseDown":{"name":"onMouseDown","qualifiedName":"angular/angular-mock.Window.onMouseDown","comment":"<p>Stream of <code>mousedown</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onmousedown"]}]},"onMouseEnter":{"name":"onMouseEnter","qualifiedName":"angular/angular-mock.Window.onMouseEnter","comment":"<p>Stream of <code>mouseenter</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onmouseenter"]},{"name":"metadata.Experimental","parameters":[]}]},"onMouseLeave":{"name":"onMouseLeave","qualifiedName":"angular/angular-mock.Window.onMouseLeave","comment":"<p>Stream of <code>mouseleave</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onmouseleave"]},{"name":"metadata.Experimental","parameters":[]}]},"onMouseMove":{"name":"onMouseMove","qualifiedName":"angular/angular-mock.Window.onMouseMove","comment":"<p>Stream of <code>mousemove</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onmousemove"]}]},"onMouseOut":{"name":"onMouseOut","qualifiedName":"angular/angular-mock.Window.onMouseOut","comment":"<p>Stream of <code>mouseout</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onmouseout"]}]},"onMouseOver":{"name":"onMouseOver","qualifiedName":"angular/angular-mock.Window.onMouseOver","comment":"<p>Stream of <code>mouseover</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onmouseover"]}]},"onMouseUp":{"name":"onMouseUp","qualifiedName":"angular/angular-mock.Window.onMouseUp","comment":"<p>Stream of <code>mouseup</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onmouseup"]}]},"onMouseWheel":{"name":"onMouseWheel","qualifiedName":"angular/angular-mock.Window.onMouseWheel","comment":"<p>Stream of <code>mousewheel</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.WheelEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onmousewheel"]}]},"onOffline":{"name":"onOffline","qualifiedName":"angular/angular-mock.Window.onOffline","comment":"<p>Stream of <code>offline</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onoffline"]}]},"onOnline":{"name":"onOnline","qualifiedName":"angular/angular-mock.Window.onOnline","comment":"<p>Stream of <code>online</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.ononline"]}]},"onPageHide":{"name":"onPageHide","qualifiedName":"angular/angular-mock.Window.onPageHide","comment":"<p>Stream of <code>pagehide</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onpagehide"]}]},"onPageShow":{"name":"onPageShow","qualifiedName":"angular/angular-mock.Window.onPageShow","comment":"<p>Stream of <code>pageshow</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onpageshow"]}]},"onPopState":{"name":"onPopState","qualifiedName":"angular/angular-mock.Window.onPopState","comment":"<p>Stream of <code>popstate</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.PopStateEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onpopstate"]}]},"onReset":{"name":"onReset","qualifiedName":"angular/angular-mock.Window.onReset","comment":"<p>Stream of <code>reset</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onreset"]}]},"onResize":{"name":"onResize","qualifiedName":"angular/angular-mock.Window.onResize","comment":"<p>Stream of <code>resize</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onresize"]}]},"onScroll":{"name":"onScroll","qualifiedName":"angular/angular-mock.Window.onScroll","comment":"<p>Stream of <code>scroll</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onscroll"]}]},"onSearch":{"name":"onSearch","qualifiedName":"angular/angular-mock.Window.onSearch","comment":"<p>Stream of <code>search</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onsearch"]},{"name":"metadata.Experimental","parameters":[]}]},"onSelect":{"name":"onSelect","qualifiedName":"angular/angular-mock.Window.onSelect","comment":"<p>Stream of <code>select</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onselect"]}]},"onStorage":{"name":"onStorage","qualifiedName":"angular/angular-mock.Window.onStorage","comment":"<p>Stream of <code>storage</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.StorageEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onstorage"]}]},"onSubmit":{"name":"onSubmit","qualifiedName":"angular/angular-mock.Window.onSubmit","comment":"<p>Stream of <code>submit</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onsubmit"]}]},"onTouchCancel":{"name":"onTouchCancel","qualifiedName":"angular/angular-mock.Window.onTouchCancel","comment":"<p>Stream of <code>touchcancel</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.TouchEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.ontouchcancel"]},{"name":"metadata.Experimental","parameters":[]}]},"onTouchEnd":{"name":"onTouchEnd","qualifiedName":"angular/angular-mock.Window.onTouchEnd","comment":"<p>Stream of <code>touchend</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.TouchEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.ontouchend"]},{"name":"metadata.Experimental","parameters":[]}]},"onTouchMove":{"name":"onTouchMove","qualifiedName":"angular/angular-mock.Window.onTouchMove","comment":"<p>Stream of <code>touchmove</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.TouchEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.ontouchmove"]},{"name":"metadata.Experimental","parameters":[]}]},"onTouchStart":{"name":"onTouchStart","qualifiedName":"angular/angular-mock.Window.onTouchStart","comment":"<p>Stream of <code>touchstart</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.TouchEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.ontouchstart"]},{"name":"metadata.Experimental","parameters":[]}]},"onTransitionEnd":{"name":"onTransitionEnd","qualifiedName":"angular/angular-mock.Window.onTransitionEnd","comment":"<p>Stream of <code>transitionend</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.TransitionEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.ontransitionend"]}]},"onUnload":{"name":"onUnload","qualifiedName":"angular/angular-mock.Window.onUnload","comment":"<p>Stream of <code>unload</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onunload"]}]},"onAnimationEnd":{"name":"onAnimationEnd","qualifiedName":"angular/angular-mock.Window.onAnimationEnd","comment":"<p>Stream of <code>animationend</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.AnimationEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onwebkitAnimationEnd"]},{"name":"metadata.Experimental","parameters":[]}]},"onAnimationIteration":{"name":"onAnimationIteration","qualifiedName":"angular/angular-mock.Window.onAnimationIteration","comment":"<p>Stream of <code>animationiteration</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.AnimationEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onwebkitAnimationIteration"]},{"name":"metadata.Experimental","parameters":[]}]},"onAnimationStart":{"name":"onAnimationStart","qualifiedName":"angular/angular-mock.Window.onAnimationStart","comment":"<p>Stream of <code>animationstart</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.AnimationEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onwebkitAnimationStart"]},{"name":"metadata.Experimental","parameters":[]}]},"onBeforeUnload":{"name":"onBeforeUnload","qualifiedName":"angular/angular-mock.Window.onBeforeUnload","comment":"<p>Stream of <code>beforeunload</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onbeforeunload"]}]},"scrollX":{"name":"scrollX","qualifiedName":"angular/angular-mock.Window.scrollX","comment":"<p>The distance this window has been scrolled horizontally.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://www.w3.org/TR/cssom-view/#screen\">The Screen interface specification</a> from W3C.</p></li><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window.scrollX\">scrollX</a> from MDN.</p></li></ul>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"scrollY":{"name":"scrollY","qualifiedName":"angular/angular-mock.Window.scrollY","comment":"<p>The distance this window has been scrolled vertically.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://www.w3.org/TR/cssom-view/#screen\">The Screen interface specification</a> from W3C.</p></li><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window.scrollY\">scrollY</a> from MDN.</p></li></ul>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{},"methods":{"open":{"name":"open","qualifiedName":"angular/angular-mock.Window.open","comment":"<p>Opens a new window.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window.open\">Window.open</a> from MDN.</p></li><li>\n<p><a href=\"http://docs.webplatform.org/wiki/dom/methods/open\">Window open</a> from WebPlatform.org.</p></li></ul>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular/angular-mock.WindowBase","inner":[]}],"parameters":{"url":{"name":"url","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"options":{"name":"options","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"requestAnimationFrame":{"name":"requestAnimationFrame","qualifiedName":"angular/angular-mock.Window.requestAnimationFrame","comment":"<p>Called to draw an animation frame and then request the window to repaint\nafter <a>angular/angular-mock.Window.requestAnimationFrame.callback</a> has finished (creating the animation).</p>\n<p>Use this method only if you need to later call <a>angular/angular-mock.Window.cancelAnimationFrame</a>. If\nnot, the preferred Dart idiom is to set animation frames by calling\n<a>angular/angular-mock.Window.animationFrame</a>, which returns a Future.</p>\n<p>Returns a non-zero valued integer to represent the request id for this\nrequest. This value only needs to be saved if you intend to call\n<a>angular/angular-mock.Window.cancelAnimationFrame</a> so you can specify the particular animation to\ncancel.</p>\n<p>Note: The supplied <a>angular/angular-mock.Window.requestAnimationFrame.callback</a> needs to call <a>angular/angular-mock.Window.requestAnimationFrame</a> again\nfor the animation to continue.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"callback":{"name":"callback","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.RequestAnimationFrameCallback","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Window.requestAnimationFrame"]}]},"cancelAnimationFrame":{"name":"cancelAnimationFrame","qualifiedName":"angular/angular-mock.Window.cancelAnimationFrame","comment":"<p>Cancels an animation frame request.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window.cancelAnimationFrame\">Window.cancelAnimationFrame</a> from MDN.</p></li></ul>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"id":{"name":"id","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"requestFileSystem":{"name":"requestFileSystem","qualifiedName":"angular/angular-mock.Window.requestFileSystem","comment":"<p>Access a sandboxed file system of the specified <code>size</code>. If <code>persistent</code> is\ntrue, the application will request permission from the user to create\nlasting storage. This storage cannot be freed without the user's\npermission. Returns a <a>angular/dart-async.Future</a> whose value stores a reference to the\nsandboxed file system for use. Because the file system is sandboxed,\napplications cannot access file systems created in other web pages.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-dom-html.FileSystem","inner":[]}]}],"parameters":{"size":{"name":"size","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]},"persistent":{"name":"persistent","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]}},"annotations":[]},"convertPointFromNodeToPage":{"name":"convertPointFromNodeToPage","qualifiedName":"angular/angular-mock.Window.convertPointFromNodeToPage","comment":"<p>Converts a point from node coordinates to this window's coordinates.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.apple.com/library/safari/documentation/DataManagement/Reference/DOMWindowAdditionsReference/DOMWindowAdditions/DOMWindowAdditions.html#//apple_ref/javascript/instm/DOMWindow/webkitConvertPointFromNodeToPage\">webkitConvertPointFromPageToNode</a>\nfrom Safari Development Library.</p></li></ul>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-math.Point","inner":[]}],"parameters":{"node":{"name":"node","optional":false,"named":false,"default":false,"type":[{"outer":"angular/angular-mock.Node","inner":[]}],"value":"null","annotations":[]},"point":{"name":"point","optional":false,"named":false,"default":false,"type":[{"outer":"dart-math.Point","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Window.convertPointFromNodeToPage"]},{"name":"metadata.SupportedBrowser","parameters":["Chrome"]},{"name":"metadata.SupportedBrowser","parameters":["Safari"]},{"name":"metadata.Experimental","parameters":[]}]},"convertPointFromPageToNode":{"name":"convertPointFromPageToNode","qualifiedName":"angular/angular-mock.Window.convertPointFromPageToNode","comment":"<p>Converts a point from this window's coordinates to node coordinates.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.apple.com/library/safari/documentation/DataManagement/Reference/DOMWindowAdditionsReference/DOMWindowAdditions/DOMWindowAdditions.html#//apple_ref/javascript/instm/DOMWindow/webkitConvertPointFromPageToNode\">webkitConvertPointFromPageToNode</a>\nfrom Safari Development Library.</p></li></ul>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-math.Point","inner":[]}],"parameters":{"node":{"name":"node","optional":false,"named":false,"default":false,"type":[{"outer":"angular/angular-mock.Node","inner":[]}],"value":"null","annotations":[]},"point":{"name":"point","optional":false,"named":false,"default":false,"type":[{"outer":"dart-math.Point","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Window.convertPointFromPageToNode"]},{"name":"metadata.SupportedBrowser","parameters":["Chrome"]},{"name":"metadata.SupportedBrowser","parameters":["Safari"]},{"name":"metadata.Experimental","parameters":[]}]},"alert":{"name":"alert","qualifiedName":"angular/angular-mock.Window.alert","comment":"<p>Displays a modal alert to the user.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#user-prompts\">User prompts</a>\nfrom WHATWG.</p></li></ul>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"message":{"name":"message","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Window.alert"]}]},"close":{"name":"close","qualifiedName":"angular/angular-mock.Window.close","comment":"<p>Closes the window.</p>\n<p>This method should only succeed if the <a>angular/angular-mock.WindowBase</a> object is\n<strong>script-closeable</strong> and the window calling <a>angular/angular-mock.Window.close</a> is allowed to navigate\nthe window.</p>\n<p>A window is script-closeable if it is either a window\nthat was opened by another window, or if it is a window with only one\ndocument in its history.</p>\n<p>A window might not be allowed to navigate, and therefore close, another\nwindow due to browser security features.</p>\n<pre><code>var other = window.open('http://www.example.com', 'foo');\n// Closes other window, as it is script-closeable.\nother.close();\nprint(other.closed()); // 'true'\n\nwindow.location('http://www.mysite.com', 'foo');\n// Does not close this window, as the history has changed.\nwindow.close();\nprint(window.closed()); // 'false'\n</code></pre>\n<p>See also:</p><ul><li><a href=\"http://www.w3.org/TR/html5/browsers.html#dom-window-close\">Window close discussion</a> from the W3C</li></ul>","commentFrom":"angular-mock.WindowBase.close","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.close"]}]},"confirm":{"name":"confirm","qualifiedName":"angular/angular-mock.Window.confirm","comment":"<p>Displays a modal OK/Cancel prompt to the user.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#user-prompts\">User prompts</a>\nfrom WHATWG.</p></li></ul>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"message":{"name":"message","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Window.confirm"]}]},"find":{"name":"find","qualifiedName":"angular/angular-mock.Window.find","comment":"<p>Finds text in this window.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window.find\">Window.find</a> from MDN.</p></li></ul>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"string":{"name":"string","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"caseSensitive":{"name":"caseSensitive","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"null","annotations":[]},"backwards":{"name":"backwards","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"null","annotations":[]},"wrap":{"name":"wrap","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"null","annotations":[]},"wholeWord":{"name":"wholeWord","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"null","annotations":[]},"searchInFrames":{"name":"searchInFrames","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"null","annotations":[]},"showDialog":{"name":"showDialog","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Window.find"]},{"name":"metadata.Experimental","parameters":[]}]},"getMatchedCssRules":{"name":"getMatchedCssRules","qualifiedName":"angular/angular-mock.Window.getMatchedCssRules","comment":"<p>Returns all CSS rules that apply to the element's pseudo-element.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-dom-html.CssRule","inner":[]}]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Element","inner":[]}],"value":"null","annotations":[]},"pseudoElement":{"name":"pseudoElement","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Window.getMatchedCSSRules"]},{"name":"metadata.Experimental","parameters":[]}]},"getSelection":{"name":"getSelection","qualifiedName":"angular/angular-mock.Window.getSelection","comment":"<p>Returns the currently selected text.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window.getSelection\">Window.getSelection</a>\nfrom MDN.</p></li></ul>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.Selection","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.getSelection"]}]},"matchMedia":{"name":"matchMedia","qualifiedName":"angular/angular-mock.Window.matchMedia","comment":"<p>Returns a list of media queries for the given query string.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Testing_media_queries\">Testing media queries</a>\nfrom MDN.</p></li><li>\n<p><a href=\"http://www.w3.org/TR/cssom-view/#the-mediaquerylist-interface\">The MediaQueryList specification</a> from W3C.</p></li></ul>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.MediaQueryList","inner":[]}],"parameters":{"query":{"name":"query","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Window.matchMedia"]}]},"moveBy":{"name":"moveBy","qualifiedName":"angular/angular-mock.Window.moveBy","comment":"<p>Moves this window.</p>\n<p>x and y can be negative.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window.moveBy\">Window.moveBy</a> from MDN.</p></li><li>\n<p><a href=\"http://dev.w3.org/csswg/cssom-view/#dom-window-moveby\">Window.moveBy</a> from W3C.</p></li></ul>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"x":{"name":"x","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"y":{"name":"y","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Window.moveBy"]}]},"openDatabase":{"name":"openDatabase","qualifiedName":"angular/angular-mock.Window.openDatabase","comment":"<p><em>Deprecated.</em></p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-web_sql.SqlDatabase","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"version":{"name":"version","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"displayName":{"name":"displayName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"estimatedSize":{"name":"estimatedSize","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]},"creationCallback":{"name":"creationCallback","optional":true,"named":false,"default":false,"type":[{"outer":"dart-dom-html.DatabaseCallback","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Window.openDatabase"]},{"name":"metadata.SupportedBrowser","parameters":["Chrome"]},{"name":"metadata.SupportedBrowser","parameters":["Safari"]},{"name":"metadata.Experimental","parameters":[]},{"name":"metadata.Experimental","parameters":[]}]},"postMessage":{"name":"postMessage","qualifiedName":"angular/angular-mock.Window.postMessage","comment":"<p>Sends a cross-origin message.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window.postMessage\">window.postMessage</a> from\nMDN.</p></li><li>\n<p><a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/web-messaging.html\">Cross-document messaging</a>\nfrom WHATWG.</p></li></ul>","commentFrom":"angular-mock.WindowBase.postMessage","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"message":{"name":"message","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"targetOrigin":{"name":"targetOrigin","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"messagePorts":{"name":"messagePorts","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Window.postMessage"]}]},"print":{"name":"print","qualifiedName":"angular/angular-mock.Window.print","comment":"<p>Opens the print dialog for this window.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window.print\">Window.print</a> from MDN.</p></li></ul>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.print"]}]},"resizeBy":{"name":"resizeBy","qualifiedName":"angular/angular-mock.Window.resizeBy","comment":"<p>Resizes this window by an offset.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://docs.webplatform.org/wiki/dom/methods/resizeBy\">Window resizeBy</a>\nfrom WebPlatform.org.</p></li></ul>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"x":{"name":"x","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"y":{"name":"y","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Window.resizeBy"]}]},"resizeTo":{"name":"resizeTo","qualifiedName":"angular/angular-mock.Window.resizeTo","comment":"<p>Resizes this window to a specific width and height.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://docs.webplatform.org/wiki/dom/methods/resizeTo\">Window resizeTo</a>\nfrom WebPlatform.org.</p></li></ul>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"width":{"name":"width","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"height":{"name":"height","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Window.resizeTo"]}]},"scroll":{"name":"scroll","qualifiedName":"angular/angular-mock.Window.scroll","comment":"<p>Scrolls the page horizontally and vertically to a specific point.</p>\n<p>This method is identical to <a>angular/angular-mock.Window.scrollTo</a>.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://docs.webplatform.org/wiki/dom/methods/scroll\">Window scroll</a>\nfrom WebPlatform.org.</p></li></ul>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"x":{"name":"x","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]},"y":{"name":"y","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Window.scroll"]}]},"scrollBy":{"name":"scrollBy","qualifiedName":"angular/angular-mock.Window.scrollBy","comment":"<p>Scrolls the page horizontally and vertically by an offset.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://docs.webplatform.org/wiki/dom/methods/scrollBy\">Window scrollBy</a>\nfrom WebPlatform.org.</p></li></ul>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"x":{"name":"x","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]},"y":{"name":"y","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Window.scrollBy"]}]},"scrollTo":{"name":"scrollTo","qualifiedName":"angular/angular-mock.Window.scrollTo","comment":"<p>Scrolls the page horizontally and vertically to a specific point.</p>\n<p>This method is identical to <a>angular/angular-mock.Window.scroll</a>.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://docs.webplatform.org/wiki/dom/methods/scrollTo\">Window scrollTo</a>\nfrom WebPlatform.org.</p></li></ul>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"x":{"name":"x","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]},"y":{"name":"y","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Window.scrollTo"]}]},"showModalDialog":{"name":"showModalDialog","qualifiedName":"angular/angular-mock.Window.showModalDialog","comment":"<p>Opens a new page as a modal dialog.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://www.w3.org/html/wg/drafts/html/master/webappapis.html#dialogs-implemented-using-separate-documents\">Dialogs implemented using separate documents</a>\nfrom W3C.</p></li></ul>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Object","inner":[]}],"parameters":{"url":{"name":"url","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"dialogArgs":{"name":"dialogArgs","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":"null","annotations":[]},"featureArgs":{"name":"featureArgs","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Window.showModalDialog"]}]},"stop":{"name":"stop","qualifiedName":"angular/angular-mock.Window.stop","comment":"<p>Stops the window from loading.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://www.w3.org/html/wg/drafts/html/master/browsers.html#the-window-object\">The Window object</a>\nfrom W3C.</p></li></ul>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.stop"]}]},"toString":{"name":"toString","qualifiedName":"angular/angular-mock.Window.toString","comment":"","commentFrom":"angular-mock.Interceptor.toString","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.toString"]}]},"resolveLocalFileSystemUrl":{"name":"resolveLocalFileSystemUrl","qualifiedName":"angular/angular-mock.Window.resolveLocalFileSystemUrl","comment":"<p>Asynchronously retrieves a local filesystem entry.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://www.w3.org/TR/file-system-api/#obtaining-access-to-file-system-entry-points\">Obtaining access to file system entry points</a>\nfrom W3C.</p></li></ul>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-dom-html.Entry","inner":[]}]}],"parameters":{"url":{"name":"url","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Window.webkitResolveLocalFileSystemURL"]},{"name":"metadata.SupportedBrowser","parameters":["Chrome"]},{"name":"metadata.Experimental","parameters":[]}]},"atob":{"name":"atob","qualifiedName":"angular/angular-mock.Window.atob","comment":"","commentFrom":"angular-mock.WindowBase64.atob","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"string":{"name":"string","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Window.atob"]}]},"btoa":{"name":"btoa","qualifiedName":"angular/angular-mock.Window.btoa","comment":"","commentFrom":"angular-mock.WindowBase64.btoa","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"string":{"name":"string","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Window.btoa"]}]},"moveTo":{"name":"moveTo","qualifiedName":"angular/angular-mock.Window.moveTo","comment":"<p>Moves this window to a specific position.</p>\n<p>x and y can be negative.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window.moveTo\">Window.moveTo</a> from MDN.</p></li><li>\n<p><a href=\"http://dev.w3.org/csswg/cssom-view/#dom-window-moveto\">Window.moveTo</a> from W3C.</p></li></ul>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"p":{"name":"p","optional":false,"named":false,"default":false,"type":[{"outer":"dart-math.Point","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"angular/angular-mock.Window.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>angular/angular-mock.Window.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"dart-core.Object.hashCode","inheritedFrom":"angular-mock.Interceptor.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"angular/angular-mock.Window.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"dart-core.Object.runtimeType","inheritedFrom":"angular-mock.Interceptor.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"on":{"name":"on","qualifiedName":"angular/angular-mock.Window.on","comment":"<p>This is an ease-of-use accessor for event streams which should only be\nused when an explicit accessor is not available.</p>","commentFrom":"","inheritedFrom":"angular-mock.EventTarget.on","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.Events","inner":[]}],"parameters":{},"annotations":[]},"onAbort":{"name":"onAbort","qualifiedName":"angular/angular-mock.Window.onAbort","comment":"","commentFrom":"","inheritedFrom":"angular-mock.GlobalEventHandlers.onAbort","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["GlobalEventHandlers.onabort"]},{"name":"metadata.Experimental","parameters":[]}]},"onBlur":{"name":"onBlur","qualifiedName":"angular/angular-mock.Window.onBlur","comment":"","commentFrom":"","inheritedFrom":"angular-mock.GlobalEventHandlers.onBlur","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["GlobalEventHandlers.onblur"]},{"name":"metadata.Experimental","parameters":[]}]},"onChange":{"name":"onChange","qualifiedName":"angular/angular-mock.Window.onChange","comment":"","commentFrom":"","inheritedFrom":"angular-mock.GlobalEventHandlers.onChange","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["GlobalEventHandlers.onchange"]},{"name":"metadata.Experimental","parameters":[]}]},"onClick":{"name":"onClick","qualifiedName":"angular/angular-mock.Window.onClick","comment":"","commentFrom":"","inheritedFrom":"angular-mock.GlobalEventHandlers.onClick","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["GlobalEventHandlers.onclick"]},{"name":"metadata.Experimental","parameters":[]}]},"onContextMenu":{"name":"onContextMenu","qualifiedName":"angular/angular-mock.Window.onContextMenu","comment":"","commentFrom":"","inheritedFrom":"angular-mock.GlobalEventHandlers.onContextMenu","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["GlobalEventHandlers.oncontextmenu"]},{"name":"metadata.Experimental","parameters":[]}]},"onDoubleClick":{"name":"onDoubleClick","qualifiedName":"angular/angular-mock.Window.onDoubleClick","comment":"","commentFrom":"","inheritedFrom":"angular-mock.GlobalEventHandlers.onDoubleClick","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["GlobalEventHandlers.ondblclick"]},{"name":"metadata.Experimental","parameters":[]}]},"onDrag":{"name":"onDrag","qualifiedName":"angular/angular-mock.Window.onDrag","comment":"","commentFrom":"","inheritedFrom":"angular-mock.GlobalEventHandlers.onDrag","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["GlobalEventHandlers.ondrag"]},{"name":"metadata.Experimental","parameters":[]}]},"onDragEnd":{"name":"onDragEnd","qualifiedName":"angular/angular-mock.Window.onDragEnd","comment":"","commentFrom":"","inheritedFrom":"angular-mock.GlobalEventHandlers.onDragEnd","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["GlobalEventHandlers.ondragend"]},{"name":"metadata.Experimental","parameters":[]}]},"onDragEnter":{"name":"onDragEnter","qualifiedName":"angular/angular-mock.Window.onDragEnter","comment":"","commentFrom":"","inheritedFrom":"angular-mock.GlobalEventHandlers.onDragEnter","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["GlobalEventHandlers.ondragenter"]},{"name":"metadata.Experimental","parameters":[]}]},"onDragLeave":{"name":"onDragLeave","qualifiedName":"angular/angular-mock.Window.onDragLeave","comment":"","commentFrom":"","inheritedFrom":"angular-mock.GlobalEventHandlers.onDragLeave","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["GlobalEventHandlers.ondragleave"]},{"name":"metadata.Experimental","parameters":[]}]},"onDragOver":{"name":"onDragOver","qualifiedName":"angular/angular-mock.Window.onDragOver","comment":"","commentFrom":"","inheritedFrom":"angular-mock.GlobalEventHandlers.onDragOver","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["GlobalEventHandlers.ondragover"]},{"name":"metadata.Experimental","parameters":[]}]},"onDragStart":{"name":"onDragStart","qualifiedName":"angular/angular-mock.Window.onDragStart","comment":"","commentFrom":"","inheritedFrom":"angular-mock.GlobalEventHandlers.onDragStart","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["GlobalEventHandlers.ondragstart"]},{"name":"metadata.Experimental","parameters":[]}]},"onDrop":{"name":"onDrop","qualifiedName":"angular/angular-mock.Window.onDrop","comment":"","commentFrom":"","inheritedFrom":"angular-mock.GlobalEventHandlers.onDrop","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["GlobalEventHandlers.ondrop"]},{"name":"metadata.Experimental","parameters":[]}]},"onError":{"name":"onError","qualifiedName":"angular/angular-mock.Window.onError","comment":"","commentFrom":"","inheritedFrom":"angular-mock.GlobalEventHandlers.onError","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["GlobalEventHandlers.onerror"]},{"name":"metadata.Experimental","parameters":[]}]},"onFocus":{"name":"onFocus","qualifiedName":"angular/angular-mock.Window.onFocus","comment":"","commentFrom":"","inheritedFrom":"angular-mock.GlobalEventHandlers.onFocus","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["GlobalEventHandlers.onfocus"]},{"name":"metadata.Experimental","parameters":[]}]},"onInput":{"name":"onInput","qualifiedName":"angular/angular-mock.Window.onInput","comment":"","commentFrom":"","inheritedFrom":"angular-mock.GlobalEventHandlers.onInput","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["GlobalEventHandlers.oninput"]},{"name":"metadata.Experimental","parameters":[]}]},"onInvalid":{"name":"onInvalid","qualifiedName":"angular/angular-mock.Window.onInvalid","comment":"","commentFrom":"","inheritedFrom":"angular-mock.GlobalEventHandlers.onInvalid","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["GlobalEventHandlers.oninvalid"]},{"name":"metadata.Experimental","parameters":[]}]},"onKeyDown":{"name":"onKeyDown","qualifiedName":"angular/angular-mock.Window.onKeyDown","comment":"","commentFrom":"","inheritedFrom":"angular-mock.GlobalEventHandlers.onKeyDown","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.KeyboardEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["GlobalEventHandlers.onkeydown"]},{"name":"metadata.Experimental","parameters":[]}]},"onKeyPress":{"name":"onKeyPress","qualifiedName":"angular/angular-mock.Window.onKeyPress","comment":"","commentFrom":"","inheritedFrom":"angular-mock.GlobalEventHandlers.onKeyPress","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.KeyboardEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["GlobalEventHandlers.onkeypress"]},{"name":"metadata.Experimental","parameters":[]}]},"onKeyUp":{"name":"onKeyUp","qualifiedName":"angular/angular-mock.Window.onKeyUp","comment":"","commentFrom":"","inheritedFrom":"angular-mock.GlobalEventHandlers.onKeyUp","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.KeyboardEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["GlobalEventHandlers.onkeyup"]},{"name":"metadata.Experimental","parameters":[]}]},"onLoad":{"name":"onLoad","qualifiedName":"angular/angular-mock.Window.onLoad","comment":"","commentFrom":"","inheritedFrom":"angular-mock.GlobalEventHandlers.onLoad","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["GlobalEventHandlers.onload"]},{"name":"metadata.Experimental","parameters":[]}]},"onMouseDown":{"name":"onMouseDown","qualifiedName":"angular/angular-mock.Window.onMouseDown","comment":"","commentFrom":"","inheritedFrom":"angular-mock.GlobalEventHandlers.onMouseDown","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["GlobalEventHandlers.onmousedown"]},{"name":"metadata.Experimental","parameters":[]}]},"onMouseEnter":{"name":"onMouseEnter","qualifiedName":"angular/angular-mock.Window.onMouseEnter","comment":"","commentFrom":"","inheritedFrom":"angular-mock.GlobalEventHandlers.onMouseEnter","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["GlobalEventHandlers.onmouseenter"]},{"name":"metadata.Experimental","parameters":[]}]},"onMouseLeave":{"name":"onMouseLeave","qualifiedName":"angular/angular-mock.Window.onMouseLeave","comment":"","commentFrom":"","inheritedFrom":"angular-mock.GlobalEventHandlers.onMouseLeave","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["GlobalEventHandlers.onmouseleave"]},{"name":"metadata.Experimental","parameters":[]}]},"onMouseMove":{"name":"onMouseMove","qualifiedName":"angular/angular-mock.Window.onMouseMove","comment":"","commentFrom":"","inheritedFrom":"angular-mock.GlobalEventHandlers.onMouseMove","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["GlobalEventHandlers.onmousemove"]},{"name":"metadata.Experimental","parameters":[]}]},"onMouseOut":{"name":"onMouseOut","qualifiedName":"angular/angular-mock.Window.onMouseOut","comment":"","commentFrom":"","inheritedFrom":"angular-mock.GlobalEventHandlers.onMouseOut","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["GlobalEventHandlers.onmouseout"]},{"name":"metadata.Experimental","parameters":[]}]},"onMouseOver":{"name":"onMouseOver","qualifiedName":"angular/angular-mock.Window.onMouseOver","comment":"","commentFrom":"","inheritedFrom":"angular-mock.GlobalEventHandlers.onMouseOver","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["GlobalEventHandlers.onmouseover"]},{"name":"metadata.Experimental","parameters":[]}]},"onMouseUp":{"name":"onMouseUp","qualifiedName":"angular/angular-mock.Window.onMouseUp","comment":"","commentFrom":"","inheritedFrom":"angular-mock.GlobalEventHandlers.onMouseUp","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["GlobalEventHandlers.onmouseup"]},{"name":"metadata.Experimental","parameters":[]}]},"onMouseWheel":{"name":"onMouseWheel","qualifiedName":"angular/angular-mock.Window.onMouseWheel","comment":"","commentFrom":"","inheritedFrom":"angular-mock.GlobalEventHandlers.onMouseWheel","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.WheelEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["GlobalEventHandlers.onmousewheel"]},{"name":"metadata.Experimental","parameters":[]}]},"onReset":{"name":"onReset","qualifiedName":"angular/angular-mock.Window.onReset","comment":"","commentFrom":"","inheritedFrom":"angular-mock.GlobalEventHandlers.onReset","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["GlobalEventHandlers.onreset"]},{"name":"metadata.Experimental","parameters":[]}]},"onScroll":{"name":"onScroll","qualifiedName":"angular/angular-mock.Window.onScroll","comment":"","commentFrom":"","inheritedFrom":"angular-mock.GlobalEventHandlers.onScroll","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["GlobalEventHandlers.onscroll"]},{"name":"metadata.Experimental","parameters":[]}]},"onSelect":{"name":"onSelect","qualifiedName":"angular/angular-mock.Window.onSelect","comment":"","commentFrom":"","inheritedFrom":"angular-mock.GlobalEventHandlers.onSelect","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["GlobalEventHandlers.onselect"]},{"name":"metadata.Experimental","parameters":[]}]},"onSubmit":{"name":"onSubmit","qualifiedName":"angular/angular-mock.Window.onSubmit","comment":"","commentFrom":"","inheritedFrom":"angular-mock.GlobalEventHandlers.onSubmit","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["GlobalEventHandlers.onsubmit"]},{"name":"metadata.Experimental","parameters":[]}]},"location":{"name":"location","qualifiedName":"angular/angular-mock.Window.location","comment":"<p>The current location of this window.</p>\n<pre><code>Location currentLocation = window.location;\nprint(currentLocation.href); // 'http://www.example.com:80/'\n</code></pre>","commentFrom":"","inheritedFrom":"angular-mock.WindowBase.location","static":false,"abstract":true,"constant":false,"return":[{"outer":"angular/angular-mock.LocationBase","inner":[]}],"parameters":{},"annotations":[]},"history":{"name":"history","qualifiedName":"angular/angular-mock.Window.history","comment":"<p>The current session history for this window.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/history.html\">Session history and navigation specification</a>\nfrom WHATWG.</p></li></ul>","commentFrom":"","inheritedFrom":"angular-mock.WindowBase.history","static":false,"abstract":true,"constant":false,"return":[{"outer":"angular/angular-mock.HistoryBase","inner":[]}],"parameters":{},"annotations":[]},"closed":{"name":"closed","qualifiedName":"angular/angular-mock.Window.closed","comment":"<p>Indicates whether this window has been closed.</p>\n<pre><code>print(window.closed); // 'false'\nwindow.close();\nprint(window.closed); // 'true'\n</code></pre>","commentFrom":"","inheritedFrom":"angular-mock.WindowBase.closed","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"opener":{"name":"opener","qualifiedName":"angular/angular-mock.Window.opener","comment":"<p>A reference to the window that opened this one.</p>\n<pre><code>Window thisWindow = window;\nWindowBase otherWindow = thisWindow.open('http://www.example.com/', 'foo');\nprint(otherWindow.opener == thisWindow); // 'true'\n</code></pre>","commentFrom":"","inheritedFrom":"angular-mock.WindowBase.opener","static":false,"abstract":true,"constant":false,"return":[{"outer":"angular/angular-mock.WindowBase","inner":[]}],"parameters":{},"annotations":[]},"parent":{"name":"parent","qualifiedName":"angular/angular-mock.Window.parent","comment":"<p>A reference to the parent of this window.</p>\n<p>If this <a>angular/angular-mock.WindowBase</a> has no parent, <a>angular/angular-mock.Window.parent</a> will return a reference to\nthe <a>angular/angular-mock.WindowBase</a> itself.</p>\n<pre><code>IFrameElement myIFrame = new IFrameElement();\nwindow.document.body.elements.add(myIFrame);\nprint(myIframe.contentWindow.parent == window) // 'true'\n\nprint(window.parent == window) // 'true'\n</code></pre>","commentFrom":"","inheritedFrom":"angular-mock.WindowBase.parent","static":false,"abstract":true,"constant":false,"return":[{"outer":"angular/angular-mock.WindowBase","inner":[]}],"parameters":{},"annotations":[]},"top":{"name":"top","qualifiedName":"angular/angular-mock.Window.top","comment":"<p>A reference to the topmost window in the window hierarchy.</p>\n<p>If this <a>angular/angular-mock.WindowBase</a> is the topmost <a>angular/angular-mock.WindowBase</a>, <a>angular/angular-mock.Window.top</a> will return a\nreference to the <a>angular/angular-mock.WindowBase</a> itself.</p>\n<pre><code>// Add an IFrame to the current window.\nIFrameElement myIFrame = new IFrameElement();\nwindow.document.body.elements.add(myIFrame);\n\n// Add an IFrame inside of the other IFrame.\nIFrameElement innerIFrame = new IFrameElement();\nmyIFrame.elements.add(innerIFrame);\n\nprint(myIframe.contentWindow.top == window) // 'true'\nprint(innerIFrame.contentWindow.top == window) // 'true'\n\nprint(window.top == window) // 'true'\n</code></pre>","commentFrom":"","inheritedFrom":"angular-mock.WindowBase.top","static":false,"abstract":true,"constant":false,"return":[{"outer":"angular/angular-mock.WindowBase","inner":[]}],"parameters":{},"annotations":[]},"onHashChange":{"name":"onHashChange","qualifiedName":"angular/angular-mock.Window.onHashChange","comment":"","commentFrom":"","inheritedFrom":"angular-mock.WindowEventHandlers.onHashChange","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["WindowEventHandlers.onhashchange"]},{"name":"metadata.Experimental","parameters":[]}]},"onMessage":{"name":"onMessage","qualifiedName":"angular/angular-mock.Window.onMessage","comment":"","commentFrom":"","inheritedFrom":"angular-mock.WindowEventHandlers.onMessage","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MessageEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["WindowEventHandlers.onmessage"]},{"name":"metadata.Experimental","parameters":[]}]},"onOffline":{"name":"onOffline","qualifiedName":"angular/angular-mock.Window.onOffline","comment":"","commentFrom":"","inheritedFrom":"angular-mock.WindowEventHandlers.onOffline","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["WindowEventHandlers.onoffline"]},{"name":"metadata.Experimental","parameters":[]}]},"onOnline":{"name":"onOnline","qualifiedName":"angular/angular-mock.Window.onOnline","comment":"","commentFrom":"","inheritedFrom":"angular-mock.WindowEventHandlers.onOnline","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["WindowEventHandlers.ononline"]},{"name":"metadata.Experimental","parameters":[]}]},"onPopState":{"name":"onPopState","qualifiedName":"angular/angular-mock.Window.onPopState","comment":"","commentFrom":"","inheritedFrom":"angular-mock.WindowEventHandlers.onPopState","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.PopStateEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["WindowEventHandlers.onpopstate"]},{"name":"metadata.Experimental","parameters":[]}]},"onResize":{"name":"onResize","qualifiedName":"angular/angular-mock.Window.onResize","comment":"","commentFrom":"","inheritedFrom":"angular-mock.WindowEventHandlers.onResize","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["WindowEventHandlers.onresize"]},{"name":"metadata.Experimental","parameters":[]}]},"onStorage":{"name":"onStorage","qualifiedName":"angular/angular-mock.Window.onStorage","comment":"","commentFrom":"","inheritedFrom":"angular-mock.WindowEventHandlers.onStorage","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.StorageEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["WindowEventHandlers.onstorage"]},{"name":"metadata.Experimental","parameters":[]}]},"onUnload":{"name":"onUnload","qualifiedName":"angular/angular-mock.Window.onUnload","comment":"","commentFrom":"","inheritedFrom":"angular-mock.WindowEventHandlers.onUnload","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["WindowEventHandlers.onunload"]},{"name":"metadata.Experimental","parameters":[]}]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"angular/angular-mock.Window.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>angular/angular-mock.Window.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>angular/angular-mock.Window.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"dart-core.Object.==","inheritedFrom":"angular-mock.Interceptor.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"angular/angular-mock.Window.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"angular-mock.Interceptor.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"angular/angular-mock.Window.noSuchMethod","comment":"<p><a>angular/angular-mock.Window.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>angular/angular-mock.Window.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>angular/angular-mock.Window.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>angular/angular-mock.Window.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"dart-core.Object.noSuchMethod","inheritedFrom":"angular-mock.Interceptor.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"addEventListener":{"name":"addEventListener","qualifiedName":"angular/angular-mock.Window.addEventListener","comment":"","commentFrom":"","inheritedFrom":"angular-mock.EventTarget.addEventListener","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"type":{"name":"type","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"listener":{"name":"listener","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.EventListener","inner":[]}],"value":"null","annotations":[]},"useCapture":{"name":"useCapture","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["EventTarget.addEventListener"]}]},"dispatchEvent":{"name":"dispatchEvent","qualifiedName":"angular/angular-mock.Window.dispatchEvent","comment":"","commentFrom":"","inheritedFrom":"angular-mock.EventTarget.dispatchEvent","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"event":{"name":"event","optional":false,"named":false,"default":false,"type":[{"outer":"angular/angular-mock.Event","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["EventTarget.dispatchEvent"]}]},"removeEventListener":{"name":"removeEventListener","qualifiedName":"angular/angular-mock.Window.removeEventListener","comment":"","commentFrom":"","inheritedFrom":"angular-mock.EventTarget.removeEventListener","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"type":{"name":"type","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"listener":{"name":"listener","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.EventListener","inner":[]}],"value":"null","annotations":[]},"useCapture":{"name":"useCapture","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["EventTarget.removeEventListener"]}]},"atob":{"name":"atob","qualifiedName":"angular/angular-mock.Window.atob","comment":"","commentFrom":"","inheritedFrom":"angular-mock.WindowBase64.atob","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"string":{"name":"string","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"btoa":{"name":"btoa","qualifiedName":"angular/angular-mock.Window.btoa","comment":"","commentFrom":"","inheritedFrom":"angular-mock.WindowBase64.btoa","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"string":{"name":"string","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"close":{"name":"close","qualifiedName":"angular/angular-mock.Window.close","comment":"<p>Closes the window.</p>\n<p>This method should only succeed if the <a>angular/angular-mock.WindowBase</a> object is\n<strong>script-closeable</strong> and the window calling <a>angular/angular-mock.Window.close</a> is allowed to navigate\nthe window.</p>\n<p>A window is script-closeable if it is either a window\nthat was opened by another window, or if it is a window with only one\ndocument in its history.</p>\n<p>A window might not be allowed to navigate, and therefore close, another\nwindow due to browser security features.</p>\n<pre><code>var other = window.open('http://www.example.com', 'foo');\n// Closes other window, as it is script-closeable.\nother.close();\nprint(other.closed()); // 'true'\n\nwindow.location('http://www.mysite.com', 'foo');\n// Does not close this window, as the history has changed.\nwindow.close();\nprint(window.closed()); // 'false'\n</code></pre>\n<p>See also:</p><ul><li><a href=\"http://www.w3.org/TR/html5/browsers.html#dom-window-close\">Window close discussion</a> from the W3C</li></ul>","commentFrom":"","inheritedFrom":"angular-mock.WindowBase.close","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"postMessage":{"name":"postMessage","qualifiedName":"angular/angular-mock.Window.postMessage","comment":"<p>Sends a cross-origin message.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window.postMessage\">window.postMessage</a> from\nMDN.</p></li><li>\n<p><a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/web-messaging.html\">Cross-document messaging</a>\nfrom WHATWG.</p></li></ul>","commentFrom":"","inheritedFrom":"angular-mock.WindowBase.postMessage","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"message":{"name":"message","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"targetOrigin":{"name":"targetOrigin","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"messagePorts":{"name":"messagePorts","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[{"name":"metadata.DomName","parameters":["Window"]}],"generics":{}}