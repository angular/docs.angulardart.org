{"name":"NgForm","qualifiedName":"angular/angular.NgForm","comment":"<p>The form directive listens on submission requests and, depending,\non if an action is set, the form will automatically either allow\nor prevent the default browser submission from occurring.</p>","isAbstract":false,"superclass":"angular/angular.NgControl","implements":[],"subclass":[],"variables":{},"inheritedVariables":{"errorStates":{"name":"errorStates","qualifiedName":"angular/angular.NgControl.errorStates","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"infoStates":{"name":"infoStates","qualifiedName":"angular/angular.NgControl.infoStates","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]}},"methods":{"setters":{"name=":{"name":"name=","qualifiedName":"angular/angular.NgForm.name=","comment":"","commentFrom":"angular.NgControl.name=","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"getters":{"name":{"name":"name","qualifiedName":"angular/angular.NgForm.name","comment":"","commentFrom":"angular.NgControl.name","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[{"name":"angular.NgAttr","parameters":["@"]}]},"controls":{"name":"controls","qualifiedName":"angular/angular.NgForm.controls","comment":"","commentFrom":"angular.NgForm.controls","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"angular/angular.NgForm.NgForm-","comment":"<p>Instantiates a new instance of NgForm. Upon creation, the instance of the\nclass will be bound to the formName property on the scope (where formName\nrefers to the name value acquired from the name attribute present on the\nform DOM element).</p><ul><li>scope - The scope to bind the form instance to.</li><li><a>angular/angular.NgForm.NgForm-.element</a> - The form DOM element.</li><li><a>angular/angular.NgForm.NgForm-.injector</a> - An instance of Injector.</li></ul>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"_scope":{"name":"_scope","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"angular/angular.NgElement","inner":[]}],"value":"null","annotations":[]},"injector":{"name":"injector","optional":false,"named":false,"default":false,"type":[{"outer":"angular/angular.Injector","inner":[]}],"value":"null","annotations":[]},"animate":{"name":"animate","optional":false,"named":false,"default":false,"type":[{"outer":"angular/angular.NgAnimate","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"operators":{"[]":{"name":"[]","qualifiedName":"angular/angular.NgForm.[]","comment":"","commentFrom":"angular.NgForm.[]","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular/angular.NgControl","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{}},"inheritedMethods":{"setters":{"name=":{"name":"name=","qualifiedName":"angular/angular.NgForm.name=","comment":"","commentFrom":"","inheritedFrom":"angular.NgControl.name=","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"angular/angular.NgForm.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>angular/angular.NgForm.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"angular/angular.NgForm.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"parentControl":{"name":"parentControl","qualifiedName":"angular/angular.NgForm.parentControl","comment":"","commentFrom":"","inheritedFrom":"angular.NgControl.parentControl","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"submitted":{"name":"submitted","qualifiedName":"angular/angular.NgForm.submitted","comment":"","commentFrom":"","inheritedFrom":"angular.NgControl.submitted","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"valid_submit":{"name":"valid_submit","qualifiedName":"angular/angular.NgForm.valid_submit","comment":"","commentFrom":"","inheritedFrom":"angular.NgControl.valid_submit","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"invalid_submit":{"name":"invalid_submit","qualifiedName":"angular/angular.NgForm.invalid_submit","comment":"","commentFrom":"","inheritedFrom":"angular.NgControl.invalid_submit","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"name":{"name":"name","qualifiedName":"angular/angular.NgForm.name","comment":"","commentFrom":"","inheritedFrom":"angular.NgControl.name","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"element":{"name":"element","qualifiedName":"angular/angular.NgForm.element","comment":"","commentFrom":"","inheritedFrom":"angular.NgControl.element","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"valid":{"name":"valid","qualifiedName":"angular/angular.NgForm.valid","comment":"","commentFrom":"","inheritedFrom":"angular.NgControl.valid","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"invalid":{"name":"invalid","qualifiedName":"angular/angular.NgForm.invalid","comment":"","commentFrom":"","inheritedFrom":"angular.NgControl.invalid","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"pristine":{"name":"pristine","qualifiedName":"angular/angular.NgForm.pristine","comment":"","commentFrom":"","inheritedFrom":"angular.NgControl.pristine","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"dirty":{"name":"dirty","qualifiedName":"angular/angular.NgForm.dirty","comment":"","commentFrom":"","inheritedFrom":"angular.NgControl.dirty","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"untouched":{"name":"untouched","qualifiedName":"angular/angular.NgForm.untouched","comment":"","commentFrom":"","inheritedFrom":"angular.NgControl.untouched","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"touched":{"name":"touched","qualifiedName":"angular/angular.NgForm.touched","comment":"","commentFrom":"","inheritedFrom":"angular.NgControl.touched","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"angular/angular.NgForm.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>angular/angular.NgForm.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>angular/angular.NgForm.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"angular/angular.NgForm.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"angular/angular.NgForm.noSuchMethod","comment":"<p><a>angular/angular.NgForm.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>angular/angular.NgForm.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>angular/angular.NgForm.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>angular/angular.NgForm.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"detach":{"name":"detach","qualifiedName":"angular/angular.NgForm.detach","comment":"","commentFrom":"","inheritedFrom":"angular.NgControl.detach","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[{"name":"dart-core._Override","parameters":[]}]},"attach":{"name":"attach","qualifiedName":"angular/angular.NgForm.attach","comment":"","commentFrom":"","inheritedFrom":"angular.NgControl.attach","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[{"name":"dart-core._Override","parameters":[]}]},"reset":{"name":"reset","qualifiedName":"angular/angular.NgForm.reset","comment":"","commentFrom":"","inheritedFrom":"angular.NgControl.reset","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"onSubmit":{"name":"onSubmit","qualifiedName":"angular/angular.NgForm.onSubmit","comment":"","commentFrom":"","inheritedFrom":"angular.NgControl.onSubmit","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"valid":{"name":"valid","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"addControl":{"name":"addControl","qualifiedName":"angular/angular.NgForm.addControl","comment":"<p>Registers a form control into the form for validation.</p><ul><li><a>angular/angular.NgForm.addControl.control</a> - The form control which will be registered (see ngControl).</li></ul>","commentFrom":"","inheritedFrom":"angular.NgControl.addControl","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"control":{"name":"control","optional":false,"named":false,"default":false,"type":[{"outer":"angular/angular.NgControl","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"removeControl":{"name":"removeControl","qualifiedName":"angular/angular.NgForm.removeControl","comment":"<p>De-registers a form control from the list of controls associated with the\nform.</p><ul><li>\n<p><a>angular/angular.NgForm.removeControl.control</a> - The form control which will be de-registered (see\nngControl).</p></li></ul>","commentFrom":"","inheritedFrom":"angular.NgControl.removeControl","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"control":{"name":"control","optional":false,"named":false,"default":false,"type":[{"outer":"angular/angular.NgControl","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"removeStates":{"name":"removeStates","qualifiedName":"angular/angular.NgForm.removeStates","comment":"","commentFrom":"","inheritedFrom":"angular.NgControl.removeStates","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"control":{"name":"control","optional":false,"named":false,"default":false,"type":[{"outer":"angular/angular.NgControl","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"hasErrorState":{"name":"hasErrorState","qualifiedName":"angular/angular.NgForm.hasErrorState","comment":"<p>Sets the validity status of the given control/errorType pair within\nthe list of controls registered on the form. Depending on the validation\nstate of the existing controls, this will either change valid to true\nor invalid to true depending on if all controls are valid or if one\nor more of them is invalid.</p><ul><li>control - The registered control object (see ngControl).</li><li>\n<p>errorType - The error associated with the control (e.g. required, url,\nnumber, etc...).</p></li><li>\n<p>isValid - Whether the given error is valid or not (false would mean the\nerror is real).</p></li></ul>","commentFrom":"","inheritedFrom":"angular.NgControl.hasErrorState","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"key":{"name":"key","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"addErrorState":{"name":"addErrorState","qualifiedName":"angular/angular.NgForm.addErrorState","comment":"","commentFrom":"","inheritedFrom":"angular.NgControl.addErrorState","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"control":{"name":"control","optional":false,"named":false,"default":false,"type":[{"outer":"angular/angular.NgControl","inner":[]}],"value":"null","annotations":[]},"state":{"name":"state","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"removeErrorState":{"name":"removeErrorState","qualifiedName":"angular/angular.NgForm.removeErrorState","comment":"","commentFrom":"","inheritedFrom":"angular.NgControl.removeErrorState","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"control":{"name":"control","optional":false,"named":false,"default":false,"type":[{"outer":"angular/angular.NgControl","inner":[]}],"value":"null","annotations":[]},"state":{"name":"state","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"addInfoState":{"name":"addInfoState","qualifiedName":"angular/angular.NgForm.addInfoState","comment":"","commentFrom":"","inheritedFrom":"angular.NgControl.addInfoState","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"control":{"name":"control","optional":false,"named":false,"default":false,"type":[{"outer":"angular/angular.NgControl","inner":[]}],"value":"null","annotations":[]},"state":{"name":"state","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"removeInfoState":{"name":"removeInfoState","qualifiedName":"angular/angular.NgForm.removeInfoState","comment":"","commentFrom":"","inheritedFrom":"angular.NgControl.removeInfoState","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"control":{"name":"control","optional":false,"named":false,"default":false,"type":[{"outer":"angular/angular.NgControl","inner":[]}],"value":"null","annotations":[]},"state":{"name":"state","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[{"name":"angular.NgDirective","parameters":[]},{"name":"angular.NgDirective","parameters":[]},{"name":"angular.NgDirective","parameters":[]},{"name":"angular.NgDirective","parameters":[]}],"generics":{}}