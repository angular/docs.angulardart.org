{"name":"MockWindow","qualifiedName":"angular/angular-mock.MockWindow","comment":"","isAbstract":false,"superclass":"angular/angular-mock.Mock","implements":["angular/angular-mock.Window"],"subclass":[],"variables":{"history":{"name":"history","qualifiedName":"angular/angular-mock.MockWindow.history","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"location":{"name":"location","qualifiedName":"angular/angular-mock.MockWindow.location","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"document":{"name":"document","qualifiedName":"angular/angular-mock.MockWindow.document","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"onPopStateController":{"name":"onPopStateController","qualifiedName":"angular/angular-mock.MockWindow.onPopStateController","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"onHashChangeController":{"name":"onHashChangeController","qualifiedName":"angular/angular-mock.MockWindow.onHashChangeController","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"onClickController":{"name":"onClickController","qualifiedName":"angular/angular-mock.MockWindow.onClickController","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]}},"inheritedVariables":{"name":{"name":"name","qualifiedName":"angular/angular-mock.Window.name","comment":"<p>The name of this window.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://docs.webplatform.org/wiki/html/attributes/name_(window\">Window name</a>) from\nWebPlatform.org.</p></li></ul>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.name"]}]},"log":{"name":"log","qualifiedName":"angular/angular-mock.Mock.log","comment":"<p>The <a>angular/angular-mock.Mock.log</a> of calls made. Only used if <a>angular/angular-mock.Mock.name</a> is null.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"unittest-mock.LogEntryList","inner":[]}],"annotations":[]},"css":{"name":"css","qualifiedName":"angular/angular-mock.Window.css","comment":"<p>Entrypoint for CSS-related functions.</p>\n<h2>Other resources</h2><ul><li><a href=\"http://dev.w3.org/csswg/css-conditional/#the-css-interface\">The CSS interface</a> from W3C.</li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-dom-html.Css","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.CSS"]}]},"applicationCache":{"name":"applicationCache","qualifiedName":"angular/angular-mock.Window.applicationCache","comment":"<p>The application cache for this window.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://www.html5rocks.com/en/tutorials/appcache/beginner\">A beginner's guide to using the application cache</a> from HTML5Rocks.</p></li><li>\n<p><a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/offline.html#application-cache-api\">Application cache API</a>\nfrom WHATWG.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-dom-html.ApplicationCache","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.applicationCache"]}]},"closed":{"name":"closed","qualifiedName":"angular/angular-mock.Window.closed","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.closed"]}]},"crypto":{"name":"crypto","qualifiedName":"angular/angular-mock.Window.crypto","comment":"<p>Entrypoint for the browser's cryptographic functions.</p>\n<h2>Other resources</h2><ul><li><a href=\"http://www.w3.org/TR/WebCryptoAPI/\">Web cryptography API</a> from W3C.</li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-dom-html.Crypto","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.crypto"]},{"name":"metadata.Experimental","parameters":[]}]},"defaultStatus":{"name":"defaultStatus","qualifiedName":"angular/angular-mock.Window.defaultStatus","comment":"<p><em>Deprecated</em>.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.defaultStatus"]},{"name":"metadata.Experimental","parameters":[]}]},"defaultstatus":{"name":"defaultstatus","qualifiedName":"angular/angular-mock.Window.defaultstatus","comment":"<p><em>Deprecated</em>.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.defaultstatus"]},{"name":"metadata.Experimental","parameters":[]}]},"devicePixelRatio":{"name":"devicePixelRatio","qualifiedName":"angular/angular-mock.Window.devicePixelRatio","comment":"<p>The ratio between physical pixels and logical CSS pixels.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://www.quirksmode.org/blog/archives/2012/06/devicepixelrati.html\">devicePixelRatio</a> from\nquirksmode.</p></li><li>\n<p><a href=\"http://www.quirksmode.org/blog/archives/2012/07/more_about_devi.html\">More about devicePixelRatio</a> from\nquirksmode.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.double","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.devicePixelRatio"]},{"name":"metadata.Experimental","parameters":[]}]},"history":{"name":"history","qualifiedName":"angular/angular-mock.Window.history","comment":"<p>The current session history for this window's newest document.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/browsers.html\">Loading web pages</a>\nfrom WHATWG.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"angular/angular-mock.History","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.history"]}]},"innerHeight":{"name":"innerHeight","qualifiedName":"angular/angular-mock.Window.innerHeight","comment":"<p>The height of the viewport including scrollbars.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://docs.webplatform.org/wiki/css/cssom/properties/innerHeight\">innerHeight</a> from\nWebPlatform.org.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.innerHeight"]}]},"innerWidth":{"name":"innerWidth","qualifiedName":"angular/angular-mock.Window.innerWidth","comment":"<p>The width of the viewport including scrollbars.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://docs.webplatform.org/wiki/css/cssom/properties/innerWidth\">innerWidth</a> from\nWebPlatform.org.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.innerWidth"]}]},"localStorage":{"name":"localStorage","qualifiedName":"angular/angular-mock.Window.localStorage","comment":"<p>Storage for this window that persists across sessions.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Storage\">DOM storage guide</a> from\nMDN.</p></li><li>\n<p><a href=\"http://diveintohtml5.info/storage.html\">The past, present &amp; future of local storage for web applications</a> from Dive Into HTML5.</p></li><li>\n<p><a href=\"http://www.w3.org/TR/webstorage/#the-localstorage-attribute\">Local storage specification</a> from W3C.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-dom-html.Storage","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.localStorage"]}]},"locationbar":{"name":"locationbar","qualifiedName":"angular/angular-mock.Window.locationbar","comment":"<p>This window's location bar, which displays the URL.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/browsers.html#browser-interface-elements\">Browser interface elements</a>\nfrom WHATWG.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-dom-html.BarProp","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.locationbar"]}]},"menubar":{"name":"menubar","qualifiedName":"angular/angular-mock.Window.menubar","comment":"<p>This window's menu bar, which displays menu commands.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/browsers.html#browser-interface-elements\">Browser interface elements</a>\nfrom WHATWG.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-dom-html.BarProp","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.menubar"]}]},"navigator":{"name":"navigator","qualifiedName":"angular/angular-mock.Window.navigator","comment":"<p>The user agent accessing this window.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#the-navigator-object\">The navigator object</a>\nfrom WHATWG.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-dom-html.Navigator","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.navigator"]}]},"offscreenBuffering":{"name":"offscreenBuffering","qualifiedName":"angular/angular-mock.Window.offscreenBuffering","comment":"<p>Whether objects are drawn offscreen before being displayed.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://docs.webplatform.org/wiki/dom/properties/offscreenBuffering\">offscreenBuffering</a> from\nWebPlatform.org.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.offscreenBuffering"]},{"name":"metadata.Experimental","parameters":[]}]},"outerHeight":{"name":"outerHeight","qualifiedName":"angular/angular-mock.Window.outerHeight","comment":"<p>The height of this window including all user interface elements.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://docs.webplatform.org/wiki/css/cssom/properties/outerHeight\">outerHeight</a> from\nWebPlatform.org.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.outerHeight"]}]},"outerWidth":{"name":"outerWidth","qualifiedName":"angular/angular-mock.Window.outerWidth","comment":"<p>The width of the window including all user interface elements.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://docs.webplatform.org/wiki/css/cssom/properties/outerWidth\">outerWidth</a> from\nWebPlatform.org.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.outerWidth"]}]},"pageXOffset":{"name":"pageXOffset","qualifiedName":"angular/angular-mock.Window.pageXOffset","comment":"<p>The distance this window has been scrolled horizontally.</p>\n<p>This attribute is an alias for <a>angular/angular-mock.Window.scrollX</a>.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://www.w3.org/TR/cssom-view/#screen\">The Screen interface specification</a> from W3C.</p></li><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window.scrollX\">scrollX and pageXOffset</a> from MDN.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.pageXOffset"]}]},"pageYOffset":{"name":"pageYOffset","qualifiedName":"angular/angular-mock.Window.pageYOffset","comment":"<p>The distance this window has been scrolled vertically.</p>\n<p>This attribute is an alias for <a>angular/angular-mock.Window.scrollY</a>.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://www.w3.org/TR/cssom-view/#screen\">The Screen interface specification</a> from W3C.</p></li><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window.scrollY\">scrollY and pageYOffset</a> from MDN.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.pageYOffset"]}]},"performance":{"name":"performance","qualifiedName":"angular/angular-mock.Window.performance","comment":"<p>Timing and navigation data for this window.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://www.html5rocks.com/en/tutorials/webperformance/basics/\">Measuring page load speed with navigation timeing</a> from\nHTML5Rocks.</p></li><li>\n<p><a href=\"http://www.w3.org/TR/navigation-timing/\">Navigation timing specification</a> from W3C.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-dom-html.Performance","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.performance"]},{"name":"metadata.SupportedBrowser","parameters":["Chrome"]},{"name":"metadata.SupportedBrowser","parameters":["Firefox"]},{"name":"metadata.SupportedBrowser","parameters":["Internet Explorer"]}]},"screen":{"name":"screen","qualifiedName":"angular/angular-mock.Window.screen","comment":"<p>Information about the screen displaying this window.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://www.w3.org/TR/cssom-view/#screen\">The Screen interface specification</a> from W3C.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-dom-html.Screen","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.screen"]}]},"screenLeft":{"name":"screenLeft","qualifiedName":"angular/angular-mock.Window.screenLeft","comment":"<p>The distance from the left side of the screen to the left side of this\nwindow.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://www.w3.org/TR/cssom-view/#screen\">The Screen interface specification</a> from W3C.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.screenLeft"]}]},"screenTop":{"name":"screenTop","qualifiedName":"angular/angular-mock.Window.screenTop","comment":"<p>The distance from the top of the screen to the top of this window.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://www.w3.org/TR/cssom-view/#screen\">The Screen interface specification</a> from W3C.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.screenTop"]}]},"screenX":{"name":"screenX","qualifiedName":"angular/angular-mock.Window.screenX","comment":"<p>The distance from the left side of the screen to the mouse pointer.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://www.w3.org/TR/cssom-view/#screen\">The Screen interface specification</a> from W3C.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.screenX"]}]},"screenY":{"name":"screenY","qualifiedName":"angular/angular-mock.Window.screenY","comment":"<p>The distance from the top of the screen to the mouse pointer.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://www.w3.org/TR/cssom-view/#screen\">The Screen interface specification</a> from W3C.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.screenY"]}]},"scrollbars":{"name":"scrollbars","qualifiedName":"angular/angular-mock.Window.scrollbars","comment":"<p>This window's scroll bars.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/browsers.html#browser-interface-elements\">Browser interface elements</a>\nfrom WHATWG.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-dom-html.BarProp","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.scrollbars"]}]},"sessionStorage":{"name":"sessionStorage","qualifiedName":"angular/angular-mock.Window.sessionStorage","comment":"<p>Storage for this window that is cleared when this session ends.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Storage\">DOM storage guide</a> from\nMDN.</p></li><li>\n<p><a href=\"http://diveintohtml5.info/storage.html\">The past, present &amp; future of local storage for web applications</a> from Dive Into HTML5.</p></li><li>\n<p><a href=\"http://www.w3.org/TR/webstorage/#dom-sessionstorage\">Local storage specification</a> from W3C.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-dom-html.Storage","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.sessionStorage"]}]},"speechSynthesis":{"name":"speechSynthesis","qualifiedName":"angular/angular-mock.Window.speechSynthesis","comment":"<p>Access to speech synthesis in the browser.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://dvcs.w3.org/hg/speech-api/raw-file/tip/speechapi.html#tts-section\">Web speech specification</a>\nfrom W3C.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-dom-html.SpeechSynthesis","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.speechSynthesis"]},{"name":"metadata.Experimental","parameters":[]}]},"status":{"name":"status","qualifiedName":"angular/angular-mock.Window.status","comment":"<p><em>Deprecated</em>.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.status"]}]},"statusbar":{"name":"statusbar","qualifiedName":"angular/angular-mock.Window.statusbar","comment":"<p>This window's status bar.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/browsers.html#browser-interface-elements\">Browser interface elements</a>\nfrom WHATWG.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-dom-html.BarProp","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.statusbar"]}]},"styleMedia":{"name":"styleMedia","qualifiedName":"angular/angular-mock.Window.styleMedia","comment":"<p>Access to CSS media queries.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.apple.com/library/safari/documentation/SafariDOMAdditions/Reference/StyleMedia/StyleMedia/StyleMedia.html\">StyleMedia class reference</a>\nfrom Safari Developer Library.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-dom-html.StyleMedia","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.styleMedia"]},{"name":"metadata.Experimental","parameters":[]}]},"toolbar":{"name":"toolbar","qualifiedName":"angular/angular-mock.Window.toolbar","comment":"<p>This window's tool bar.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/browsers.html#browser-interface-elements\">Browser interface elements</a>\nfrom WHATWG.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-dom-html.BarProp","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Window.toolbar"]}]}},"methods":{"setters":{},"getters":{"onPopState":{"name":"onPopState","qualifiedName":"angular/angular-mock.MockWindow.onPopState","comment":"<p>Stream of <code>popstate</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"angular-mock.Window.onPopState","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.PopStateEvent","inner":[]}]}],"parameters":{},"annotations":[]},"onHashChange":{"name":"onHashChange","qualifiedName":"angular/angular-mock.MockWindow.onHashChange","comment":"<p>Stream of <code>hashchange</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"angular-mock.Window.onHashChange","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[]},"onClick":{"name":"onClick","qualifiedName":"angular/angular-mock.MockWindow.onClick","comment":"<p>Stream of <code>click</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"angular-mock.Window.onClick","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[]},"animationFrame":{"name":"animationFrame","qualifiedName":"angular/angular-mock.MockWindow.animationFrame","comment":"<p>Returns a Future that completes just before the window is about to\nrepaint so the user can draw an animation frame.</p>\n<p>If you need to later cancel this animation, use requestAnimationFrame\ninstead.</p>\n<p>The Future completes to a timestamp that represents a floating\npoint value of the number of milliseconds that have elapsed since the page\nstarted to load (which is also the timestamp at this call to\nanimationFrame).</p>\n<p>Note: The code that runs when the future completes should call\n<a>angular/angular-mock.MockWindow.animationFrame</a> again for the animation to continue.</p>","commentFrom":"angular-mock.Window.animationFrame","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.num","inner":[]}]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{},"methods":{"executeAnimationFrame":{"name":"executeAnimationFrame","qualifiedName":"angular/angular-mock.MockWindow.executeAnimationFrame","comment":"","commentFrom":"angular-mock.MockWindow.executeAnimationFrame","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"time":{"name":"time","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.num","inner":[]}],"value":"0","annotations":[]}},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"angular/angular-mock.MockWindow.noSuchMethod","comment":"","commentFrom":"angular-mock.Interceptor.noSuchMethod","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{"logging=":{"name":"logging=","qualifiedName":"angular/angular-mock.MockWindow.logging=","comment":"","commentFrom":"","inheritedFrom":"angular-mock.Mock.logging=","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"location=":{"name":"location=","qualifiedName":"angular/angular-mock.MockWindow.location=","comment":"<p>Sets the window's location, which causes the browser to navigate to the new\nlocation. <a>angular/angular-mock.MockWindow.location=.value</a> may be a Location object or a string.</p>","commentFrom":"","inheritedFrom":"angular-mock.Window.location=","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"opener=":{"name":"opener=","qualifiedName":"angular/angular-mock.MockWindow.opener=","comment":"","commentFrom":"","inheritedFrom":"angular-mock.Window.opener=","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"angular/angular-mock.Window","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"angular/angular-mock.MockWindow.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>angular/angular-mock.MockWindow.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"dart-core.Object.hashCode","inheritedFrom":"angular-mock.Interceptor.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"angular/angular-mock.MockWindow.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"dart-core.Object.runtimeType","inheritedFrom":"angular-mock.Interceptor.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"logging":{"name":"logging","qualifiedName":"angular/angular-mock.MockWindow.logging","comment":"","commentFrom":"","inheritedFrom":"angular-mock.Mock.logging","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"on":{"name":"on","qualifiedName":"angular/angular-mock.MockWindow.on","comment":"<p>This is an ease-of-use accessor for event streams which should only be\nused when an explicit accessor is not available.</p>","commentFrom":"","inheritedFrom":"angular-mock.EventTarget.on","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.Events","inner":[]}],"parameters":{},"annotations":[]},"onAbort":{"name":"onAbort","qualifiedName":"angular/angular-mock.MockWindow.onAbort","comment":"<p>Stream of <code>abort</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Window.onAbort","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onabort"]}]},"onBlur":{"name":"onBlur","qualifiedName":"angular/angular-mock.MockWindow.onBlur","comment":"<p>Stream of <code>blur</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Window.onBlur","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onblur"]}]},"onChange":{"name":"onChange","qualifiedName":"angular/angular-mock.MockWindow.onChange","comment":"<p>Stream of <code>change</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Window.onChange","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onchange"]}]},"onClick":{"name":"onClick","qualifiedName":"angular/angular-mock.MockWindow.onClick","comment":"<p>Stream of <code>click</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Window.onClick","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onclick"]}]},"onContextMenu":{"name":"onContextMenu","qualifiedName":"angular/angular-mock.MockWindow.onContextMenu","comment":"<p>Stream of <code>contextmenu</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Window.onContextMenu","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.oncontextmenu"]}]},"onDoubleClick":{"name":"onDoubleClick","qualifiedName":"angular/angular-mock.MockWindow.onDoubleClick","comment":"<p>Stream of <code>doubleclick</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Window.onDoubleClick","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.ondblclick"]}]},"onDrag":{"name":"onDrag","qualifiedName":"angular/angular-mock.MockWindow.onDrag","comment":"<p>Stream of <code>drag</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Window.onDrag","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.ondrag"]}]},"onDragEnd":{"name":"onDragEnd","qualifiedName":"angular/angular-mock.MockWindow.onDragEnd","comment":"<p>Stream of <code>dragend</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Window.onDragEnd","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.ondragend"]}]},"onDragEnter":{"name":"onDragEnter","qualifiedName":"angular/angular-mock.MockWindow.onDragEnter","comment":"<p>Stream of <code>dragenter</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Window.onDragEnter","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.ondragenter"]}]},"onDragLeave":{"name":"onDragLeave","qualifiedName":"angular/angular-mock.MockWindow.onDragLeave","comment":"<p>Stream of <code>dragleave</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Window.onDragLeave","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.ondragleave"]}]},"onDragOver":{"name":"onDragOver","qualifiedName":"angular/angular-mock.MockWindow.onDragOver","comment":"<p>Stream of <code>dragover</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Window.onDragOver","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.ondragover"]}]},"onDragStart":{"name":"onDragStart","qualifiedName":"angular/angular-mock.MockWindow.onDragStart","comment":"<p>Stream of <code>dragstart</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Window.onDragStart","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.ondragstart"]}]},"onDrop":{"name":"onDrop","qualifiedName":"angular/angular-mock.MockWindow.onDrop","comment":"<p>Stream of <code>drop</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Window.onDrop","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.ondrop"]}]},"onError":{"name":"onError","qualifiedName":"angular/angular-mock.MockWindow.onError","comment":"<p>Stream of <code>error</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Window.onError","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onerror"]}]},"onFocus":{"name":"onFocus","qualifiedName":"angular/angular-mock.MockWindow.onFocus","comment":"<p>Stream of <code>focus</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Window.onFocus","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onfocus"]}]},"onInput":{"name":"onInput","qualifiedName":"angular/angular-mock.MockWindow.onInput","comment":"<p>Stream of <code>input</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Window.onInput","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.oninput"]}]},"onInvalid":{"name":"onInvalid","qualifiedName":"angular/angular-mock.MockWindow.onInvalid","comment":"<p>Stream of <code>invalid</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Window.onInvalid","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.oninvalid"]}]},"onKeyDown":{"name":"onKeyDown","qualifiedName":"angular/angular-mock.MockWindow.onKeyDown","comment":"<p>Stream of <code>keydown</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Window.onKeyDown","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.KeyboardEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onkeydown"]}]},"onKeyPress":{"name":"onKeyPress","qualifiedName":"angular/angular-mock.MockWindow.onKeyPress","comment":"<p>Stream of <code>keypress</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Window.onKeyPress","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.KeyboardEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onkeypress"]}]},"onKeyUp":{"name":"onKeyUp","qualifiedName":"angular/angular-mock.MockWindow.onKeyUp","comment":"<p>Stream of <code>keyup</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Window.onKeyUp","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.KeyboardEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onkeyup"]}]},"onLoad":{"name":"onLoad","qualifiedName":"angular/angular-mock.MockWindow.onLoad","comment":"<p>Stream of <code>load</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Window.onLoad","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onload"]}]},"onMouseDown":{"name":"onMouseDown","qualifiedName":"angular/angular-mock.MockWindow.onMouseDown","comment":"<p>Stream of <code>mousedown</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Window.onMouseDown","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onmousedown"]}]},"onMouseEnter":{"name":"onMouseEnter","qualifiedName":"angular/angular-mock.MockWindow.onMouseEnter","comment":"<p>Stream of <code>mouseenter</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Window.onMouseEnter","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onmouseenter"]},{"name":"metadata.Experimental","parameters":[]}]},"onMouseLeave":{"name":"onMouseLeave","qualifiedName":"angular/angular-mock.MockWindow.onMouseLeave","comment":"<p>Stream of <code>mouseleave</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Window.onMouseLeave","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onmouseleave"]},{"name":"metadata.Experimental","parameters":[]}]},"onMouseMove":{"name":"onMouseMove","qualifiedName":"angular/angular-mock.MockWindow.onMouseMove","comment":"<p>Stream of <code>mousemove</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Window.onMouseMove","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onmousemove"]}]},"onMouseOut":{"name":"onMouseOut","qualifiedName":"angular/angular-mock.MockWindow.onMouseOut","comment":"<p>Stream of <code>mouseout</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Window.onMouseOut","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onmouseout"]}]},"onMouseOver":{"name":"onMouseOver","qualifiedName":"angular/angular-mock.MockWindow.onMouseOver","comment":"<p>Stream of <code>mouseover</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Window.onMouseOver","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onmouseover"]}]},"onMouseUp":{"name":"onMouseUp","qualifiedName":"angular/angular-mock.MockWindow.onMouseUp","comment":"<p>Stream of <code>mouseup</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Window.onMouseUp","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onmouseup"]}]},"onMouseWheel":{"name":"onMouseWheel","qualifiedName":"angular/angular-mock.MockWindow.onMouseWheel","comment":"<p>Stream of <code>mousewheel</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Window.onMouseWheel","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.WheelEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onmousewheel"]}]},"onReset":{"name":"onReset","qualifiedName":"angular/angular-mock.MockWindow.onReset","comment":"<p>Stream of <code>reset</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Window.onReset","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onreset"]}]},"onScroll":{"name":"onScroll","qualifiedName":"angular/angular-mock.MockWindow.onScroll","comment":"<p>Stream of <code>scroll</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Window.onScroll","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onscroll"]}]},"onSelect":{"name":"onSelect","qualifiedName":"angular/angular-mock.MockWindow.onSelect","comment":"<p>Stream of <code>select</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Window.onSelect","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onselect"]}]},"onSubmit":{"name":"onSubmit","qualifiedName":"angular/angular-mock.MockWindow.onSubmit","comment":"<p>Stream of <code>submit</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Window.onSubmit","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onsubmit"]}]},"location":{"name":"location","qualifiedName":"angular/angular-mock.MockWindow.location","comment":"<p>The current location of this window.</p>\n<pre><code>Location currentLocation = window.location;\nprint(currentLocation.href); // 'http://www.example.com:80/'\n</code></pre>","commentFrom":"","inheritedFrom":"angular-mock.Window.location","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular/angular-mock.Location","inner":[]}],"parameters":{},"annotations":[]},"history":{"name":"history","qualifiedName":"angular/angular-mock.MockWindow.history","comment":"<p>The current session history for this window.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/history.html\">Session history and navigation specification</a>\nfrom WHATWG.</p></li></ul>","commentFrom":"","inheritedFrom":"angular-mock.WindowBase.history","static":false,"abstract":true,"constant":false,"return":[{"outer":"angular/angular-mock.HistoryBase","inner":[]}],"parameters":{},"annotations":[]},"closed":{"name":"closed","qualifiedName":"angular/angular-mock.MockWindow.closed","comment":"<p>Indicates whether this window has been closed.</p>\n<pre><code>print(window.closed); // 'false'\nwindow.close();\nprint(window.closed); // 'true'\n</code></pre>","commentFrom":"","inheritedFrom":"angular-mock.WindowBase.closed","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"opener":{"name":"opener","qualifiedName":"angular/angular-mock.MockWindow.opener","comment":"<p>A reference to the window that opened this one.</p>\n<pre><code>Window thisWindow = window;\nWindowBase otherWindow = thisWindow.open('http://www.example.com/', 'foo');\nprint(otherWindow.opener == thisWindow); // 'true'\n</code></pre>","commentFrom":"angular-mock.WindowBase.opener","inheritedFrom":"angular-mock.Window.opener","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular/angular-mock.WindowBase","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.opener"]}]},"parent":{"name":"parent","qualifiedName":"angular/angular-mock.MockWindow.parent","comment":"<p>A reference to the parent of this window.</p>\n<p>If this <a>angular/angular-mock.WindowBase</a> has no parent, <a>angular/angular-mock.MockWindow.parent</a> will return a reference to\nthe <a>angular/angular-mock.WindowBase</a> itself.</p>\n<pre><code>IFrameElement myIFrame = new IFrameElement();\nwindow.document.body.elements.add(myIFrame);\nprint(myIframe.contentWindow.parent == window) // 'true'\n\nprint(window.parent == window) // 'true'\n</code></pre>","commentFrom":"angular-mock.WindowBase.parent","inheritedFrom":"angular-mock.Window.parent","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular/angular-mock.WindowBase","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.parent"]}]},"top":{"name":"top","qualifiedName":"angular/angular-mock.MockWindow.top","comment":"<p>A reference to the topmost window in the window hierarchy.</p>\n<p>If this <a>angular/angular-mock.WindowBase</a> is the topmost <a>angular/angular-mock.WindowBase</a>, <a>angular/angular-mock.MockWindow.top</a> will return a\nreference to the <a>angular/angular-mock.WindowBase</a> itself.</p>\n<pre><code>// Add an IFrame to the current window.\nIFrameElement myIFrame = new IFrameElement();\nwindow.document.body.elements.add(myIFrame);\n\n// Add an IFrame inside of the other IFrame.\nIFrameElement innerIFrame = new IFrameElement();\nmyIFrame.elements.add(innerIFrame);\n\nprint(myIframe.contentWindow.top == window) // 'true'\nprint(innerIFrame.contentWindow.top == window) // 'true'\n\nprint(window.top == window) // 'true'\n</code></pre>","commentFrom":"angular-mock.WindowBase.top","inheritedFrom":"angular-mock.Window.top","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular/angular-mock.WindowBase","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.top"]}]},"onHashChange":{"name":"onHashChange","qualifiedName":"angular/angular-mock.MockWindow.onHashChange","comment":"<p>Stream of <code>hashchange</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Window.onHashChange","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onhashchange"]}]},"onMessage":{"name":"onMessage","qualifiedName":"angular/angular-mock.MockWindow.onMessage","comment":"<p>Stream of <code>message</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Window.onMessage","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MessageEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onmessage"]}]},"onOffline":{"name":"onOffline","qualifiedName":"angular/angular-mock.MockWindow.onOffline","comment":"<p>Stream of <code>offline</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Window.onOffline","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onoffline"]}]},"onOnline":{"name":"onOnline","qualifiedName":"angular/angular-mock.MockWindow.onOnline","comment":"<p>Stream of <code>online</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Window.onOnline","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.ononline"]}]},"onPopState":{"name":"onPopState","qualifiedName":"angular/angular-mock.MockWindow.onPopState","comment":"<p>Stream of <code>popstate</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Window.onPopState","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.PopStateEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onpopstate"]}]},"onResize":{"name":"onResize","qualifiedName":"angular/angular-mock.MockWindow.onResize","comment":"<p>Stream of <code>resize</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Window.onResize","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onresize"]}]},"onStorage":{"name":"onStorage","qualifiedName":"angular/angular-mock.MockWindow.onStorage","comment":"<p>Stream of <code>storage</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Window.onStorage","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.StorageEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onstorage"]}]},"onUnload":{"name":"onUnload","qualifiedName":"angular/angular-mock.MockWindow.onUnload","comment":"<p>Stream of <code>unload</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Window.onUnload","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onunload"]}]},"animationFrame":{"name":"animationFrame","qualifiedName":"angular/angular-mock.MockWindow.animationFrame","comment":"<p>Returns a Future that completes just before the window is about to\nrepaint so the user can draw an animation frame.</p>\n<p>If you need to later cancel this animation, use <a>angular/angular-mock.MockWindow.requestAnimationFrame</a>\ninstead.</p>\n<p>The <a>angular/dart-async.Future</a> completes to a timestamp that represents a floating\npoint value of the number of milliseconds that have elapsed since the page\nstarted to load (which is also the timestamp at this call to\nanimationFrame).</p>\n<p>Note: The code that runs when the future completes should call\n<a>angular/angular-mock.MockWindow.animationFrame</a> again for the animation to continue.</p>","commentFrom":"","inheritedFrom":"angular-mock.Window.animationFrame","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.num","inner":[]}]}],"parameters":{},"annotations":[]},"document":{"name":"document","qualifiedName":"angular/angular-mock.MockWindow.document","comment":"<p>The newest document in this window.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/browsers.html\">Loading web pages</a>\nfrom WHATWG.</p></li></ul>","commentFrom":"","inheritedFrom":"angular-mock.Window.document","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular/angular-mock.Document","inner":[]}],"parameters":{},"annotations":[]},"indexedDB":{"name":"indexedDB","qualifiedName":"angular/angular-mock.MockWindow.indexedDB","comment":"<p>Gets an instance of the Indexed DB factory to being using Indexed DB.</p>\n<p>Use <a>angular/dart-dom-indexed_db.IdbFactory.supported</a> to check if Indexed DB is supported on the\ncurrent platform.</p>","commentFrom":"","inheritedFrom":"angular-mock.Window.indexedDB","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-indexed_db.IdbFactory","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.SupportedBrowser","parameters":["Chrome","23.0"]},{"name":"metadata.SupportedBrowser","parameters":["Firefox","15.0"]},{"name":"metadata.SupportedBrowser","parameters":["Internet Explorer","10.0"]},{"name":"metadata.Experimental","parameters":[]}]},"console":{"name":"console","qualifiedName":"angular/angular-mock.MockWindow.console","comment":"<p>The debugging console for this window.</p>","commentFrom":"","inheritedFrom":"angular-mock.Window.console","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.Console","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.console"]}]},"self":{"name":"self","qualifiedName":"angular/angular-mock.MockWindow.self","comment":"<p>The current window.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window.self\">Window.self</a> from MDN.</p></li></ul>","commentFrom":"","inheritedFrom":"angular-mock.Window.self","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular/angular-mock.WindowBase","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.self"]}]},"window":{"name":"window","qualifiedName":"angular/angular-mock.MockWindow.window","comment":"<p>The current window.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window.window\">Window.window</a> from MDN.</p></li></ul>","commentFrom":"","inheritedFrom":"angular-mock.Window.window","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular/angular-mock.WindowBase","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.window"]}]},"onContentLoaded":{"name":"onContentLoaded","qualifiedName":"angular/angular-mock.MockWindow.onContentLoaded","comment":"<p>Stream of <code>contentloaded</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Window.onContentLoaded","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onDOMContentLoaded"]}]},"onDeviceMotion":{"name":"onDeviceMotion","qualifiedName":"angular/angular-mock.MockWindow.onDeviceMotion","comment":"<p>Stream of <code>devicemotion</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Window.onDeviceMotion","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.DeviceMotionEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.ondevicemotion"]},{"name":"metadata.Experimental","parameters":[]}]},"onDeviceOrientation":{"name":"onDeviceOrientation","qualifiedName":"angular/angular-mock.MockWindow.onDeviceOrientation","comment":"<p>Stream of <code>deviceorientation</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Window.onDeviceOrientation","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.DeviceOrientationEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.ondeviceorientation"]},{"name":"metadata.Experimental","parameters":[]}]},"onPageHide":{"name":"onPageHide","qualifiedName":"angular/angular-mock.MockWindow.onPageHide","comment":"<p>Stream of <code>pagehide</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Window.onPageHide","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onpagehide"]}]},"onPageShow":{"name":"onPageShow","qualifiedName":"angular/angular-mock.MockWindow.onPageShow","comment":"<p>Stream of <code>pageshow</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Window.onPageShow","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onpageshow"]}]},"onSearch":{"name":"onSearch","qualifiedName":"angular/angular-mock.MockWindow.onSearch","comment":"<p>Stream of <code>search</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Window.onSearch","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onsearch"]},{"name":"metadata.Experimental","parameters":[]}]},"onTouchCancel":{"name":"onTouchCancel","qualifiedName":"angular/angular-mock.MockWindow.onTouchCancel","comment":"<p>Stream of <code>touchcancel</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Window.onTouchCancel","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.TouchEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.ontouchcancel"]},{"name":"metadata.Experimental","parameters":[]}]},"onTouchEnd":{"name":"onTouchEnd","qualifiedName":"angular/angular-mock.MockWindow.onTouchEnd","comment":"<p>Stream of <code>touchend</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Window.onTouchEnd","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.TouchEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.ontouchend"]},{"name":"metadata.Experimental","parameters":[]}]},"onTouchMove":{"name":"onTouchMove","qualifiedName":"angular/angular-mock.MockWindow.onTouchMove","comment":"<p>Stream of <code>touchmove</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Window.onTouchMove","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.TouchEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.ontouchmove"]},{"name":"metadata.Experimental","parameters":[]}]},"onTouchStart":{"name":"onTouchStart","qualifiedName":"angular/angular-mock.MockWindow.onTouchStart","comment":"<p>Stream of <code>touchstart</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Window.onTouchStart","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.TouchEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.ontouchstart"]},{"name":"metadata.Experimental","parameters":[]}]},"onTransitionEnd":{"name":"onTransitionEnd","qualifiedName":"angular/angular-mock.MockWindow.onTransitionEnd","comment":"<p>Stream of <code>transitionend</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Window.onTransitionEnd","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.TransitionEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.ontransitionend"]}]},"onAnimationEnd":{"name":"onAnimationEnd","qualifiedName":"angular/angular-mock.MockWindow.onAnimationEnd","comment":"<p>Stream of <code>animationend</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Window.onAnimationEnd","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.AnimationEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onwebkitAnimationEnd"]},{"name":"metadata.Experimental","parameters":[]}]},"onAnimationIteration":{"name":"onAnimationIteration","qualifiedName":"angular/angular-mock.MockWindow.onAnimationIteration","comment":"<p>Stream of <code>animationiteration</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Window.onAnimationIteration","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.AnimationEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onwebkitAnimationIteration"]},{"name":"metadata.Experimental","parameters":[]}]},"onAnimationStart":{"name":"onAnimationStart","qualifiedName":"angular/angular-mock.MockWindow.onAnimationStart","comment":"<p>Stream of <code>animationstart</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Window.onAnimationStart","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.AnimationEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onwebkitAnimationStart"]},{"name":"metadata.Experimental","parameters":[]}]},"onBeforeUnload":{"name":"onBeforeUnload","qualifiedName":"angular/angular-mock.MockWindow.onBeforeUnload","comment":"<p>Stream of <code>beforeunload</code> events handled by this <a>angular/angular-mock.Window</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Window.onBeforeUnload","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular/angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.onbeforeunload"]}]},"scrollX":{"name":"scrollX","qualifiedName":"angular/angular-mock.MockWindow.scrollX","comment":"<p>The distance this window has been scrolled horizontally.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://www.w3.org/TR/cssom-view/#screen\">The Screen interface specification</a> from W3C.</p></li><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window.scrollX\">scrollX</a> from MDN.</p></li></ul>","commentFrom":"","inheritedFrom":"angular-mock.Window.scrollX","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"scrollY":{"name":"scrollY","qualifiedName":"angular/angular-mock.MockWindow.scrollY","comment":"<p>The distance this window has been scrolled vertically.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://www.w3.org/TR/cssom-view/#screen\">The Screen interface specification</a> from W3C.</p></li><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window.scrollY\">scrollY</a> from MDN.</p></li></ul>","commentFrom":"","inheritedFrom":"angular-mock.Window.scrollY","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"angular/angular-mock.MockWindow.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>angular/angular-mock.MockWindow.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>angular/angular-mock.MockWindow.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"dart-core.Object.==","inheritedFrom":"angular-mock.Interceptor.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"angular/angular-mock.MockWindow.toString","comment":"","commentFrom":"","inheritedFrom":"angular-mock.Window.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.toString"]}]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"angular/angular-mock.MockWindow.noSuchMethod","comment":"<p><a>angular/angular-mock.MockWindow.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>angular/angular-mock.MockWindow.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>angular/angular-mock.MockWindow.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>angular/angular-mock.MockWindow.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"dart-core.Object.noSuchMethod","inheritedFrom":"angular-mock.Interceptor.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"when":{"name":"when","qualifiedName":"angular/angular-mock.MockWindow.when","comment":"<p><a>angular/angular-mock.MockWindow.when</a> is used to create a new or extend an existing <a>angular/unittest-mock.Behavior</a>.\nA [CallMatcher] [filter] must be supplied, and the <a>angular/unittest-mock.Behavior</a>s for\nthat signature are returned (being created first if needed).</p>\n<p>Typical use case:</p>\n<pre><code>mock.when(callsTo(...)).alwaysReturn(...);\n</code></pre>","commentFrom":"","inheritedFrom":"angular-mock.Mock.when","static":false,"abstract":false,"constant":false,"return":[{"outer":"unittest-mock.Behavior","inner":[]}],"parameters":{"logFilter":{"name":"logFilter","optional":false,"named":false,"default":false,"type":[{"outer":"unittest-mock.CallMatcher","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"verifyZeroInteractions":{"name":"verifyZeroInteractions","qualifiedName":"angular/angular-mock.MockWindow.verifyZeroInteractions","comment":"<p><a>angular/angular-mock.MockWindow.verifyZeroInteractions</a> returns true if no calls were made</p>","commentFrom":"","inheritedFrom":"angular-mock.Mock.verifyZeroInteractions","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"getLogs":{"name":"getLogs","qualifiedName":"angular/angular-mock.MockWindow.getLogs","comment":"<p><a>angular/angular-mock.MockWindow.getLogs</a> extracts all calls from the call log that match the\n<a>angular/angular-mock.MockWindow.getLogs.logFilter</a>, and returns the matching list of <a>angular/unittest-mock.LogEntry</a>s. If\n<a>angular/angular-mock.MockWindow.getLogs.destructive</a> is false (the default) the matching calls are left\nin the log, else they are removed. Removal allows us to verify a\nset of interactions and then verify that there are no other\ninteractions left. <a>angular/angular-mock.MockWindow.getLogs.actionMatcher</a> can be used to further\nrestrict the returned logs based on the action the mock performed.\n<a>angular/angular-mock.MockWindow.getLogs.logFilter</a> can be a <a>angular/unittest-mock.CallMatcher</a> or a predicate function that\ntakes a <a>angular/unittest-mock.LogEntry</a> and returns a bool.</p>\n<p>Typical usage:</p>\n<pre><code>getLogs(callsTo(...)).verify(...);\n</code></pre>","commentFrom":"","inheritedFrom":"angular-mock.Mock.getLogs","static":false,"abstract":false,"constant":false,"return":[{"outer":"unittest-mock.LogEntryList","inner":[]}],"parameters":{"logFilter":{"name":"logFilter","optional":true,"named":false,"default":false,"type":[{"outer":"unittest-mock.CallMatcher","inner":[]}],"value":"null","annotations":[]},"actionMatcher":{"name":"actionMatcher","optional":true,"named":false,"default":false,"type":[{"outer":"unittest-matcher.Matcher","inner":[]}],"value":"null","annotations":[]},"destructive":{"name":"destructive","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]}},"annotations":[]},"calls":{"name":"calls","qualifiedName":"angular/angular-mock.MockWindow.calls","comment":"<p>Useful shorthand method that creates a <a>angular/unittest-mock.CallMatcher</a> from its arguments\nand then calls <a>angular/angular-mock.MockWindow.getLogs</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Mock.calls","static":false,"abstract":false,"constant":false,"return":[{"outer":"unittest-mock.LogEntryList","inner":[]}],"parameters":{"method":{"name":"method","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"arg0":{"name":"arg0","optional":true,"named":false,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"ConstructedConstant(_Sentinel())","annotations":[]},"arg1":{"name":"arg1","optional":true,"named":false,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"ConstructedConstant(_Sentinel())","annotations":[]},"arg2":{"name":"arg2","optional":true,"named":false,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"ConstructedConstant(_Sentinel())","annotations":[]},"arg3":{"name":"arg3","optional":true,"named":false,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"ConstructedConstant(_Sentinel())","annotations":[]},"arg4":{"name":"arg4","optional":true,"named":false,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"ConstructedConstant(_Sentinel())","annotations":[]},"arg5":{"name":"arg5","optional":true,"named":false,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"ConstructedConstant(_Sentinel())","annotations":[]},"arg6":{"name":"arg6","optional":true,"named":false,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"ConstructedConstant(_Sentinel())","annotations":[]},"arg7":{"name":"arg7","optional":true,"named":false,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"ConstructedConstant(_Sentinel())","annotations":[]},"arg8":{"name":"arg8","optional":true,"named":false,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"ConstructedConstant(_Sentinel())","annotations":[]},"arg9":{"name":"arg9","optional":true,"named":false,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"ConstructedConstant(_Sentinel())","annotations":[]}},"annotations":[]},"resetBehavior":{"name":"resetBehavior","qualifiedName":"angular/angular-mock.MockWindow.resetBehavior","comment":"<p>Clear the behaviors for the Mock.</p>","commentFrom":"","inheritedFrom":"angular-mock.Mock.resetBehavior","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"clearLogs":{"name":"clearLogs","qualifiedName":"angular/angular-mock.MockWindow.clearLogs","comment":"<p>Clear the logs for the Mock.</p>","commentFrom":"","inheritedFrom":"angular-mock.Mock.clearLogs","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"reset":{"name":"reset","qualifiedName":"angular/angular-mock.MockWindow.reset","comment":"<p>Clear both logs and behavior.</p>","commentFrom":"","inheritedFrom":"angular-mock.Mock.reset","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"addEventListener":{"name":"addEventListener","qualifiedName":"angular/angular-mock.MockWindow.addEventListener","comment":"","commentFrom":"","inheritedFrom":"angular-mock.EventTarget.addEventListener","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"type":{"name":"type","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"listener":{"name":"listener","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.EventListener","inner":[]}],"value":"null","annotations":[]},"useCapture":{"name":"useCapture","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["EventTarget.addEventListener"]}]},"dispatchEvent":{"name":"dispatchEvent","qualifiedName":"angular/angular-mock.MockWindow.dispatchEvent","comment":"","commentFrom":"","inheritedFrom":"angular-mock.EventTarget.dispatchEvent","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"event":{"name":"event","optional":false,"named":false,"default":false,"type":[{"outer":"angular/angular-mock.Event","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["EventTarget.dispatchEvent"]}]},"removeEventListener":{"name":"removeEventListener","qualifiedName":"angular/angular-mock.MockWindow.removeEventListener","comment":"","commentFrom":"","inheritedFrom":"angular-mock.EventTarget.removeEventListener","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"type":{"name":"type","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"listener":{"name":"listener","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.EventListener","inner":[]}],"value":"null","annotations":[]},"useCapture":{"name":"useCapture","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["EventTarget.removeEventListener"]}]},"atob":{"name":"atob","qualifiedName":"angular/angular-mock.MockWindow.atob","comment":"","commentFrom":"","inheritedFrom":"angular-mock.Window.atob","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"string":{"name":"string","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Window.atob"]}]},"btoa":{"name":"btoa","qualifiedName":"angular/angular-mock.MockWindow.btoa","comment":"","commentFrom":"","inheritedFrom":"angular-mock.Window.btoa","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"string":{"name":"string","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Window.btoa"]}]},"close":{"name":"close","qualifiedName":"angular/angular-mock.MockWindow.close","comment":"<p>Closes the window.</p>\n<p>This method should only succeed if the <a>angular/angular-mock.WindowBase</a> object is\n<strong>script-closeable</strong> and the window calling <a>angular/angular-mock.MockWindow.close</a> is allowed to navigate\nthe window.</p>\n<p>A window is script-closeable if it is either a window\nthat was opened by another window, or if it is a window with only one\ndocument in its history.</p>\n<p>A window might not be allowed to navigate, and therefore close, another\nwindow due to browser security features.</p>\n<pre><code>var other = window.open('http://www.example.com', 'foo');\n// Closes other window, as it is script-closeable.\nother.close();\nprint(other.closed()); // 'true'\n\nwindow.location('http://www.mysite.com', 'foo');\n// Does not close this window, as the history has changed.\nwindow.close();\nprint(window.closed()); // 'false'\n</code></pre>\n<p>See also:</p><ul><li><a href=\"http://www.w3.org/TR/html5/browsers.html#dom-window-close\">Window close discussion</a> from the W3C</li></ul>","commentFrom":"angular-mock.WindowBase.close","inheritedFrom":"angular-mock.Window.close","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.close"]}]},"postMessage":{"name":"postMessage","qualifiedName":"angular/angular-mock.MockWindow.postMessage","comment":"<p>Sends a cross-origin message.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window.postMessage\">window.postMessage</a> from\nMDN.</p></li><li>\n<p><a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/web-messaging.html\">Cross-document messaging</a>\nfrom WHATWG.</p></li></ul>","commentFrom":"angular-mock.WindowBase.postMessage","inheritedFrom":"angular-mock.Window.postMessage","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"message":{"name":"message","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"targetOrigin":{"name":"targetOrigin","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"messagePorts":{"name":"messagePorts","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Window.postMessage"]}]},"open":{"name":"open","qualifiedName":"angular/angular-mock.MockWindow.open","comment":"<p>Opens a new window.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window.open\">Window.open</a> from MDN.</p></li><li>\n<p><a href=\"http://docs.webplatform.org/wiki/dom/methods/open\">Window open</a> from WebPlatform.org.</p></li></ul>","commentFrom":"","inheritedFrom":"angular-mock.Window.open","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular/angular-mock.WindowBase","inner":[]}],"parameters":{"url":{"name":"url","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"options":{"name":"options","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"requestAnimationFrame":{"name":"requestAnimationFrame","qualifiedName":"angular/angular-mock.MockWindow.requestAnimationFrame","comment":"<p>Called to draw an animation frame and then request the window to repaint\nafter <a>angular/angular-mock.MockWindow.requestAnimationFrame.callback</a> has finished (creating the animation).</p>\n<p>Use this method only if you need to later call <a>angular/angular-mock.MockWindow.cancelAnimationFrame</a>. If\nnot, the preferred Dart idiom is to set animation frames by calling\n<a>angular/angular-mock.MockWindow.animationFrame</a>, which returns a Future.</p>\n<p>Returns a non-zero valued integer to represent the request id for this\nrequest. This value only needs to be saved if you intend to call\n<a>angular/angular-mock.MockWindow.cancelAnimationFrame</a> so you can specify the particular animation to\ncancel.</p>\n<p>Note: The supplied <a>angular/angular-mock.MockWindow.requestAnimationFrame.callback</a> needs to call <a>angular/angular-mock.MockWindow.requestAnimationFrame</a> again\nfor the animation to continue.</p>","commentFrom":"","inheritedFrom":"angular-mock.Window.requestAnimationFrame","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"callback":{"name":"callback","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.RequestAnimationFrameCallback","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Window.requestAnimationFrame"]}]},"cancelAnimationFrame":{"name":"cancelAnimationFrame","qualifiedName":"angular/angular-mock.MockWindow.cancelAnimationFrame","comment":"<p>Cancels an animation frame request.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window.cancelAnimationFrame\">Window.cancelAnimationFrame</a> from MDN.</p></li></ul>","commentFrom":"","inheritedFrom":"angular-mock.Window.cancelAnimationFrame","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"id":{"name":"id","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"requestFileSystem":{"name":"requestFileSystem","qualifiedName":"angular/angular-mock.MockWindow.requestFileSystem","comment":"<p>Access a sandboxed file system of the specified <code>size</code>. If <code>persistent</code> is\ntrue, the application will request permission from the user to create\nlasting storage. This storage cannot be freed without the user's\npermission. Returns a <a>angular/dart-async.Future</a> whose value stores a reference to the\nsandboxed file system for use. Because the file system is sandboxed,\napplications cannot access file systems created in other web pages.</p>","commentFrom":"","inheritedFrom":"angular-mock.Window.requestFileSystem","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-dom-html.FileSystem","inner":[]}]}],"parameters":{"size":{"name":"size","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]},"persistent":{"name":"persistent","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]}},"annotations":[]},"convertPointFromNodeToPage":{"name":"convertPointFromNodeToPage","qualifiedName":"angular/angular-mock.MockWindow.convertPointFromNodeToPage","comment":"<p>Converts a point from node coordinates to this window's coordinates.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.apple.com/library/safari/documentation/DataManagement/Reference/DOMWindowAdditionsReference/DOMWindowAdditions/DOMWindowAdditions.html#//apple_ref/javascript/instm/DOMWindow/webkitConvertPointFromNodeToPage\">webkitConvertPointFromPageToNode</a>\nfrom Safari Development Library.</p></li></ul>","commentFrom":"","inheritedFrom":"angular-mock.Window.convertPointFromNodeToPage","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-math.Point","inner":[]}],"parameters":{"node":{"name":"node","optional":false,"named":false,"default":false,"type":[{"outer":"angular/angular-mock.Node","inner":[]}],"value":"null","annotations":[]},"point":{"name":"point","optional":false,"named":false,"default":false,"type":[{"outer":"dart-math.Point","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Window.convertPointFromNodeToPage"]},{"name":"metadata.SupportedBrowser","parameters":["Chrome"]},{"name":"metadata.SupportedBrowser","parameters":["Safari"]},{"name":"metadata.Experimental","parameters":[]}]},"convertPointFromPageToNode":{"name":"convertPointFromPageToNode","qualifiedName":"angular/angular-mock.MockWindow.convertPointFromPageToNode","comment":"<p>Converts a point from this window's coordinates to node coordinates.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.apple.com/library/safari/documentation/DataManagement/Reference/DOMWindowAdditionsReference/DOMWindowAdditions/DOMWindowAdditions.html#//apple_ref/javascript/instm/DOMWindow/webkitConvertPointFromPageToNode\">webkitConvertPointFromPageToNode</a>\nfrom Safari Development Library.</p></li></ul>","commentFrom":"","inheritedFrom":"angular-mock.Window.convertPointFromPageToNode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-math.Point","inner":[]}],"parameters":{"node":{"name":"node","optional":false,"named":false,"default":false,"type":[{"outer":"angular/angular-mock.Node","inner":[]}],"value":"null","annotations":[]},"point":{"name":"point","optional":false,"named":false,"default":false,"type":[{"outer":"dart-math.Point","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Window.convertPointFromPageToNode"]},{"name":"metadata.SupportedBrowser","parameters":["Chrome"]},{"name":"metadata.SupportedBrowser","parameters":["Safari"]},{"name":"metadata.Experimental","parameters":[]}]},"alert":{"name":"alert","qualifiedName":"angular/angular-mock.MockWindow.alert","comment":"<p>Displays a modal alert to the user.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#user-prompts\">User prompts</a>\nfrom WHATWG.</p></li></ul>","commentFrom":"","inheritedFrom":"angular-mock.Window.alert","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"message":{"name":"message","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Window.alert"]}]},"confirm":{"name":"confirm","qualifiedName":"angular/angular-mock.MockWindow.confirm","comment":"<p>Displays a modal OK/Cancel prompt to the user.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#user-prompts\">User prompts</a>\nfrom WHATWG.</p></li></ul>","commentFrom":"","inheritedFrom":"angular-mock.Window.confirm","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"message":{"name":"message","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Window.confirm"]}]},"find":{"name":"find","qualifiedName":"angular/angular-mock.MockWindow.find","comment":"<p>Finds text in this window.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window.find\">Window.find</a> from MDN.</p></li></ul>","commentFrom":"","inheritedFrom":"angular-mock.Window.find","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"string":{"name":"string","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"caseSensitive":{"name":"caseSensitive","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"null","annotations":[]},"backwards":{"name":"backwards","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"null","annotations":[]},"wrap":{"name":"wrap","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"null","annotations":[]},"wholeWord":{"name":"wholeWord","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"null","annotations":[]},"searchInFrames":{"name":"searchInFrames","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"null","annotations":[]},"showDialog":{"name":"showDialog","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Window.find"]},{"name":"metadata.Experimental","parameters":[]}]},"getMatchedCssRules":{"name":"getMatchedCssRules","qualifiedName":"angular/angular-mock.MockWindow.getMatchedCssRules","comment":"<p>Returns all CSS rules that apply to the element's pseudo-element.</p>","commentFrom":"","inheritedFrom":"angular-mock.Window.getMatchedCssRules","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-dom-html.CssRule","inner":[]}]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Element","inner":[]}],"value":"null","annotations":[]},"pseudoElement":{"name":"pseudoElement","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Window.getMatchedCSSRules"]},{"name":"metadata.Experimental","parameters":[]}]},"getSelection":{"name":"getSelection","qualifiedName":"angular/angular-mock.MockWindow.getSelection","comment":"<p>Returns the currently selected text.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window.getSelection\">Window.getSelection</a>\nfrom MDN.</p></li></ul>","commentFrom":"","inheritedFrom":"angular-mock.Window.getSelection","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.Selection","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.getSelection"]}]},"matchMedia":{"name":"matchMedia","qualifiedName":"angular/angular-mock.MockWindow.matchMedia","comment":"<p>Returns a list of media queries for the given query string.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Testing_media_queries\">Testing media queries</a>\nfrom MDN.</p></li><li>\n<p><a href=\"http://www.w3.org/TR/cssom-view/#the-mediaquerylist-interface\">The MediaQueryList specification</a> from W3C.</p></li></ul>","commentFrom":"","inheritedFrom":"angular-mock.Window.matchMedia","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.MediaQueryList","inner":[]}],"parameters":{"query":{"name":"query","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Window.matchMedia"]}]},"moveBy":{"name":"moveBy","qualifiedName":"angular/angular-mock.MockWindow.moveBy","comment":"<p>Moves this window.</p>\n<p>x and y can be negative.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window.moveBy\">Window.moveBy</a> from MDN.</p></li><li>\n<p><a href=\"http://dev.w3.org/csswg/cssom-view/#dom-window-moveby\">Window.moveBy</a> from W3C.</p></li></ul>","commentFrom":"","inheritedFrom":"angular-mock.Window.moveBy","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"x":{"name":"x","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"y":{"name":"y","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Window.moveBy"]}]},"openDatabase":{"name":"openDatabase","qualifiedName":"angular/angular-mock.MockWindow.openDatabase","comment":"<p><em>Deprecated.</em></p>","commentFrom":"","inheritedFrom":"angular-mock.Window.openDatabase","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-web_sql.SqlDatabase","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"version":{"name":"version","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"displayName":{"name":"displayName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"estimatedSize":{"name":"estimatedSize","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]},"creationCallback":{"name":"creationCallback","optional":true,"named":false,"default":false,"type":[{"outer":"dart-dom-html.DatabaseCallback","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Window.openDatabase"]},{"name":"metadata.SupportedBrowser","parameters":["Chrome"]},{"name":"metadata.SupportedBrowser","parameters":["Safari"]},{"name":"metadata.Experimental","parameters":[]},{"name":"metadata.Experimental","parameters":[]}]},"print":{"name":"print","qualifiedName":"angular/angular-mock.MockWindow.print","comment":"<p>Opens the print dialog for this window.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window.print\">Window.print</a> from MDN.</p></li></ul>","commentFrom":"","inheritedFrom":"angular-mock.Window.print","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.print"]}]},"resizeBy":{"name":"resizeBy","qualifiedName":"angular/angular-mock.MockWindow.resizeBy","comment":"<p>Resizes this window by an offset.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://docs.webplatform.org/wiki/dom/methods/resizeBy\">Window resizeBy</a>\nfrom WebPlatform.org.</p></li></ul>","commentFrom":"","inheritedFrom":"angular-mock.Window.resizeBy","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"x":{"name":"x","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"y":{"name":"y","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Window.resizeBy"]}]},"resizeTo":{"name":"resizeTo","qualifiedName":"angular/angular-mock.MockWindow.resizeTo","comment":"<p>Resizes this window to a specific width and height.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://docs.webplatform.org/wiki/dom/methods/resizeTo\">Window resizeTo</a>\nfrom WebPlatform.org.</p></li></ul>","commentFrom":"","inheritedFrom":"angular-mock.Window.resizeTo","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"width":{"name":"width","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"height":{"name":"height","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Window.resizeTo"]}]},"scroll":{"name":"scroll","qualifiedName":"angular/angular-mock.MockWindow.scroll","comment":"<p>Scrolls the page horizontally and vertically to a specific point.</p>\n<p>This method is identical to <a>angular/angular-mock.MockWindow.scrollTo</a>.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://docs.webplatform.org/wiki/dom/methods/scroll\">Window scroll</a>\nfrom WebPlatform.org.</p></li></ul>","commentFrom":"","inheritedFrom":"angular-mock.Window.scroll","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"x":{"name":"x","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]},"y":{"name":"y","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Window.scroll"]}]},"scrollBy":{"name":"scrollBy","qualifiedName":"angular/angular-mock.MockWindow.scrollBy","comment":"<p>Scrolls the page horizontally and vertically by an offset.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://docs.webplatform.org/wiki/dom/methods/scrollBy\">Window scrollBy</a>\nfrom WebPlatform.org.</p></li></ul>","commentFrom":"","inheritedFrom":"angular-mock.Window.scrollBy","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"x":{"name":"x","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]},"y":{"name":"y","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Window.scrollBy"]}]},"scrollTo":{"name":"scrollTo","qualifiedName":"angular/angular-mock.MockWindow.scrollTo","comment":"<p>Scrolls the page horizontally and vertically to a specific point.</p>\n<p>This method is identical to <a>angular/angular-mock.MockWindow.scroll</a>.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://docs.webplatform.org/wiki/dom/methods/scrollTo\">Window scrollTo</a>\nfrom WebPlatform.org.</p></li></ul>","commentFrom":"","inheritedFrom":"angular-mock.Window.scrollTo","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"x":{"name":"x","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]},"y":{"name":"y","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Window.scrollTo"]}]},"showModalDialog":{"name":"showModalDialog","qualifiedName":"angular/angular-mock.MockWindow.showModalDialog","comment":"<p>Opens a new page as a modal dialog.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://www.w3.org/html/wg/drafts/html/master/webappapis.html#dialogs-implemented-using-separate-documents\">Dialogs implemented using separate documents</a>\nfrom W3C.</p></li></ul>","commentFrom":"","inheritedFrom":"angular-mock.Window.showModalDialog","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Object","inner":[]}],"parameters":{"url":{"name":"url","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"dialogArgs":{"name":"dialogArgs","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":"null","annotations":[]},"featureArgs":{"name":"featureArgs","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Window.showModalDialog"]}]},"stop":{"name":"stop","qualifiedName":"angular/angular-mock.MockWindow.stop","comment":"<p>Stops the window from loading.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://www.w3.org/html/wg/drafts/html/master/browsers.html#the-window-object\">The Window object</a>\nfrom W3C.</p></li></ul>","commentFrom":"","inheritedFrom":"angular-mock.Window.stop","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Window.stop"]}]},"resolveLocalFileSystemUrl":{"name":"resolveLocalFileSystemUrl","qualifiedName":"angular/angular-mock.MockWindow.resolveLocalFileSystemUrl","comment":"<p>Asynchronously retrieves a local filesystem entry.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://www.w3.org/TR/file-system-api/#obtaining-access-to-file-system-entry-points\">Obtaining access to file system entry points</a>\nfrom W3C.</p></li></ul>","commentFrom":"","inheritedFrom":"angular-mock.Window.resolveLocalFileSystemUrl","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-dom-html.Entry","inner":[]}]}],"parameters":{"url":{"name":"url","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Window.webkitResolveLocalFileSystemURL"]},{"name":"metadata.SupportedBrowser","parameters":["Chrome"]},{"name":"metadata.Experimental","parameters":[]}]},"moveTo":{"name":"moveTo","qualifiedName":"angular/angular-mock.MockWindow.moveTo","comment":"<p>Moves this window to a specific position.</p>\n<p>x and y can be negative.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window.moveTo\">Window.moveTo</a> from MDN.</p></li><li>\n<p><a href=\"http://dev.w3.org/csswg/cssom-view/#dom-window-moveto\">Window.moveTo</a> from W3C.</p></li></ul>","commentFrom":"","inheritedFrom":"angular-mock.Window.moveTo","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"p":{"name":"p","optional":false,"named":false,"default":false,"type":[{"outer":"dart-math.Point","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[{"name":"dart-core._Proxy","parameters":[]}],"generics":{}}