{"name":"WatchRecord","qualifiedName":"angular/angular-watch_group.WatchRecord","comment":"<p><a>angular/angular-watch_group.WatchRecord</a> API which allows changing what object is being watched and\nmanually triggering the checking.</p>","isAbstract":true,"superclass":"angular/angular-watch_group.Record","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{"object=":{"name":"object=","qualifiedName":"angular/angular-watch_group.WatchRecord.object=","comment":"<p>Set a new object for checking</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"getters":{},"constructors":{},"operators":{},"methods":{"check":{"name":"check","qualifiedName":"angular/angular-watch_group.WatchRecord.check","comment":"<p>Check to see if the field on the object has changed. Returns true if\nchange has been detected.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"remove":{"name":"remove","qualifiedName":"angular/angular-watch_group.WatchRecord.remove","comment":"","commentFrom":"angular-watch_group.WatchRecord.remove","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"angular/angular-watch_group.WatchRecord.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>angular/angular-watch_group.WatchRecord.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"angular/angular-watch_group.WatchRecord.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"object":{"name":"object","qualifiedName":"angular/angular-watch_group.WatchRecord.object","comment":"<p>The observed object.</p>","commentFrom":"","inheritedFrom":"angular-watch_group.Record.object","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Object","inner":[]}],"parameters":{},"annotations":[]},"field":{"name":"field","qualifiedName":"angular/angular-watch_group.WatchRecord.field","comment":"<p>The field which is being watched:\n  - <em>name</em> - Name of the field to watch.\n  - <em></em> - Watch all items in an array.\n  - <em>{}</em> - Watch all items in a Map.\n  - <em>.</em> - Watch the actual object identity.</p>","commentFrom":"","inheritedFrom":"angular-watch_group.Record.field","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"handler":{"name":"handler","qualifiedName":"angular/angular-watch_group.WatchRecord.handler","comment":"<p>An application provided object which contains the specific logic which\nneeds to be applied when the change is detected. The handler is opaque to\nthe ChangeDetector and as such can be anything the application desires.</p>","commentFrom":"","inheritedFrom":"angular-watch_group.Record.handler","static":false,"abstract":true,"constant":false,"return":[{"outer":"angular/angular-watch_group._Handler","inner":[]}],"parameters":{},"annotations":[]},"currentValue":{"name":"currentValue","qualifiedName":"angular/angular-watch_group.WatchRecord.currentValue","comment":"<p>Current value of the <a>angular/angular-watch_group.WatchRecord.field</a> on the <a>angular/angular-watch_group.WatchRecord.object</a></p>","commentFrom":"","inheritedFrom":"angular-watch_group.Record.currentValue","static":false,"abstract":true,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"previousValue":{"name":"previousValue","qualifiedName":"angular/angular-watch_group.WatchRecord.previousValue","comment":"<p>Previous value of the <a>angular/angular-watch_group.WatchRecord.field</a> on the <a>angular/angular-watch_group.WatchRecord.object</a></p>","commentFrom":"","inheritedFrom":"angular-watch_group.Record.previousValue","static":false,"abstract":true,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"angular/angular-watch_group.WatchRecord.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>angular/angular-watch_group.WatchRecord.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>angular/angular-watch_group.WatchRecord.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"angular/angular-watch_group.WatchRecord.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"angular/angular-watch_group.WatchRecord.noSuchMethod","comment":"<p><a>angular/angular-watch_group.WatchRecord.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>angular/angular-watch_group.WatchRecord.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>angular/angular-watch_group.WatchRecord.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>angular/angular-watch_group.WatchRecord.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{"H":{"name":"H","type":"dart.core.Object"}}}