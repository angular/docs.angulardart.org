{"name":"Injector","qualifiedName":"angular/angular.Injector","comment":"","isAbstract":true,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{"allowImplicitInjection":{"name":"allowImplicitInjection","qualifiedName":"angular/angular.Injector.allowImplicitInjection","comment":"<p>Whether the injector allows injecting a type to which no <a>angular/di-provider.Provider</a> is\nbound.  Note that this setting only matters for the root injector.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"name":{"name":"name","qualifiedName":"angular/angular.Injector.name","comment":"<p>Name of the injector or null if none was given.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"parent":{"name":"parent","qualifiedName":"angular/angular.Injector.parent","comment":"<p>The parent injector or null if root.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"angular/angular.Injector","inner":[]}],"parameters":{},"annotations":[]},"root":{"name":"root","qualifiedName":"angular/angular.Injector.root","comment":"<p>The root injector.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"angular/angular.Injector","inner":[]}],"parameters":{},"annotations":[]},"types":{"name":"types","qualifiedName":"angular/angular.Injector.types","comment":"<p><a>dart-core.Type</a>s of the <a>angular/di-provider.Provider</a>s explicitly bound to the injector or an ancestor.\nIf the root injector sets <a>angular/angular.Injector.allowImplicitInjection</a> to false, then this\nis simply all the types that the injector can return.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Set","inner":[{"outer":"dart-core.Type","inner":[]}]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{},"methods":{"createChild":{"name":"createChild","qualifiedName":"angular/angular.Injector.createChild","comment":"<p>Creates a child injector.</p>\n<p><a>angular/angular.Injector.createChild.modules</a> overrides bindings of the parent.</p>\n<p><a>angular/angular.Injector.createChild.forceNewInstances</a> is a list, each element of which is a <a>angular/angular.Key</a> or a\n<a>dart-core.Type</a> (for convenience when no annotation is needed).  For each element K,\nthe child injector will have a new binding to the same <a>angular/di-provider.Provider</a> P that\nthe parent injector would have provided, that is, P is the <a>angular/di-provider.Provider</a> of\nthe nearest ancestor of the parent injector that binds K.  Note that this\ndiffers from how <a>angular/angular.Injector.get</a> finds P in that visibility is not taken into\naccount.</p>\n<p>Thus, if a descendant D of the child requests an instance for K, the child\nwill mask any binding for K made by a proper ancestor injector, provided\nthat P's visibility reveals the child's binding to D.\nFor example, if the child has no proper descendant and P's visibility\ndeems that the child is visible to the child itself, then the first\nrequest for the child to get an instance for K will trigger the creation of\na new instance.</p>\n<p><a>angular/angular.Injector.createChild.name</a> is used for error reporting.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"angular/angular.Injector","inner":[]}],"parameters":{"modules":{"name":"modules","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"angular/angular.Module","inner":[]}]}],"value":null,"annotations":[]},"forceNewInstances":{"name":"forceNewInstances","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.List","inner":[]}],"value":null,"annotations":[]},"name":{"name":"name","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"get":{"name":"get","qualifiedName":"angular/angular.Injector.get","comment":"<p>Returns the instance associated with the given key (i.e. <a>angular/angular.Injector.get.type</a> and\n<a>angular/angular.Injector.get.annotation</a>) according to the following rules.</p>\n<p>Let I be the nearest ancestor injector (possibly this one) that both</p><ul><li>binds some <a>angular/di-provider.Provider</a> P to key and</li><li>P's visibility declares that I is visible to this injector.</li></ul>\n<p>If there is no such I, then</p><ul><li>\n<p>if <a>angular/angular.Injector.allowImplicitInjection</a> is true for the root injector, let I be the\n  root injector and P be a default <a>angular/di-provider.Provider</a> for <a>angular/angular.Injector.get.type</a>.</p></li><li>\n<p>if <a>angular/angular.Injector.allowImplicitInjection</a> is false for the root injector, throw\n  <a>angular/angular.NoProviderError</a>.</p></li></ul>\n<p>Once I and P are found, if I already created an instance for the key,\nit is returned.  Otherwise, P is used to create an instance, using I\nas an <a>angular/di-provider.ObjectFactory</a> to resolve the necessary dependencies.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"type":{"name":"type","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Type","inner":[]}],"value":null,"annotations":[]},"annotation":{"name":"annotation","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.Type","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getByKey":{"name":"getByKey","qualifiedName":"angular/angular.Injector.getByKey","comment":"<p>See <a>angular/angular.Injector.get</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"key":{"name":"key","optional":false,"named":false,"default":false,"type":[{"outer":"angular/angular.Key","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"angular/angular.Injector.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>angular/angular.Injector.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"angular/angular.Injector.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"angular/angular.Injector.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>angular/angular.Injector.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>angular/angular.Injector.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"angular/angular.Injector.noSuchMethod","comment":"<p><a>angular/angular.Injector.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>angular/angular.Injector.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>angular/angular.Injector.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>angular/angular.Injector.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"angular/angular.Injector.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}