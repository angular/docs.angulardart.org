{"name":"NgClassOddDirective","qualifiedName":"angular/angular-directive.NgClassOddDirective","comment":"<p>The <code>ngClassOdd</code> and <code>ngClassEven</code> directives work exactly as\n{@link ng.directive:ngClass ngClass}, except it works in\nconjunction with <code>ngRepeat</code> and takes affect only on odd (even) rows.</p>\n<p>This directive can be applied only within a scope of an <code>ngRepeat</code>.</p>\n<h2>Examples</h2>\n<p>index.html:</p>\n<pre><code>&lt;li ng-repeat=\"name in ['John', 'Mary', 'Cate', 'Suz']\"&gt;\n  &lt;span ng-class-odd=\"'odd'\" ng-class-even=\"'even'\"&gt;\n    {{name}}\n  &lt;/span&gt;\n&lt;/li&gt;\n</code></pre>\n<p>style.css:</p>\n<pre><code>.odd {\n  color: red;\n}\n.even {\n  color: blue;\n}\n</code></pre>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"angular/angular-directive.NgClassOddDirective.NgClassOddDirective-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Element","inner":[]}],"value":"null","annotations":[]},"scope":{"name":"scope","optional":false,"named":false,"default":false,"type":[{"outer":"angular-core.Scope","inner":[]}],"value":"null","annotations":[]},"attrs":{"name":"attrs","optional":false,"named":false,"default":false,"type":[{"outer":"angular-core-dom.NodeAttrs","inner":[]}],"value":"null","annotations":[]},"parser":{"name":"parser","optional":false,"named":false,"default":false,"type":[{"outer":"angular-core.AstParser","inner":[]}],"value":"null","annotations":[]},"animate":{"name":"animate","optional":false,"named":false,"default":false,"type":[{"outer":"angular-core-dom.NgAnimate","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"operators":{},"methods":{}},"inheritedMethods":{"setters":{"valueExpression=":{"name":"valueExpression=","qualifiedName":"angular/angular-directive.NgClassOddDirective.valueExpression=","comment":"","commentFrom":"","inheritedFrom":"angular-directive._NgClassBase.valueExpression=","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"currentExpression":{"name":"currentExpression","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"angular/angular-directive.NgClassOddDirective.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>angular/angular-directive.NgClassOddDirective.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"angular/angular-directive.NgClassOddDirective.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"angular/angular-directive.NgClassOddDirective.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>angular/angular-directive.NgClassOddDirective.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>angular/angular-directive.NgClassOddDirective.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"angular/angular-directive.NgClassOddDirective.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"angular/angular-directive.NgClassOddDirective.noSuchMethod","comment":"<p><a>angular/angular-directive.NgClassOddDirective.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>angular/angular-directive.NgClassOddDirective.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>angular/angular-directive.NgClassOddDirective.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>angular/angular-directive.NgClassOddDirective.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[{"name":"angular-core.NgDirective","parameters":[]}],"generics":{}}