{"name":"NgIfDirective","qualifiedName":"angular/angular.NgIfDirective","comment":"<p>The <code>ng-if</code> directive compliments the <code>ng-unless</code> (provided by\nNgUnlessAttrDirective) directive.</p>\n<p>directive based on the <strong>truthy/falsy</strong> value of the provided expression.\nSpecifically, if the expression assigned to <code>ng-if</code> evaluates to a <code>false</code>\nvalue, then the subtree is removed from the DOM.  Otherwise, <em>a clone of the\nsubtree</em> is reinserted into the DOM.  This clone is created from the compiled\nstate.  As such, modifications made to the element after compilation (e.g.\nchanging the <code>class</code>) are lost when the element is destroyed.</p>\n<p>Whenever the subtree is inserted into the DOM, it always gets a new child\nscope.  This child scope is destroyed when the subtree is removed from the\nDOM.  Refer\nhttps://github.com/angular/angular.js/wiki/The-Nuances-of-Scope-prototypical-Inheritance prototypical inheritance</p>\n<p>This has an important implication when <code>ng-model</code> is used inside an <code>ng-if</code>\nto bind to a javascript primitive defined in the parent scope.  In such a\nsituation, any modifications made to the variable in the <code>ng-if</code> subtree will\nbe made on the child scope and override (hide) the value in the parent scope.\nThe parent scope will remain unchanged by changes affected by this subtree.</p>\n<p>Note: <code>ng-if</code> differs from <code>ng-show</code> and <code>ng-hide</code> in that <code>ng-if</code> completely\nremoves and recreates the element in the DOM rather than changing its\nvisibility via the <code>display</code> css property.  A common case when this\ndifference is significant is when using css selectors that rely on an\nelement's position within the DOM (HTML), such as the <code>:first-child</code> or\n<code>:last-child</code> pseudo-classes.</p>\n<p>Example:</p>\n<pre><code>&lt;!-- By using ng-if instead of ng-show, we avoid the cost of the showdown\n     filter, the repeater, etc. --&gt;\n&lt;div ng-if=\"showDetails\"&gt;\n   {{obj.details.markdownText | showdown}}\n   &lt;div ng-repeat=\"item in obj.details.items\"&gt;\n     ...\n   &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{"condition=":{"name":"condition=","qualifiedName":"angular/angular.NgIfDirective.condition=","comment":"","commentFrom":"angular._NgUnlessIfAttrDirectiveBase.condition=","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"void","inner":[]}],"parameters":{"value":{"name":"value","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"getters":{},"constructors":{"":{"name":"","qualifiedName":"angular/angular.NgIfDirective.NgIfDirective-","comment":"","commentFrom":"","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{"boundViewFactory":{"name":"boundViewFactory","optional":"false","named":"false","default":"false","type":[{"outer":"angular/angular.BoundViewFactory","inner":[]}],"value":"null","annotations":[]},"viewPort":{"name":"viewPort","optional":"false","named":"false","default":"false","type":[{"outer":"angular/angular.ViewPort","inner":[]}],"value":"null","annotations":[]},"scope":{"name":"scope","optional":"false","named":"false","default":"false","type":[{"outer":"angular/angular.Scope","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"operators":{},"methods":{}},"inheritedMethods":{"setters":{"condition=":{"name":"condition=","qualifiedName":"angular/angular.NgIfDirective.condition=","comment":"","commentFrom":"","inheritedFrom":"angular._NgUnlessIfAttrDirectiveBase.condition=","static":"false","abstract":"true","constant":"false","return":[{"outer":"void","inner":[]}],"parameters":{"value":{"name":"value","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"angular/angular.NgIfDirective.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>angular/angular.NgIfDirective.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"angular/angular.NgIfDirective.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"angular/angular.NgIfDirective.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>angular/angular.NgIfDirective.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>angular/angular.NgIfDirective.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"angular/angular.NgIfDirective.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"angular/angular.NgIfDirective.noSuchMethod","comment":"<p><a>angular/angular.NgIfDirective.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>angular/angular.NgIfDirective.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>angular/angular.NgIfDirective.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>angular/angular.NgIfDirective.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[{"name":"angular.NgDirective","parameters":[]}],"generics":{}}