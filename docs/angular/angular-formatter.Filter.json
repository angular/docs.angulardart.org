{"name":"Filter","qualifiedName":"angular/angular-formatter.Filter","comment":"<p>Selects a subset of items from the provided <a>angular/dart-core.List</a> and returns it as a new\n<a>angular/dart-core.List</a>.</p>\n<h1>Usage</h1>\n<pre><code> filter:expression[:comparator]\n</code></pre>\n<p>In addition to the expression, which is used to select a subset from the list,\nyou can also specify a comparator to specify how the operation is performed. </p>\n<p>The expression can be of the following types:</p><ul><li>\n<p><a>angular/dart-core.String</a>, <a>angular/dart-core.bool</a> and <a>angular/dart-core.num</a>:  Only items in the list that directly\n  match this expression, items that are Maps with any value matching this\n  item, and items that are lists containing a matching items are returned.</p></li><li>\n<p><a>angular/dart-core.Map</a>:  This defines a pattern map.  Filters specific properties on objects\n  contained in the input list.  For example <code>{name:\"M\", phone:\"1\"}</code> predicate\n  will return a list of items which have property <code>name</code> containing \"M\" and\n  property <code>phone</code> containing \"1\".  A special property name, <code>$</code>, can be used\n  (as in <code>{$: \"text\"}</code>) to accept a match against any property of the object.\n  That's equivalent to the simple substring match with a <code>String</code> as\n  described above.</p></li><li>\n<p><a>angular/dart-core.Function</a>:  This allows you to supply a custom function to filter the\n  List.  The function is called for each element of the List.  The returned\n  List contains exactly those elements for which this function returned\n  <code>true</code>.</p></li></ul>\n<p>The comparator is optional and can be one of the following:</p><ul><li>\n<p><code>bool comparator(expected, actual)</code>:  The function will be called with the\n  object value and the predicate value to compare and should return true if\n  the item should be included in filtered result.</p></li><li>\n<p><code>true</code>:  Specifies that only identical objects matching the expression\n  exactly should be considered matches.  Two strings are considered identical\n  if they are equal.  Two numbers are considered identical if they are either\n  equal or both are <code>NaN</code>.  All other objects are identical iff\n  identical(expected, actual) is true.</p></li><li>\n<p><code>false|null</code>:  Specifies case insensitive substring matching.</p></li></ul>\n<h1>Example (<a href=\"http://plnkr.co/edit/6Mxz6r?p=info\">view in plunker</a>):</h1>\n<pre><code>// main.dart\nimport 'package:angular/angular.dart';\n\n@Decorator(selector: '[toy-data]')\nclass ToyData {\n  ToyData(Scope scope) {\n    scope.friends = [{'name':'John',     'phone':'555-1276'},\n                     {'name':'Mary',     'phone':'800-BIG-MARY'},\n                     {'name':'Mike',     'phone':'555-4321'},\n                     {'name':'Adam',     'phone':'555-5678'},\n                     {'name':'Julie',    'phone':'555-8765'},\n                     {'name':'Juliette', 'phone':'555-5678'}];\n  }\n}\n\nmain() {\n  ngBootstrap([new AngularModule()..bind(ToyData)], 'html');\n}\n</code></pre>\n<p>and</p>\n<pre><code>&lt;!-- index.html --&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;script src=\"packages/browser/dart.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"main.dart\" type=\"application/dart\"&gt;&lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body toy-data&gt;\n    Search: &lt;input type=\"text\" ng-model=\"searchText\"&gt;\n    &lt;table id=\"searchTextResults\"&gt;\n      &lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Phone&lt;/th&gt;&lt;/tr&gt;\n      &lt;tr ng-repeat=\"friend in friends | filter:searchText\"&gt;\n        &lt;td&gt;{{friend.name}}&lt;/td&gt;\n        &lt;td&gt;{{friend.phone}}&lt;/td&gt;\n      &lt;/tr&gt;\n    &lt;/table&gt;\n    &lt;hr&gt;\n    Any: &lt;input type=\"text\" ng-model=\"search.$\"&gt; &lt;br&gt;\n    Name only &lt;input type=\"text\" ng-model=\"search.name\"&gt;&lt;br&gt;\n    Phone only &lt;input type=\"text\" ng-model=\"search.phone\"&gt;&lt;br&gt;\n    &lt;table id=\"searchObjResults\"&gt;\n      &lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Phone&lt;/th&gt;&lt;/tr&gt;\n      &lt;tr ng-repeat=\"friend in friends | filter:search:strict\"&gt;\n        &lt;td&gt;{{friend.name}}&lt;/td&gt;\n        &lt;td&gt;{{friend.phone}}&lt;/td&gt;\n      &lt;/tr&gt;\n    &lt;/table&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>","isAbstract":false,"superclass":"dart-core.Object","implements":["dart-core.Function"],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"angular/angular-formatter.Filter.Filter-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"_parser":{"name":"_parser","optional":false,"named":false,"default":false,"type":[{"outer":"angular-core-parser.Parser","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{"call":{"name":"call","qualifiedName":"angular/angular-formatter.Filter.call","comment":"","commentFrom":"angular.Filter.call","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[]}],"parameters":{"items":{"name":"items","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[]}],"value":null,"annotations":[]},"expression":{"name":"expression","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"comparator":{"name":"comparator","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"angular/angular-formatter.Filter.hashCode","comment":"<p>Returns a hash code value that is compatible with <code>operator==</code>.</p>","commentFrom":"","inheritedFrom":"dart-core.Function.hashCode","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"angular/angular-formatter.Filter.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"angular/angular-formatter.Filter.==","comment":"<p>Test whether another object is equal to this function.</p>\n<p>System-created function objects are only equal to other functions.</p>\n<p>Two function objects are known to represent the same function if</p><ul><li>\n<p>It is the same object. Static and top-level functions are compile time\n  constants when used as values, so referring to the same function twice\n  always give the same object,</p></li><li>\n<p>or if they refer to the same member method extracted from the same object.\n  Extracting a member method as a function value twice gives equal, but\n  not necessarily identical, function values.</p></li></ul>\n<p>Function expressions never give rise to equal function objects. Each time\na function expression is evaluated, it creates a new closure value that\nis not known to be equal to other closures created by the same expression.</p>\n<p>Classes implementing <code>Function</code> by having a <code>call</code> method should have their\nown <code>operator==</code> and <code>hashCode</code> depending on the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Function.==","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"angular/angular-formatter.Filter.noSuchMethod","comment":"<p><a>angular/angular-formatter.Filter.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>angular/angular-formatter.Filter.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>angular/angular-formatter.Filter.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>angular/angular-formatter.Filter.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"angular/angular-formatter.Filter.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[{"name":"angular/angular-core-annotation_src.Formatter","parameters":["name:'filter'"]}],"generics":{}}