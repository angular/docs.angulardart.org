{"name":"ViewPort","qualifiedName":"angular/angular-core.ViewPort","comment":"<p>Maintains an ordered list of <a>angular/angular-core.View</a>'s.</p>\n<p>It contains a <a>angular/angular-core.ViewPort.placeholder</a> node that is used as the insertion point for view nodes.\nUpdating the child views of a <a>angular/angular-core.ViewPort</a> is a way to modify the hosting <a>angular/angular-core.View</a>.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"directiveInjector":{"name":"directiveInjector","qualifiedName":"angular/angular-core.ViewPort.directiveInjector","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"angular/angular-core.DirectiveInjector","inner":[]}],"annotations":[]},"placeholder":{"name":"placeholder","qualifiedName":"angular/angular-core.ViewPort.placeholder","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-dom-html.Node","inner":[]}],"annotations":[]},"scope":{"name":"scope","qualifiedName":"angular/angular-core.ViewPort.scope","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"angular/angular-core.Scope","inner":[]}],"annotations":[]},"views":{"name":"views","qualifiedName":"angular/angular-core.ViewPort.views","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"nodes":{"name":"nodes","qualifiedName":"angular/angular-core.ViewPort.nodes","comment":"<p>Concatenates and returns the nodes for all the views.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-dom-html.Node","inner":[]}]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"angular/angular-core.ViewPort.ViewPort-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"directiveInjector":{"name":"directiveInjector","optional":false,"named":false,"default":false,"type":[{"outer":"angular/angular-core.DirectiveInjector","inner":[]}],"value":null,"annotations":[]},"scope":{"name":"scope","optional":false,"named":false,"default":false,"type":[{"outer":"angular/angular-core.Scope","inner":[]}],"value":null,"annotations":[]},"placeholder":{"name":"placeholder","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Node","inner":[]}],"value":null,"annotations":[]},"_animate":{"name":"_animate","optional":false,"named":false,"default":false,"type":[{"outer":"angular/angular-core.Animate","inner":[]}],"value":null,"annotations":[]},"_lightDom":{"name":"_lightDom","optional":true,"named":false,"default":false,"type":[{"outer":"angular-core-dom_internal.DestinationLightDom","inner":[]}],"value":null,"annotations":[]},"parentView":{"name":"parentView","optional":true,"named":false,"default":false,"type":[{"outer":"angular/angular-core.View","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{"insert":{"name":"insert","qualifiedName":"angular/angular-core.ViewPort.insert","comment":"<p>Schedules the insertion of the view in the next DOM write phase.\nThe <a>angular/angular-core.ViewPort.insert.view</a> gets inserted as the first child or after <a>angular/angular-core.ViewPort.insert.insertAfter</a> when specified.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular/angular-core.View","inner":[]}],"parameters":{"view":{"name":"view","optional":false,"named":false,"default":false,"type":[{"outer":"angular/angular-core.View","inner":[]}],"value":null,"annotations":[]},"insertAfter":{"name":"insertAfter","optional":true,"named":true,"default":false,"type":[{"outer":"angular/angular-core.View","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"insertNew":{"name":"insertNew","qualifiedName":"angular/angular-core.ViewPort.insertNew","comment":"<p>Instantiates a <code>View</code> bound to the given <a>angular/angular-core.ViewPort.insertNew.viewScope</a> or to the <code>scope</code> of this <code>ViewPort</code>\nwhen none is specified.\nThe created <code>View</code> is scheduled for insertion as the first child or after <a>angular/angular-core.ViewPort.insertNew.insertAfter</a> when\nspecified.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular/angular-core.View","inner":[]}],"parameters":{"viewFactory":{"name":"viewFactory","optional":false,"named":false,"default":false,"type":[{"outer":"angular/angular-core.ViewFactory","inner":[]}],"value":null,"annotations":[]},"insertAfter":{"name":"insertAfter","optional":true,"named":true,"default":false,"type":[{"outer":"angular/angular-core.View","inner":[]}],"value":null,"annotations":[]},"viewScope":{"name":"viewScope","optional":true,"named":true,"default":false,"type":[{"outer":"angular/angular-core.Scope","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"move":{"name":"move","qualifiedName":"angular/angular-core.ViewPort.move","comment":"<p>Schedules the move of the <a>angular/angular-core.ViewPort.move.view</a> in the next DOM write phase.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular/angular-core.View","inner":[]}],"parameters":{"view":{"name":"view","optional":false,"named":false,"default":false,"type":[{"outer":"angular/angular-core.View","inner":[]}],"value":null,"annotations":[]},"moveAfter":{"name":"moveAfter","optional":true,"named":true,"default":false,"type":[{"outer":"angular/angular-core.View","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"remove":{"name":"remove","qualifiedName":"angular/angular-core.ViewPort.remove","comment":"<p>Schedules the removal of the <a>angular/angular-core.ViewPort.remove.view</a> in the next DOM write phase.\nThe associated scope is destroyed immediately.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular/angular-core.View","inner":[]}],"parameters":{"view":{"name":"view","optional":false,"named":false,"default":false,"type":[{"outer":"angular/angular-core.View","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"angular/angular-core.ViewPort.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>angular/angular-core.ViewPort.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"angular/angular-core.ViewPort.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"angular/angular-core.ViewPort.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>angular/angular-core.ViewPort.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>angular/angular-core.ViewPort.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"angular/angular-core.ViewPort.noSuchMethod","comment":"<p><a>angular/angular-core.ViewPort.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>angular/angular-core.ViewPort.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>angular/angular-core.ViewPort.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>angular/angular-core.ViewPort.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"angular/angular-core.ViewPort.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}