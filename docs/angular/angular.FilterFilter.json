{"name":"FilterFilter","qualifiedName":"angular/angular.FilterFilter","comment":"<p>Selects a subset of items from the provided <a>angular/dart-core.List</a> and returns it as a new\n<a>angular/dart-core.List</a>.</p>\n<p>In addition to the input list (implicit in an Angular expression syntax),\nthis filter takes 1 required and 1 optional parameter.  They are:</p><ul><li><code>expression</code> (required) - one of <a>angular/dart-core.Map</a>, <a>angular/dart-core.Function</a>, <a>angular/dart-core.String</a>, <a>angular/dart-core.bool</a>, <a>angular/dart-core.num</a></li><li><code>comparator</code> (optional)</li></ul><br>\n<h1>expression</h1>\n<p>can be one of:</p><ul><li>\n<p><a>angular/dart-core.String</a>, <a>angular/dart-core.bool</a> and <a>angular/dart-core.num</a>:  Only items in the List that directly\n  match this expression, items that are Maps with any value matching this\n  item and items that are Lists containing a matching items are returned.</p></li><li>\n<p><a>angular/dart-core.Map</a>:  This defines a pattern map.  Filters specific properties on objects\n  contained in the input List.  For example <code>{name:\"M\", phone:\"1\"}</code> predicate\n  will return a list of items which have property <code>name</code> containing \"M\" and\n  property <code>phone</code> containing \"1\".  A special property name, <code>$</code>, can be used\n  (as in <code>{$: \"text\"}</code>) to accept a match against any property of the object.\n  That's equivalent to the simple substring match with a <code>String</code> as\n  described above.</p></li><li>\n<p><a>angular/dart-core.Function</a>:  This allows you to supply a custom function to filter the\n  List.  The function is called for each element of the List.  The returned\n  List contains exactly those elements for which this function returned\n  <code>true</code>.</p></li></ul><br>\n<h1>comparator</h1>\n<p>can be one of:</p><ul><li>\n<p><code>bool comparator(expected, actual)</code>:  The function will be called with the\n  object value and the predicate value to compare and should return true if\n  the item should be included in filtered result.</p></li><li>\n<p><code>true</code>:  Specifies that only identical objects matching the expression\n  exactly should be considered matches.  Two strings are considered identical\n  if they are equal.  Two numbers are considered identical if they are either\n  equal or both are <code>NaN</code>.  All other objects are identical iff\n  identical(expected, actual) is true.</p></li><li>\n<p><code>false|null</code>:  Specifies case insensitive substring matching.</p></li></ul><br>\n<h1>Example (<a href=\"http://plnkr.co/edit/6Mxz6r?p=info\">view in plunker</a>):</h1>\n<pre><code>// main.dart\nimport 'package:angular/angular.dart';\n\n@NgDirective(selector: '[toy-data]')\nclass ToyData {\n  ToyData(Scope scope) {\n    scope.friends = [{'name':'John',     'phone':'555-1276'},\n                     {'name':'Mary',     'phone':'800-BIG-MARY'},\n                     {'name':'Mike',     'phone':'555-4321'},\n                     {'name':'Adam',     'phone':'555-5678'},\n                     {'name':'Julie',    'phone':'555-8765'},\n                     {'name':'Juliette', 'phone':'555-5678'}];\n  }\n}\n\nmain() {\n  ngBootstrap([new AngularModule()..type(ToyData)], 'html');\n}\n</code></pre>\n<p>and</p>\n<pre><code>&lt;!-- index.html --&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;script src=\"packages/browser/dart.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"main.dart\" type=\"application/dart\"&gt;&lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body toy-data&gt;\n    Search: &lt;input type=\"text\" ng-model=\"searchText\"&gt;\n    &lt;table id=\"searchTextResults\"&gt;\n      &lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Phone&lt;/th&gt;&lt;/tr&gt;\n      &lt;tr ng-repeat=\"friend in friends | filter:searchText\"&gt;\n        &lt;td&gt;{{friend.name}}&lt;/td&gt;\n        &lt;td&gt;{{friend.phone}}&lt;/td&gt;\n      &lt;/tr&gt;\n    &lt;/table&gt;\n    &lt;hr&gt;\n    Any: &lt;input type=\"text\" ng-model=\"search.$\"&gt; &lt;br&gt;\n    Name only &lt;input type=\"text\" ng-model=\"search.name\"&gt;&lt;br&gt;\n    Phone only &lt;input type=\"text\" ng-model=\"search.phone\"&gt;&lt;br&gt;\n    &lt;table id=\"searchObjResults\"&gt;\n      &lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Phone&lt;/th&gt;&lt;/tr&gt;\n      &lt;tr ng-repeat=\"friend in friends | filter:search:strict\"&gt;\n        &lt;td&gt;{{friend.name}}&lt;/td&gt;\n        &lt;td&gt;{{friend.phone}}&lt;/td&gt;\n      &lt;/tr&gt;\n    &lt;/table&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"angular/angular.FilterFilter.FilterFilter-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"_parser":{"name":"_parser","optional":false,"named":false,"default":false,"type":[{"outer":"angular/angular.Parser","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"operators":{},"methods":{"call":{"name":"call","qualifiedName":"angular/angular.FilterFilter.call","comment":"","commentFrom":"angular.FilterFilter.call","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[]}],"parameters":{"items":{"name":"items","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[]}],"value":"null","annotations":[]},"expression":{"name":"expression","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"comparator":{"name":"comparator","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"angular/angular.FilterFilter.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>angular/angular.FilterFilter.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"angular/angular.FilterFilter.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"angular/angular.FilterFilter.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>angular/angular.FilterFilter.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>angular/angular.FilterFilter.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"angular/angular.FilterFilter.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"angular/angular.FilterFilter.noSuchMethod","comment":"<p><a>angular/angular.FilterFilter.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>angular/angular.FilterFilter.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>angular/angular.FilterFilter.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>angular/angular.FilterFilter.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[{"name":"angular.NgFilter","parameters":["filter"]}],"generics":{}}