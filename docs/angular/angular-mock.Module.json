{"name":"Module","qualifiedName":"angular/angular-mock.Module","comment":"<p>Module contributes configuration information to an <a>angular/di.Injector</a> by providing\na collection of type bindings that specify how each type is created.</p>\n<p>When an injector is created, it copies its configuration information from a\nmodule. Defining additional type bindings after an injector is created have\nno effect on that injector.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":["angular/angular-mock.AngularMockModule"],"variables":{},"inheritedVariables":{},"methods":{"setters":{"typeFactories=":{"name":"typeFactories=","qualifiedName":"angular/angular-mock.Module.typeFactories=","comment":"","commentFrom":"angular-app.Module.typeFactories=","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"factories":{"name":"factories","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.Type","inner":[]},{"outer":"di.TypeFactory","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]}},"getters":{"bindings":{"name":"bindings","qualifiedName":"angular/angular-mock.Module.bindings","comment":"<p>Compiles and returns a map of type bindings by performing depth-first\ntraversal of the child (installed) modules.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.int","inner":[]},{"outer":"di-provider.Provider","inner":[]}]}],"parameters":{},"annotations":[]},"typeFactories":{"name":"typeFactories","qualifiedName":"angular/angular-mock.Module.typeFactories","comment":"","commentFrom":"angular-app.Module.typeFactories","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.Type","inner":[]},{"outer":"di.TypeFactory","inner":[]}]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{},"methods":{"bind":{"name":"bind","qualifiedName":"angular/angular-mock.Module.bind","comment":"<p>Registers a binding for a given <a>angular/angular-mock.Module.bind.type</a>.</p>\n<p>The default behavior is to simply instantiate the type.</p>\n<p>The following parameters can be specified:</p><ul><li>\n<p><a>angular/angular-mock.Module.bind.toImplementation</a>: The given type will be instantiated using the new\n  operator and the resulting instance will be injected.</p></li><li>\n<p><a>angular/angular-mock.Module.bind.toFactory</a>: The result of the factory function is the value that will\n  be injected.</p></li><li><a>angular/angular-mock.Module.bind.toValue</a>: The given value will be injected.</li><li><a>angular/angular-mock.Module.bind.withAnnotation</a>: Type decorated with additional annotation.</li><li>\n<p><a>angular/angular-mock.Module.bind.visibility</a>: Function which determines if the requesting injector can\n  see the type in the current injector.</p></li></ul>\n<p>Up to one (0 or 1) of the following parameters can be specified at the\nsame time: <a>angular/angular-mock.Module.bind.toImplementation</a>, <a>angular/angular-mock.Module.bind.toFactory</a>, <a>angular/angular-mock.Module.bind.toValue</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"type":{"name":"type","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Type","inner":[]}],"value":null,"annotations":[]},"toValue":{"name":"toValue","optional":true,"named":true,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"function(_DEFAULT_VALUE)","annotations":[]},"toFactory":{"name":"toFactory","optional":true,"named":true,"default":true,"type":[{"outer":"di.FactoryFn","inner":[]}],"value":"function(_DEFAULT_VALUE)","annotations":[]},"toImplementation":{"name":"toImplementation","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Type","inner":[]}],"value":null,"annotations":[]},"withAnnotation":{"name":"withAnnotation","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Type","inner":[]}],"value":null,"annotations":[]},"visibility":{"name":"visibility","optional":true,"named":true,"default":false,"type":[{"outer":"di.Visibility","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"bindByKey":{"name":"bindByKey","qualifiedName":"angular/angular-mock.Module.bindByKey","comment":"<p>Same as <a>angular/angular-mock.Module.bind</a> except it takes <a>angular/di-key.Key</a> instead of\n[Type] [withAnnotation] combination.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"key":{"name":"key","optional":false,"named":false,"default":false,"type":[{"outer":"di-key.Key","inner":[]}],"value":null,"annotations":[]},"toValue":{"name":"toValue","optional":true,"named":true,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"function(_DEFAULT_VALUE)","annotations":[]},"toFactory":{"name":"toFactory","optional":true,"named":true,"default":true,"type":[{"outer":"di.FactoryFn","inner":[]}],"value":"function(_DEFAULT_VALUE)","annotations":[]},"toImplementation":{"name":"toImplementation","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Type","inner":[]}],"value":null,"annotations":[]},"visibility":{"name":"visibility","optional":true,"named":true,"default":false,"type":[{"outer":"di.Visibility","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"factory":{"name":"factory","qualifiedName":"angular/angular-mock.Module.factory","comment":"<p>Register a binding to a factory function.</p>\n<p>The <a>angular/angular-mock.Module.factory.factoryFn</a> will be called and the result of that function is the value\nthat will be injected.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"id":{"name":"id","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Type","inner":[]}],"value":null,"annotations":[]},"factoryFn":{"name":"factoryFn","optional":false,"named":false,"default":false,"type":[{"outer":"di.FactoryFn","inner":[]}],"value":null,"annotations":[]},"withAnnotation":{"name":"withAnnotation","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Type","inner":[]}],"value":null,"annotations":[]},"visibility":{"name":"visibility","optional":true,"named":true,"default":false,"type":[{"outer":"di.Visibility","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"angular/dart-core.Deprecated","parameters":["\"Use bind(type, toFactory: factory)\""]}]},"factoryByKey":{"name":"factoryByKey","qualifiedName":"angular/angular-mock.Module.factoryByKey","comment":"","commentFrom":"angular-app.Module.factoryByKey","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"key":{"name":"key","optional":false,"named":false,"default":false,"type":[{"outer":"di-key.Key","inner":[]}],"value":null,"annotations":[]},"factoryFn":{"name":"factoryFn","optional":false,"named":false,"default":false,"type":[{"outer":"di.FactoryFn","inner":[]}],"value":null,"annotations":[]},"visibility":{"name":"visibility","optional":true,"named":true,"default":false,"type":[{"outer":"di.Visibility","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"angular/dart-core.Deprecated","parameters":["\"Use bindByKey(type, toFactory: factory)\""]}]},"install":{"name":"install","qualifiedName":"angular/angular-mock.Module.install","comment":"<p>Installs another module into this module. Bindings defined on this module\ntake precidence over the installed module.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"module":{"name":"module","optional":false,"named":false,"default":false,"type":[{"outer":"angular/angular-mock.Module","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"type":{"name":"type","qualifiedName":"angular/angular-mock.Module.type","comment":"<p>Registers a binding for a <a>dart-core.Type</a>.</p>\n<p>The default behavior is to simply instantiate the type.</p>\n<p>The following parameters can be specified:</p><ul><li><a>angular/angular-mock.Module.type.withAnnotation</a>: Type decorated with additional annotation.</li><li>\n<p><a>angular/angular-mock.Module.type.implementedBy</a>: The type will be instantiated using the new operator\n  and the resulting instance will be injected. If no type is provided,\n  then it's implied that <a>angular/angular-mock.Module.type.type</a> should be instantiated.</p></li><li>\n<p><a>angular/angular-mock.Module.type.visibility</a>: Function which determines fi the requesting injector can\n  see the type in the current injector.</p></li></ul>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"type":{"name":"type","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Type","inner":[]}],"value":null,"annotations":[]},"withAnnotation":{"name":"withAnnotation","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Type","inner":[]}],"value":null,"annotations":[]},"implementedBy":{"name":"implementedBy","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Type","inner":[]}],"value":null,"annotations":[]},"visibility":{"name":"visibility","optional":true,"named":true,"default":false,"type":[{"outer":"di.Visibility","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"angular/dart-core.Deprecated","parameters":["\"Use bind(type, implementedBy: impl)\""]}]},"value":{"name":"value","qualifiedName":"angular/angular-mock.Module.value","comment":"<p>Register a binding to a concrete value.</p>\n<p>The <a>angular/angular-mock.Module.value.value</a> is what actually will be injected.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"id":{"name":"id","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Type","inner":[]}],"value":null,"annotations":[]},"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"withAnnotation":{"name":"withAnnotation","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Type","inner":[]}],"value":null,"annotations":[]},"visibility":{"name":"visibility","optional":true,"named":true,"default":false,"type":[{"outer":"di.Visibility","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"angular/dart-core.Deprecated","parameters":["\"Use bind(type, toValue: value)\""]}]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"angular/angular-mock.Module.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>angular/angular-mock.Module.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"angular/angular-mock.Module.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"angular/angular-mock.Module.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>angular/angular-mock.Module.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>angular/angular-mock.Module.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"angular/angular-mock.Module.noSuchMethod","comment":"<p><a>angular/angular-mock.Module.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>angular/angular-mock.Module.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>angular/angular-mock.Module.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>angular/angular-mock.Module.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"angular/angular-mock.Module.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}