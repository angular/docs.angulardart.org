{"name":"Interpolate","qualifiedName":"angular/angular-core.Interpolate","comment":"<p>Compiles a string with markup into an expression. This service is used by the\nHTML Compiler service for data binding.</p>\n<pre><code>var interpolate = ...; // injected\nvar exp = interpolate('Hello {{name}}!');\nexpect(exp).toEqual('\"Hello \"+(name|stringify)+\"!\"');\n</code></pre>","isAbstract":false,"superclass":"dart-core.Object","implements":["dart-core.Function"],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"angular/angular-core.Interpolate.Interpolate-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"cacheRegister":{"name":"cacheRegister","optional":false,"named":false,"default":false,"type":[{"outer":"angular/angular-core.CacheRegister","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{"call":{"name":"call","qualifiedName":"angular/angular-core.Interpolate.call","comment":"<p>Compiles markup text into expression.</p><ul><li><a>angular/angular-core.Interpolate.call.template</a>: The markup text to interpolate in form <code>foo {{expr}} bar</code>.</li><li>\n<p><a>angular/angular-core.Interpolate.call.mustHaveExpression</a>: if set to true then the interpolation string must\n  have embedded expression in order to return an expression. Strings with\n  no embedded expression will return null.</p></li><li><a>angular/angular-core.Interpolate.call.startSymbol</a>: The symbol to start interpolation. '{{' by default.</li><li><a>angular/angular-core.Interpolate.call.endSymbol</a>: The symbol to end interpolation. '}}' by default.</li></ul>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"template":{"name":"template","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"mustHaveExpression":{"name":"mustHaveExpression","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]},"startSymbol":{"name":"startSymbol","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.String","inner":[]}],"value":"\"{{\"","annotations":[]},"endSymbol":{"name":"endSymbol","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.String","inner":[]}],"value":"\"}}\"","annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"angular/angular-core.Interpolate.hashCode","comment":"<p>Returns a hash code value that is compatible with <code>operator==</code>.</p>","commentFrom":"","inheritedFrom":"dart-core.Function.hashCode","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"angular/angular-core.Interpolate.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"angular/angular-core.Interpolate.==","comment":"<p>Test whether another object is equal to this function.</p>\n<p>System-created function objects are only equal to other functions.</p>\n<p>Two function objects are known to represent the same function if</p><ul><li>\n<p>It is the same object. Static and top-level functions are compile time\n  constants when used as values, so referring to the same function twice\n  always give the same object,</p></li><li>\n<p>or if they refer to the same member method extracted from the same object.\n  Extracting a member method as a function value twice gives equal, but\n  not necessarily identical, function values.</p></li></ul>\n<p>Function expressions never give rise to equal function objects. Each time\na function expression is evaluated, it creates a new closure value that\nis not known to be equal to other closures created by the same expression.</p>\n<p>Classes implementing <code>Function</code> by having a <code>call</code> method should have their\nown <code>operator==</code> and <code>hashCode</code> depending on the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Function.==","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"angular/angular-core.Interpolate.noSuchMethod","comment":"<p><a>angular/angular-core.Interpolate.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>angular/angular-core.Interpolate.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>angular/angular-core.Interpolate.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>angular/angular-core.Interpolate.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"angular/angular-core.Interpolate.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[{"name":"angular/di-annotations.Injectable","parameters":[]}],"generics":{}}