{"name":"RootScope","qualifiedName":"angular/angular-core.RootScope","comment":"","isAbstract":false,"superclass":"angular/angular-core.Scope","implements":[],"subclass":[],"variables":{"STATE_APPLY":{"name":"STATE_APPLY","qualifiedName":"angular/angular.RootScope.STATE_APPLY","comment":"","final":true,"static":true,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"STATE_DIGEST":{"name":"STATE_DIGEST","qualifiedName":"angular/angular.RootScope.STATE_DIGEST","comment":"","final":true,"static":true,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"STATE_FLUSH":{"name":"STATE_FLUSH","qualifiedName":"angular/angular.RootScope.STATE_FLUSH","comment":"","final":true,"static":true,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]}},"inheritedVariables":{"id":{"name":"id","qualifiedName":"angular/angular.Scope.id","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"context":{"name":"context","qualifiedName":"angular/angular.Scope.context","comment":"<p>The default execution context for <a>angular/angular.Scope.watch</a>es observeers, and <a>angular/angular.Scope.eval</a>uation.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"rootScope":{"name":"rootScope","qualifiedName":"angular/angular.Scope.rootScope","comment":"<p>The <a>angular/angular.RootScope</a> of the application.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"angular/angular.RootScope","inner":[]}],"annotations":[]}},"methods":{"setters":{},"getters":{"rootScope":{"name":"rootScope","qualifiedName":"angular/angular-core.RootScope.rootScope","comment":"","commentFrom":"angular.RootScope.rootScope","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular/angular-core.RootScope","inner":[]}],"parameters":{},"annotations":[]},"isAttached":{"name":"isAttached","qualifiedName":"angular/angular-core.RootScope.isAttached","comment":"<p>Returns true if the scope is still attached to the <a>angular/angular-core.RootScope</a>.</p>","commentFrom":"angular.Scope.isAttached","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"angular/angular-core.RootScope.RootScope-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"context":{"name":"context","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":"null","annotations":[]},"_astParser":{"name":"_astParser","optional":false,"named":false,"default":false,"type":[{"outer":"angular/angular-core.AstParser","inner":[]}],"value":"null","annotations":[]},"_parser":{"name":"_parser","optional":false,"named":false,"default":false,"type":[{"outer":"angular-core-parser.Parser","inner":[]}],"value":"null","annotations":[]},"cacheGetter":{"name":"cacheGetter","optional":false,"named":false,"default":false,"type":[{"outer":"dirty_checking_change_detector.GetterCache","inner":[]}],"value":"null","annotations":[]},"filterMap":{"name":"filterMap","optional":false,"named":false,"default":false,"type":[{"outer":"angular/angular-core.FilterMap","inner":[]}],"value":"null","annotations":[]},"_exceptionHandler":{"name":"_exceptionHandler","optional":false,"named":false,"default":false,"type":[{"outer":"angular/angular-core.ExceptionHandler","inner":[]}],"value":"null","annotations":[]},"_ttl":{"name":"_ttl","optional":false,"named":false,"default":false,"type":[{"outer":"angular/angular-core.ScopeDigestTTL","inner":[]}],"value":"null","annotations":[]},"_zone":{"name":"_zone","optional":false,"named":false,"default":false,"type":[{"outer":"angular/angular-core.NgZone","inner":[]}],"value":"null","annotations":[]},"_scopeStats":{"name":"_scopeStats","optional":false,"named":false,"default":false,"type":[{"outer":"angular/angular-core.ScopeStats","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"operators":{},"methods":{"digest":{"name":"digest","qualifiedName":"angular/angular-core.RootScope.digest","comment":"","commentFrom":"angular.RootScope.digest","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"flush":{"name":"flush","qualifiedName":"angular/angular-core.RootScope.flush","comment":"","commentFrom":"angular.RootScope.flush","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"runAsync":{"name":"runAsync","qualifiedName":"angular/angular-core.RootScope.runAsync","comment":"","commentFrom":"angular.RootScope.runAsync","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"fn":{"name":"fn","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"domWrite":{"name":"domWrite","qualifiedName":"angular/angular-core.RootScope.domWrite","comment":"","commentFrom":"angular.RootScope.domWrite","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"fn":{"name":"fn","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"domRead":{"name":"domRead","qualifiedName":"angular/angular-core.RootScope.domRead","comment":"","commentFrom":"angular.RootScope.domRead","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"fn":{"name":"fn","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"destroy":{"name":"destroy","qualifiedName":"angular/angular-core.RootScope.destroy","comment":"","commentFrom":"angular.Scope.destroy","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"angular/angular-core.RootScope.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>angular/angular-core.RootScope.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"angular/angular-core.RootScope.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"parentScope":{"name":"parentScope","qualifiedName":"angular/angular-core.RootScope.parentScope","comment":"<p>The parent <a>angular/angular-core.Scope</a>.</p>","commentFrom":"","inheritedFrom":"angular-core.Scope.parentScope","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular/angular-core.Scope","inner":[]}],"parameters":{},"annotations":[]},"isDestroyed":{"name":"isDestroyed","qualifiedName":"angular/angular-core.RootScope.isDestroyed","comment":"<p>Return <code>true</code> if the scope has been destroyed. Once scope is destroyed\nNo operations are allowed on it.</p>","commentFrom":"","inheritedFrom":"angular-core.Scope.isDestroyed","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isAttached":{"name":"isAttached","qualifiedName":"angular/angular-core.RootScope.isAttached","comment":"<p>Returns true if the scope is still attached to the <a>angular/angular-core.RootScope</a>.</p>","commentFrom":"","inheritedFrom":"angular-core.Scope.isAttached","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"hasOwnStreams":{"name":"hasOwnStreams","qualifiedName":"angular/angular-core.RootScope.hasOwnStreams","comment":"<p>Do not use. Exposes internal state for testing.</p>","commentFrom":"","inheritedFrom":"angular-core.Scope.hasOwnStreams","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"angular/angular-core.RootScope.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>angular/angular-core.RootScope.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>angular/angular-core.RootScope.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"angular/angular-core.RootScope.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"angular/angular-core.RootScope.noSuchMethod","comment":"<p><a>angular/angular-core.RootScope.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>angular/angular-core.RootScope.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>angular/angular-core.RootScope.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>angular/angular-core.RootScope.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"watch":{"name":"watch","qualifiedName":"angular/angular-core.RootScope.watch","comment":"<p>Use <a>angular/angular-core.RootScope.watch</a> to set up a watch in the <a>angular/angular-core.RootScope.apply</a> cycle.</p>\n<p>When <a>angular/angular-core.RootScope.watch.readOnly</a> is <code>true</code>, the watch will be executed in the <a>angular/angular-core.RootScope.flush</a>\ncycle. It should be used when the <a>angular/angular-core.RootScope.watch.reactionFn</a> does not change the model\nand allows the <a>angular/angular-core.RootScope.digest</a> phase to converge faster.</p>\n<p>On the opposite, <a>angular/angular-core.RootScope.watch.readOnly</a> should be set to <code>false</code> if the <a>angular/angular-core.RootScope.watch.reactionFn</a>\ncould change the model so that the watch is observed in the <a>angular/angular-core.RootScope.digest</a> cycle.</p>","commentFrom":"","inheritedFrom":"angular-core.Scope.watch","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular/angular-core.Watch","inner":[]}],"parameters":{"expression":{"name":"expression","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"reactionFn":{"name":"reactionFn","optional":false,"named":false,"default":false,"type":[{"outer":"angular/angular-core.ReactionFn","inner":[]}],"value":"null","annotations":[]},"context":{"name":"context","optional":true,"named":true,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"filters":{"name":"filters","optional":true,"named":true,"default":false,"type":[{"outer":"angular/angular-core.FilterMap","inner":[]}],"value":"null","annotations":[]},"readOnly":{"name":"readOnly","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]}},"annotations":[]},"eval":{"name":"eval","qualifiedName":"angular/angular-core.RootScope.eval","comment":"","commentFrom":"","inheritedFrom":"angular-core.Scope.eval","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"expression":{"name":"expression","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"locals":{"name":"locals","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"applyInZone":{"name":"applyInZone","qualifiedName":"angular/angular-core.RootScope.applyInZone","comment":"","commentFrom":"","inheritedFrom":"angular-core.Scope.applyInZone","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"expression":{"name":"expression","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"locals":{"name":"locals","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"apply":{"name":"apply","qualifiedName":"angular/angular-core.RootScope.apply","comment":"","commentFrom":"","inheritedFrom":"angular-core.Scope.apply","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"expression":{"name":"expression","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"locals":{"name":"locals","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"emit":{"name":"emit","qualifiedName":"angular/angular-core.RootScope.emit","comment":"","commentFrom":"","inheritedFrom":"angular-core.Scope.emit","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular/angular-core.ScopeEvent","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"data":{"name":"data","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"broadcast":{"name":"broadcast","qualifiedName":"angular/angular-core.RootScope.broadcast","comment":"","commentFrom":"","inheritedFrom":"angular-core.Scope.broadcast","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular/angular-core.ScopeEvent","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"data":{"name":"data","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"on":{"name":"on","qualifiedName":"angular/angular-core.RootScope.on","comment":"","commentFrom":"","inheritedFrom":"angular-core.Scope.on","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular/angular-core.ScopeStream","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"createChild":{"name":"createChild","qualifiedName":"angular/angular-core.RootScope.createChild","comment":"","commentFrom":"","inheritedFrom":"angular-core.Scope.createChild","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular/angular-core.Scope","inner":[]}],"parameters":{"childContext":{"name":"childContext","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"destroy":{"name":"destroy","qualifiedName":"angular/angular-core.RootScope.destroy","comment":"","commentFrom":"","inheritedFrom":"angular-core.Scope.destroy","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}