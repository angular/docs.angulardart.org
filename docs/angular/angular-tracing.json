{"name":"angular-tracing","qualifiedName":"angular/angular-tracing","comment":"<p>Tracing for AngularDart framework and applications.</p>\n<p>The tracing API hooks up to either <a href=\"http://google.github.io/tracing-framework/\">WTF</a> or\n<a href=\"https://www.dartlang.org/tools/observatory/\">Dart Observatory</a>.</p>","variables":{"traceEnabled":{"name":"traceEnabled","qualifiedName":"angular/angular-tracing.traceEnabled","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]}},"functions":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{"traceAsyncEnd":{"name":"traceAsyncEnd","qualifiedName":"angular/angular-tracing.traceAsyncEnd","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"range":{"name":"range","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"traceAsyncStart":{"name":"traceAsyncStart","qualifiedName":"angular/angular-tracing.traceAsyncStart","comment":"<p>Used to mark Async start. Async are similar to scope but they don't have to be strictly nested.\nAsync ranges only work if WTF has been enabled.</p>\n<pre><code>someMethod() {\n   var s = traceAsyncStart('HTTP:GET', 'some.url');\n   var future = new Future.delay(5).then((_) {\n     traceAsyncEnd(s);\n   });\n}\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"rangeType":{"name":"rangeType","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"action":{"name":"action","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"traceCreateScope":{"name":"traceCreateScope","qualifiedName":"angular/angular-tracing.traceCreateScope","comment":"<p>Create trace scope. Scopes must be strictly nested and are analogous to stack frames, but\ndo not have to follow the stack frames. Instead it is recommended that they follow logical\nnesting.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"signature":{"name":"signature","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"flags":{"name":"flags","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"traceDetectWTF":{"name":"traceDetectWTF","qualifiedName":"angular/angular-tracing.traceDetectWTF","comment":"<p>Use this method to detect if <a href=\"http://google.github.io/tracing-framework/\">WTF</a> has been enabled.</p>\n<p>To make sure that this library can be used DartVM where no JavaScript is available this\nmethod needs to be called with JavaScript context.</p>\n<p>If the method is not called or if WTF has not been detected that the tracing defaults to\nDart Observatory.</p>\n<pre><code>import \"dart:js\" show context;\n\ndetectWTF(context);\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"context":{"name":"context","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"traceEnter":{"name":"traceEnter","qualifiedName":"angular/angular-tracing.traceEnter","comment":"<p>Used to mark scope entry.</p>\n<pre><code>final myScope = traceCreateScope('myMethod');\n\nsomeMethod() {\n   var s = traceEnter(myScope);\n   try {\n     // do something\n   } finally {\n     traceLeave(s);\n   }\n}\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"scope":{"name":"scope","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"traceEnter1":{"name":"traceEnter1","qualifiedName":"angular/angular-tracing.traceEnter1","comment":"<p>Used to mark scope entry which logs single argument.</p>\n<pre><code>final myScope = traceCreateScope('myMethod');\n\nsomeMethod() {\n   var s = traceEnter(myScope);\n   try {\n     // do something\n   } finally {\n     traceLeave(s);\n   }\n}\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"scope":{"name":"scope","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"arg1":{"name":"arg1","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"traceLeave":{"name":"traceLeave","qualifiedName":"angular/angular-tracing.traceLeave","comment":"<p>Used to mark scope exit.</p>\n<pre><code>var myScope = traceCreateScope('myMethod');\n\nsomeMethod() {\n   var s = traceEnter(myScope);\n   try {\n     // do something\n   } finally {\n     traceLeave(s);\n   }\n}\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"scope":{"name":"scope","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"traceLeaveVal":{"name":"traceLeaveVal","qualifiedName":"angular/angular-tracing.traceLeaveVal","comment":"<p>Used to mark scope exit.</p>\n<pre><code>var myScope = traceCreateScope('myMethod');\n\nsomeMethod() {\n   var s = traceEnter(myScope);\n   try {\n     // do something\n   } finally {\n     traceLeave(s);\n   }\n}\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"scope":{"name":"scope","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"returnValue":{"name":"returnValue","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"classes":{"class":[],"typedef":{},"error":[]},"packageName":"angular","packageIntro":"<h1>AngularDart</h1>\n<p>A port of <a href=\"http://angularjs.org/\">Angular</a> to <a href=\"http://www.dartlang.org\">Dart</a>.</p>\n<h2>Installing</h2>\n<p>Follow the instructions on <a href=\"http://pub.dartlang.org/packages/angular#installing\">AngularDart's page on pub</a>.</p>\n<h2>API documentation</h2>\n<p>Read the autogenerated <a href=\"https://docs.angulardart.org\">API documentation</a>.</p>\n<h2>Learning more</h2>\n<p>Study the <a href=\"https://angulardart.org/tutorial\">AngularDart Tutorial</a> to learn more about Angular\nin Dart.</p>\n<h2>Joining the discussion</h2>\n<p>Discuss AngularDart on the <a href=\"https://groups.google.com/forum/#!forum/angular-dart\">mailing list</a>,\nask questions on <a href=\"http://stackoverflow.com/questions/tagged/angular.dart\">StackOverflow</a>,\nfollow <a href=\"https://plus.google.com/117340875933142003564/posts\">+AngularDart on Google+</a>,\nand follow <a href=\"https://twitter.com/AngularDart\">@AngularDart</a> and <a href=\"https://twitter.com/AngularJS\">@AngularJS</a> on Twitter.</p>\n<h2>Filing bugs</h2>\n<p>Please file bugs and feature requests using the <a href=\"https://github.com/angular/angular.dart/issues?state=open\">Github Issues Tracker</a>.</p>\n<h2>I want to help</h2>\n<p>Excellent read up on <a href=\"https://github.com/angular/angular.dart/blob/master/CONTRIBUTING.md\">contributing</a>.</p>"}