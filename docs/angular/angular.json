{"name":"angular","qualifiedName":"angular/angular","comment":"","variables":{},"functions":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{"ngDirectives":{"name":"ngDirectives","qualifiedName":"angular/angular.ngDirectives","comment":"<p>Return a List of directives associated with a current Element.</p>\n<p><strong>NOTE</strong>: This global method is here to make it easier to debug Angular\napplication from the browser's REPL, unit or end-to-end tests. The function\nis not intended to be called from Angular application.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.Object","inner":[]}]}],"parameters":{"nodeOrSelector":{"name":"nodeOrSelector","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"ngInjector":{"name":"ngInjector","qualifiedName":"angular/angular.ngInjector","comment":"<p>Return the <a>angular/angular.Injector</a> associated with a current Element.</p>\n<p><strong>NOTE</strong>: This global method is here to make it easier to debug Angular\napplication from the browser's REPL, unit or end-to-end tests. The function\nis not intended to be called from Angular application.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular/angular.Injector","inner":[]}],"parameters":{"nodeOrSelector":{"name":"nodeOrSelector","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"ngProbe":{"name":"ngProbe","qualifiedName":"angular/angular.ngProbe","comment":"<p>Return the <a>angular/angular.ElementProbe</a> object for the closest Element in the hierarchy.</p>\n<p>The node parameter could be:\n<em> a <a>angular/dart-dom-html.Node</a>,\n</em> a CSS selector for this node.</p>\n<p><strong>NOTE:</strong> This global method is here to make it easier to debug Angular\napplication from the browser's REPL, unit or end-to-end tests. The\nfunction is not intended to be called from Angular application.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular/angular.ElementProbe","inner":[]}],"parameters":{"nodeOrSelector":{"name":"nodeOrSelector","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"ngQuery":{"name":"ngQuery","qualifiedName":"angular/angular.ngQuery","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-dom-html.Element","inner":[]}]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Node","inner":[]}],"value":null,"annotations":[]},"selector":{"name":"selector","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"containsText":{"name":"containsText","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"ngRoute":{"name":"ngRoute","qualifiedName":"angular/angular.ngRoute","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular/angular.NgRouteCfg","inner":[]}],"parameters":{"path":{"name":"path","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"view":{"name":"view","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"viewHtml":{"name":"viewHtml","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"mount":{"name":"mount","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"angular/angular.NgRouteCfg","inner":[]}]}],"value":null,"annotations":[]},"modules":{"name":"modules","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{}}},"defaultRoute":{"name":"defaultRoute","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]},"preEnter":{"name":"preEnter","optional":true,"named":true,"default":false,"type":[{"outer":"angular/angular.RoutePreEnterEventHandler","inner":[]}],"value":null,"annotations":[]},"enter":{"name":"enter","optional":true,"named":true,"default":false,"type":[{"outer":"angular/angular.RouteEnterEventHandler","inner":[]}],"value":null,"annotations":[]},"leave":{"name":"leave","optional":true,"named":true,"default":false,"type":[{"outer":"angular/angular.RouteLeaveEventHandler","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"ngScope":{"name":"ngScope","qualifiedName":"angular/angular.ngScope","comment":"<p>Return the <a>angular/angular.Scope</a> associated with a current Element.</p>\n<p><strong>NOTE</strong>: This global method is here to make it easier to debug Angular\napplication from the browser's REPL, unit or end-to-end tests. The function\nis not intended to be called from Angular application.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular/angular.Scope","inner":[]}],"parameters":{"nodeOrSelector":{"name":"nodeOrSelector","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"classes":{"class":[{"name":"AHref","qualifiedName":"angular/angular.AHref","preview":"<p>Modifies the default behavior of the HTML <code>&lt;a&gt;</code> element to prevent navigation from the current page when the <code>href</code>\nattribute is empty. <code>Selector: a[href]</code></p>"},{"name":"AST","qualifiedName":"angular/angular.AST","preview":"<p>RULES:\n - ASTs are reusable. Don't store scope/instance refs there\n - Parent knows about children, not the other way around.</p>"},{"name":"AngularModule","qualifiedName":"angular/angular.AngularModule","preview":"<p>This is the top level module which describes all Angular components,\nincluding services, formatters and directives. When instantiating an Angular application\nthrough <a href=\"#angular-app-factory\">applicationFactory</a>, AngularModule is automatically included.</p>"},{"name":"Animate","qualifiedName":"angular/angular.Animate","preview":"<p>The <a>angular/angular.Animate</a> service provides dom lifecycle management, detection and\nanalysis of css animations, and hooks for custom animations. When any of\nthese animations are run, <a>angular/angular.Animation</a>s are returned so the animation can be\ncontrolled and so that custom dom manipulations can occur when animations\ncomplete.</p>"},{"name":"Animation","qualifiedName":"angular/angular.Animation","preview":"<p>Animation handle for controlling and listening to animation completion.</p>"},{"name":"AnimationResult","qualifiedName":"angular/angular.AnimationResult","preview":"<p>Final result of an animation after it is no longer attached to the element.</p>"},{"name":"Application","qualifiedName":"angular/angular.Application","preview":"<p>The Application class provides the mechanism by which Angular creates, configures,\nand runs an application. There are two implementations for this abstract class:</p>"},{"name":"Arrayify","qualifiedName":"angular/angular.Arrayify","preview":"<p>Transforms a Map into an array so that the map can be used with <code>ng-repeat</code>.</p>"},{"name":"AttachAware","qualifiedName":"angular/angular.AttachAware","preview":"<p>A directives or components may chose to implements <a>angular/angular.AttachAware</a>.<a>angular/angular.AttachAware.attach</a> method.\nIf implemented the method will be called when the next scope digest occurs after\ncomponent instantiation. It is guaranteed that when <a>angular/angular.AttachAware.attach</a> is invoked, that all\nattribute mappings have already been processed.</p>"},{"name":"AvgStopwatch","qualifiedName":"angular/angular.AvgStopwatch"},{"name":"BoundExpression","qualifiedName":"angular/angular.BoundExpression"},{"name":"BoundViewFactory","qualifiedName":"angular/angular.BoundViewFactory","preview":"<p>BoundViewFactory is a <a>angular/angular.ViewFactory</a> which does not need Injector because\nit is pre-bound to an injector from the parent. This means that this\nBoundViewFactory can only be used from within a specific Directive such\nas NgRepeat, but it can not be stored in a cache.</p>"},{"name":"BrowserCookies","qualifiedName":"angular/angular.BrowserCookies","preview":"<p>This class provides low-level acces to the browser's cookies.\nIt is not meant to be used directly by applications.  Instead\nuse the Cookies service.</p>"},{"name":"CacheRegister","qualifiedName":"angular/angular.CacheRegister"},{"name":"CacheRegisterStats","qualifiedName":"angular/angular.CacheRegisterStats"},{"name":"CacheStats","qualifiedName":"angular/angular.CacheStats"},{"name":"CallArguments","qualifiedName":"angular/angular.CallArguments"},{"name":"ClosureAST","qualifiedName":"angular/angular.ClosureAST","preview":"<p>SYNTAX: fn(arg0, arg1, ...)</p>"},{"name":"ClosureMap","qualifiedName":"angular/angular.ClosureMap"},{"name":"CollectionAST","qualifiedName":"angular/angular.CollectionAST"},{"name":"Compiler","qualifiedName":"angular/angular.Compiler"},{"name":"CompilerConfig","qualifiedName":"angular/angular.CompilerConfig","preview":"<p>Global configuration options for the Compiler</p>"},{"name":"Component","qualifiedName":"angular/angular.Component","preview":"<p>Annotation placed on a class which should act as a controller for the\ncomponent. Angular components are a light-weight version of web-components.\nAngular components use shadow-DOM for rendering their templates.</p>"},{"name":"ConstantAST","qualifiedName":"angular/angular.ConstantAST","preview":"<p>SYNTAX: <em>context</em></p>"},{"name":"ContentEditable","qualifiedName":"angular/angular.ContentEditable","preview":"<p>Creates a two-way databinding between the expression specified in <code>ng-model</code> and the HTML element\nin the DOM.</p>"},{"name":"ContextReferenceAST","qualifiedName":"angular/angular.ContextReferenceAST","preview":"<p>SYNTAX: <em>context</em></p>"},{"name":"Controller","qualifiedName":"angular/angular.Controller","preview":"<p>Annotation placed on a class which should act as a controller for your\napplication.</p>"},{"name":"Cookies","qualifiedName":"angular/angular.Cookies","preview":"<p>Cookies service</p>"},{"name":"Currency","qualifiedName":"angular/angular.Currency","preview":"<p>Formats a number as a currency (for example $1,234.56).</p>"},{"name":"Date","qualifiedName":"angular/angular.Date","preview":"<p>Formats a date value to a string based on the requested format.</p>"},{"name":"Decorator","qualifiedName":"angular/angular.Decorator","preview":"<p>Annotation placed on a class which should act as a directive.</p>"},{"name":"DetachAware","qualifiedName":"angular/angular.DetachAware","preview":"<p>A directives or components may chose to implements <a>angular/angular.DetachAware</a>.<a>angular/angular.DetachAware.detach</a> method.\nIf implemented the method will be called when the next associated scope is destroyed.</p>"},{"name":"Directive","qualifiedName":"angular/angular.Directive","preview":"<p>Abstract supper class of <a>angular/angular.Controller</a>, <a>angular/angular.Component</a>, and <a>angular/angular.Decorator</a>.</p>"},{"name":"DirectiveAnnotation","qualifiedName":"angular/angular.DirectiveAnnotation","preview":"<p>Abstract supper class of <a>angular/angular.NgAttr</a>, <a>angular/angular.NgCallback</a>, <a>angular/angular.NgOneWay</a>, <a>angular/angular.NgOneWayOneTime</a>, and <a>angular/angular.NgTwoWay</a>.</p>"},{"name":"DirectiveMap","qualifiedName":"angular/angular.DirectiveMap"},{"name":"DirectiveModule","qualifiedName":"angular/angular.DirectiveModule","preview":"<p>This module registers all the Angular directives.</p>"},{"name":"DynamicParser","qualifiedName":"angular/angular.DynamicParser"},{"name":"DynamicParserBackend","qualifiedName":"angular/angular.DynamicParserBackend"},{"name":"ElementProbe","qualifiedName":"angular/angular.ElementProbe","preview":"<p><a>angular/angular.ElementProbe</a> is attached to each Element in the DOM. Its sole purpose is\nto allow access to the <a>angular/angular.Injector</a>, <a>angular/angular.Scope</a>, and Directives for debugging and\nautomated test purposes. The information here is not used by Angular in any\nway.</p>"},{"name":"EventHandler","qualifiedName":"angular/angular.EventHandler","preview":"<p><a>angular/angular.EventHandler</a> is responsible for handling events bound using on-* syntax\n(i.e. <code>on-click=\"ctrl.doSomething();\"</code>). The root of the application has an\nEventHandler attached as does every <a>angular/angular.Component</a>.</p>"},{"name":"ExceptionHandler","qualifiedName":"angular/angular.ExceptionHandler","preview":"<p>Any uncaught exception in angular expressions is delegated to this service.\nThe default implementation logs exceptions into console.</p>"},{"name":"Expression","qualifiedName":"angular/angular.Expression"},{"name":"FieldGetterFactory","qualifiedName":"angular/angular.FieldGetterFactory"},{"name":"FieldReadAST","qualifiedName":"angular/angular.FieldReadAST","preview":"<p>SYNTAX: lhs.name.</p>"},{"name":"Filter","qualifiedName":"angular/angular.Filter","preview":"<p>Selects a subset of items from the provided <a>angular/dart-core.List</a> and returns it as a new\n<a>angular/dart-core.List</a>.</p>"},{"name":"Formatter","qualifiedName":"angular/angular.Formatter","preview":"<p>Use the @<a>angular/angular.Formatter</a> class annotation to identify a class as a formatter.</p>"},{"name":"FormatterMap","qualifiedName":"angular/angular.FormatterMap","preview":"<p>Registry of formatters at runtime.</p>"},{"name":"FormatterModule","qualifiedName":"angular/angular.FormatterModule","preview":"<p>This module registers all the Angular formatters.</p>"},{"name":"FunctionApply","qualifiedName":"angular/angular.FunctionApply","preview":"<p>Extend this class if you wish to pretend to be a function, but you don't know\nnumber of arguments with which the function will get called with.</p>"},{"name":"Http","qualifiedName":"angular/angular.Http","preview":"<p>The <a>angular/angular.Http</a> service facilitates communication with the remote HTTP servers.\nIt uses dart:html's HttpRequest and provides a number of features on top\nof the core Dart library.</p>"},{"name":"HttpBackend","qualifiedName":"angular/angular.HttpBackend","preview":"<p>HTTP backend used by the <a>angular/angular.Http</a> service that delegates to dart:html's\nHttpRequest and deals with Dart bugs.</p>"},{"name":"HttpDefaultHeaders","qualifiedName":"angular/angular.HttpDefaultHeaders","preview":"<p>Default header configuration.</p>"},{"name":"HttpDefaults","qualifiedName":"angular/angular.HttpDefaults","preview":"<p>Injected into the <a>angular/angular.Http</a> service.  This class contains application-wide\nHTTP defaults.</p>"},{"name":"HttpInterceptor","qualifiedName":"angular/angular.HttpInterceptor","preview":"<p>HttpInterceptors are used to modify the Http request. They can be added to\n<a>angular/angular.HttpInterceptors</a> or passed into <a>angular/angular.Http.call</a>.</p>"},{"name":"HttpInterceptors","qualifiedName":"angular/angular.HttpInterceptors","preview":"<p>A list of <a>angular/angular.HttpInterceptor</a>s.</p>"},{"name":"HttpResponse","qualifiedName":"angular/angular.HttpResponse","preview":"<p>The response for an HTTP request.  Returned from the <a>angular/angular.Http</a> service.</p>"},{"name":"HttpResponseConfig","qualifiedName":"angular/angular.HttpResponseConfig","preview":"<p>The request configuration of the request associated with this response.</p>"},{"name":"Injectable","qualifiedName":"angular/angular.Injectable","preview":"<p>An annotation when applied to a class indicates that the class (service) will\nbe instantiated by di injector. This annotation is also used to designate which\nclasses need to have a static factory generated when using static angular, and\ntherefore is required on any injectable class.</p>"},{"name":"Injector","qualifiedName":"angular/angular.Injector"},{"name":"InputCheckbox","qualifiedName":"angular/angular.InputCheckbox","preview":"<p>Creates a two-way databinding between the <code>ng-model</code> expression\nand the checkbox input element state.</p>"},{"name":"InputDateLike","qualifiedName":"angular/angular.InputDateLike","preview":"<p>Controls the IDL attribute that reads the value of a date/time input,\nto support browsers that deviate from the HTML5 standard for date/time.</p>"},{"name":"InputNumberLike","qualifiedName":"angular/angular.InputNumberLike","preview":"<p>Creates a two-way databinding between the <code>ng-model</code> expression\nand a numeric input element.</p>"},{"name":"InputRadio","qualifiedName":"angular/angular.InputRadio","preview":"<p>Creates a two-way databinding between the <code>ng-model</code> expression\nand the radio input elements in the DOM.</p>"},{"name":"InputSelect","qualifiedName":"angular/angular.InputSelect","preview":"<p>HTML SELECT element with angular data-binding if used with\n<a>angular/angular.NgModel</a>.</p>"},{"name":"InputTextLike","qualifiedName":"angular/angular.InputTextLike","preview":"<p>Creates a two-way databinding between the <code>ng-model</code> expression\nand the <code>&lt;input&gt;</code> or <code>&lt;textarea&gt;</code> string-based input elements.</p>"},{"name":"Interpolate","qualifiedName":"angular/angular.Interpolate","preview":"<p>Compiles a string with markup into an expression. This service is used by the\nHTML Compiler service for data binding.</p>"},{"name":"Json","qualifiedName":"angular/angular.Json","preview":"<p>Converts an object into a JSON string.</p>"},{"name":"Key","qualifiedName":"angular/angular.Key","preview":"<p>Key to which an Injector binds a Provider.  This is a pair consisting of\na <a>angular/angular.Key.type</a> and an optional <a>angular/angular.Key.annotation</a>.</p>"},{"name":"LimitTo","qualifiedName":"angular/angular.LimitTo","preview":"<p>Creates a new List or String containing only a prefix/suffix of the\nelements.</p>"},{"name":"LocationWrapper","qualifiedName":"angular/angular.LocationWrapper"},{"name":"Lowercase","qualifiedName":"angular/angular.Lowercase","preview":"<p>Converts a string to lowercase.</p>"},{"name":"MethodAST","qualifiedName":"angular/angular.MethodAST","preview":"<p>SYNTAX: lhs.method(arg0, arg1, ...)</p>"},{"name":"Module","qualifiedName":"angular/angular.Module","preview":"<p>Module contributes configuration information to an <a>angular/angular.Injector</a> by providing\na collection of type bindings that specify how each type is created.</p>"},{"name":"NgAttr","qualifiedName":"angular/angular.NgAttr","preview":"<p>When applied as an annotation on a directive field specifies that\nthe field is to be mapped to DOM attribute with the provided <a>angular/angular.DirectiveAnnotation.attrName</a>.\nThe value of the attribute to be treated as a string, equivalent\nto <code>@</code> specification.</p>"},{"name":"NgAttribute","qualifiedName":"angular/angular.NgAttribute","preview":"<p>In SVG some attributes have a specific syntax. Placing <code>{{interpolation}}</code> in\nthose attributes will break the attribute syntax, and browser will clear the\nattribute.</p>"},{"name":"NgBaseCss","qualifiedName":"angular/angular.NgBaseCss","preview":"<p>Specifies a base CSS to use for components defined under the directive. <code>Selector: [ng-base-css]</code></p>"},{"name":"NgBind","qualifiedName":"angular/angular.NgBind","preview":"<p>Replaces the text content of the specified HTML element with the value of a given expression,\nand updates the text content when the value of that expression changes. <code>Selector: [ng-bind]</code></p>"},{"name":"NgBindHtml","qualifiedName":"angular/angular.NgBindHtml","preview":"<p>Sanitizes an HTML string and invokes the browser's parser to insert the string into\nthe containing element in the DOM. <code>Selector: [ng-bind-html]</code></p>"},{"name":"NgBindRoute","qualifiedName":"angular/angular.NgBindRoute","preview":"<p>A directive that allows to bind child components/directives to a specific\nroute.</p>"},{"name":"NgBindTemplate","qualifiedName":"angular/angular.NgBindTemplate","preview":"<p>Replaces the text content of an element with an interpolated template. <code>Selector: [ng-bind-template]</code></p>"},{"name":"NgBindTypeForDateLike","qualifiedName":"angular/angular.NgBindTypeForDateLike","preview":"<p>This directive affects which IDL attribute will be used to read the value of\ndate/time related input directives. Recognized values for this directive are:</p>"},{"name":"NgBooleanAttribute","qualifiedName":"angular/angular.NgBooleanAttribute","preview":"<p>Allows adding and removing the boolean attributes from the element.</p>"},{"name":"NgCallback","qualifiedName":"angular/angular.NgCallback","preview":"<p>When applied as an annotation on a directive field specifies that\nthe field is to be mapped to DOM attribute with the provided <a>angular/angular.DirectiveAnnotation.attrName</a>.\nThe value of the attribute to be treated as a callback expression,\nequivalent to <code>&amp;</code> specification.</p>"},{"name":"NgClass","qualifiedName":"angular/angular.NgClass","preview":"<p>The <code>ngClass</code> directive allows you to dynamically style an HTML element,\nby binding to an expression that represents the classes to be bound. <code>Selector: [ng-class]</code></p>"},{"name":"NgClassEven","qualifiedName":"angular/angular.NgClassEven","preview":"<p>The <code>ngClassOdd</code> and <code>ngClassEven</code> directives work exactly as\n{@link ng.directive:ngClass ngClass}, except it works in\nconjunction with <code>ngRepeat</code> and takes affect only on odd (even) rows.</p>"},{"name":"NgClassOdd","qualifiedName":"angular/angular.NgClassOdd","preview":"<p>Dynamically style only odd rows in a list via data.</p>"},{"name":"NgCloak","qualifiedName":"angular/angular.NgCloak","preview":"<p>Hides elements on the page while the application loads. <code>Selector: [ng-cloak], .ng-cloak</code></p>"},{"name":"NgControl","qualifiedName":"angular/angular.NgControl","preview":"<p>Contains info and error states used during form and input validation.</p>"},{"name":"NgElement","qualifiedName":"angular/angular.NgElement"},{"name":"NgEvent","qualifiedName":"angular/angular.NgEvent","preview":"<p>Allows you to specify custom behavior for DOM UI events such as mouse,\nkeyboard and touch events.</p>"},{"name":"NgFalseValue","qualifiedName":"angular/angular.NgFalseValue","preview":"<p>Assigns the value of a bound expression to the model when an input checkbox is\nunchecked.</p>"},{"name":"NgForm","qualifiedName":"angular/angular.NgForm","preview":"<p>The form directive listens on submission requests and, depending,\non if an action is set, the form will automatically either allow\nor prevent the default browser submission from occurring.</p>"},{"name":"NgHide","qualifiedName":"angular/angular.NgHide","preview":"<p>The ngHide directive shows or hides the given HTML element based on the\nexpression provided to the ngHide attribute. The element is shown or hidden\nby changing the removing or adding the ng-hide CSS class onto the element.</p>"},{"name":"NgIf","qualifiedName":"angular/angular.NgIf","preview":"<p>The <code>ng-if</code> directive compliments the <code>ng-unless</code> (provided by\n<a>angular/angular.NgUnless</a>) directive.</p>"},{"name":"NgInclude","qualifiedName":"angular/angular.NgInclude","preview":"<p>Fetches, compiles and includes an external Angular template/HTML.</p>"},{"name":"NgModel","qualifiedName":"angular/angular.NgModel","preview":"<p>Ng-model directive is responsible for reading/writing to the model.</p>"},{"name":"NgModelConverter","qualifiedName":"angular/angular.NgModelConverter","preview":"<p>Class interface for performing transformations on the viewValue and modelValue properties on a model.</p>"},{"name":"NgModelEmailValidator","qualifiedName":"angular/angular.NgModelEmailValidator","preview":"<p>Validates the model to see if its contents match a valid email pattern.</p>"},{"name":"NgModelMaxLengthValidator","qualifiedName":"angular/angular.NgModelMaxLengthValidator","preview":"<p>Validates the model to see if the length of its contents are less than or\nequal to the maximum length set in place by the HTML maxlength or\nng-maxlength attributes present on the input element.</p>"},{"name":"NgModelMaxNumberValidator","qualifiedName":"angular/angular.NgModelMaxNumberValidator","preview":"<p>Validates the model to see if the numeric value than or equal to the max value.</p>"},{"name":"NgModelMinLengthValidator","qualifiedName":"angular/angular.NgModelMinLengthValidator","preview":"<p>Validates the model to see if the length of its contents are greater than or\nequal to the minimum length set in place by the HTML minlength or\nng-minlength attributes present on the input element.</p>"},{"name":"NgModelMinNumberValidator","qualifiedName":"angular/angular.NgModelMinNumberValidator","preview":"<p>Validates the model to see if the numeric value is greater than or equal to the min value.</p>"},{"name":"NgModelNumberValidator","qualifiedName":"angular/angular.NgModelNumberValidator","preview":"<p>Validates the model to see if its contents match a valid number.</p>"},{"name":"NgModelOptions","qualifiedName":"angular/angular.NgModelOptions"},{"name":"NgModelPatternValidator","qualifiedName":"angular/angular.NgModelPatternValidator","preview":"<p>Validates the model to see if its contents match the given pattern present on either the\nHTML pattern or ng-pattern attributes present on the input element.</p>"},{"name":"NgModelRequiredValidator","qualifiedName":"angular/angular.NgModelRequiredValidator","preview":"<p>Validates the model depending if required or ng-required is present on the element.</p>"},{"name":"NgModelUrlValidator","qualifiedName":"angular/angular.NgModelUrlValidator","preview":"<p>Validates the model to see if its contents match a valid URL pattern.</p>"},{"name":"NgNonBindable","qualifiedName":"angular/angular.NgNonBindable","preview":"<p>Causes the compiler to ignore all Angular directives and markup on descendant\nnodes of the matching element.  Note, however, that other directives and\nmarkup on the element are still processed and that only descending the DOM\nfor compilation is prevented.</p>"},{"name":"NgNullControl","qualifiedName":"angular/angular.NgNullControl"},{"name":"NgNullForm","qualifiedName":"angular/angular.NgNullForm"},{"name":"NgOneWay","qualifiedName":"angular/angular.NgOneWay","preview":"<p>When applied as an annotation on a directive field specifies that\nthe field is to be mapped to DOM attribute with the provided <a>angular/angular.DirectiveAnnotation.attrName</a>.\nThe value of the attribute to be treated as a one-way expression, equivalent\nto <code>=&gt;</code> specification.</p>"},{"name":"NgOneWayOneTime","qualifiedName":"angular/angular.NgOneWayOneTime","preview":"<p>When applied as an annotation on a directive field specifies that\nthe field is to be mapped to DOM attribute with the provided <a>angular/angular.DirectiveAnnotation.attrName</a>.\nThe value of the attribute to be treated as a one time one-way expression,\nequivalent to <code>=&gt;!</code> specification.</p>"},{"name":"NgPluralize","qualifiedName":"angular/angular.NgPluralize","preview":"<h2>Overview</h2>\n<p><code>ngPluralize</code> is a directive that displays messages according to locale rules.</p>"},{"name":"NgRepeat","qualifiedName":"angular/angular.NgRepeat","preview":"<p>The <code>ngRepeat</code> directive instantiates a template once per item from a\ncollection. Each template instance gets its own scope, where the given loop\nvariable is set to the current collection item, and <code>$index</code> is set to the\nitem index or key.</p>"},{"name":"NgRouteCfg","qualifiedName":"angular/angular.NgRouteCfg"},{"name":"NgRoutingHelper","qualifiedName":"angular/angular.NgRoutingHelper","preview":"<p>A singleton helper service that handles routing initialization, global\nevents and view registries.</p>"},{"name":"NgRoutingUsePushState","qualifiedName":"angular/angular.NgRoutingUsePushState","preview":"<p>Allows configuration of Router.useFragment. By default <a>angular/angular.NgRoutingUsePushState.usePushState</a> is\ntrue, so the router will listen to <a>angular/dart-dom-html.Window.onPopState</a> and route URLs like\n\"http://host:port/foo/bar?baz=qux\". Both the path and query parts of the URL\nare used by the router. If <a>angular/angular.NgRoutingUsePushState.usePushState</a> is false, router will listen to\n<a>angular/dart-dom-html.Window.onHashChange</a> and route URLs like\n\"http://host:port/path#/foo/bar?baz=qux\". Everything after hash (#) is used\nby the router.</p>"},{"name":"NgShow","qualifiedName":"angular/angular.NgShow","preview":"<p>The ngShow directive shows or hides the given HTML element based on the\nexpression provided to the ngHide attribute. The element is shown or hidden\nby changing the removing or adding the ng-hide CSS class onto the element.</p>"},{"name":"NgSource","qualifiedName":"angular/angular.NgSource","preview":"<p>In browser some attributes have network side-effect. If the attribute\nhas <code>{{interpolation}}</code> in it it may cause browser to fetch bogus URLs.</p>"},{"name":"NgStyle","qualifiedName":"angular/angular.NgStyle","preview":"<p>The <code>NgStyle</code> directive allows you to set CSS style on an HTML element conditionally.</p>"},{"name":"NgSwitch","qualifiedName":"angular/angular.NgSwitch","preview":"<p>The ngSwitch directive is used to conditionally swap DOM structure on your\ntemplate based on a scope expression. Elements within ngSwitch but without\nngSwitchWhen or ngSwitchDefault directives will be preserved at the location\nas specified in the template.</p>"},{"name":"NgSwitchDefault","qualifiedName":"angular/angular.NgSwitchDefault"},{"name":"NgSwitchWhen","qualifiedName":"angular/angular.NgSwitchWhen"},{"name":"NgTemplate","qualifiedName":"angular/angular.NgTemplate","preview":"<p>The <a>angular/angular.NgTemplate</a> allows one to preload an Angular template\ninto the <a>angular/angular.TemplateCache</a>.  It works on <code>&lt;template&gt;</code> and <code>&lt;script&gt;</code> elements\nthat have <code>type=\"text/ng-template</code>.  For such elements, The entire contents\nof the elements are loaded into the <a>angular/angular.TemplateCache</a> under the URL specified\nby the <code>id</code> attribute.</p>"},{"name":"NgTrueValue","qualifiedName":"angular/angular.NgTrueValue","preview":"<p>Assigns the value of a bound expression to the model when an input checkbox is\nchecked.</p>"},{"name":"NgTwoWay","qualifiedName":"angular/angular.NgTwoWay","preview":"<p>When applied as an annotation on a directive field specifies that\nthe field is to be mapped to DOM attribute with the provided <a>angular/angular.DirectiveAnnotation.attrName</a>.\nThe value of the attribute to be treated as a two-way expression,\nequivalent to <code>&lt;=&gt;</code> specification.</p>"},{"name":"NgUnless","qualifiedName":"angular/angular.NgUnless","preview":"<p>The <code>ng-unless</code> directive complements the <code>ng-if</code> (provided by\n<a>angular/angular.NgIf</a>) directive.</p>"},{"name":"NgValidator","qualifiedName":"angular/angular.NgValidator","preview":"<p>NgValidator is the class interface for performing validations for an NgModel instance.</p>"},{"name":"NgValue","qualifiedName":"angular/angular.NgValue","preview":"<p>Binds an expression to the value of a radio element or option,\nto be used when that element is selected.</p>"},{"name":"NgView","qualifiedName":"angular/angular.NgView","preview":"<p>A directive that works with the <a>angular/angular.Router</a> and loads the template associated\nwith the current route.</p>"},{"name":"NoOpAnimation","qualifiedName":"angular/angular.NoOpAnimation","preview":"<p>Completed animation handle that is used when an animation is ignored and the\nfinal effect of the animation is immediately completed.</p>"},{"name":"NullTreeSanitizer","qualifiedName":"angular/angular.NullTreeSanitizer"},{"name":"Number","qualifiedName":"angular/angular.Number","preview":"<p>Formats a number as text.</p>"},{"name":"OptionValue","qualifiedName":"angular/angular.OptionValue","preview":"<p>Since the value attribute of the OPTION can only be a string, Angular\nprovides ng-value which allows binding to any expression.</p>"},{"name":"OrderBy","qualifiedName":"angular/angular.OrderBy","preview":"<p>Orders the the elements of a list using a predicate.</p>"},{"name":"Parser","qualifiedName":"angular/angular.Parser","preview":"<p>Placeholder for DI. The parser you are looking for is DynamicParser.</p>"},{"name":"PrototypeMap","qualifiedName":"angular/angular.PrototypeMap"},{"name":"PureFunctionAST","qualifiedName":"angular/angular.PureFunctionAST","preview":"<p>SYNTAX: fn(arg0, arg1, ...)</p>"},{"name":"RootScope","qualifiedName":"angular/angular.RootScope","preview":"<p>Every Angular application has exactly one RootScope. RootScope extends Scope, adding\nservices related to change detection, async unit-of-work processing, and DOM read/write queues.\nThe RootScope can not be destroyed.</p>"},{"name":"RootWatchGroup","qualifiedName":"angular/angular.RootWatchGroup","preview":"<p><a>angular/angular.RootWatchGroup</a></p>"},{"name":"Routable","qualifiedName":"angular/angular.Routable"},{"name":"Route","qualifiedName":"angular/angular.Route","preview":"<p><a>angular/angular.Route</a> represents a node in the route tree.</p>"},{"name":"RouteEnterEvent","qualifiedName":"angular/angular.RouteEnterEvent"},{"name":"RouteEvent","qualifiedName":"angular/angular.RouteEvent","preview":"<p>Route enter or leave event.</p>"},{"name":"RouteHandle","qualifiedName":"angular/angular.RouteHandle","preview":"<p>A helper Router handle that scopes all route event subsriptions to it's\ninstance and provides an convinience <a>angular/angular.RouteHandle.discard</a> method.</p>"},{"name":"RouteImpl","qualifiedName":"angular/angular.RouteImpl","preview":"<p>Route is a node in the tree of routes. The edge leading to the route is\ndefined by path.</p>"},{"name":"RouteInitializer","qualifiedName":"angular/angular.RouteInitializer","preview":"<p>An interface that must be implemented by the user of routing library and\nshould include the route initialization.</p>"},{"name":"RouteLeaveEvent","qualifiedName":"angular/angular.RouteLeaveEvent"},{"name":"RoutePreEnterEvent","qualifiedName":"angular/angular.RoutePreEnterEvent"},{"name":"RoutePreLeaveEvent","qualifiedName":"angular/angular.RoutePreLeaveEvent"},{"name":"RouteProvider","qualifiedName":"angular/angular.RouteProvider","preview":"<p>Class that can be injected to retrieve information about the current route.\nFor example:</p>"},{"name":"RouteStartEvent","qualifiedName":"angular/angular.RouteStartEvent","preview":"<p>Event emitted when routing starts.</p>"},{"name":"RouteViewFactory","qualifiedName":"angular/angular.RouteViewFactory","preview":"<p>A factory of route to template bindings.</p>"},{"name":"Router","qualifiedName":"angular/angular.Router","preview":"<p>Stores a set of UrlPattern to Handler associations and provides methods\nfor calling a handler for a URL path, listening to <a>angular/dart-dom-html.Window</a> history events,\nand creating HTML event handlers that navigate to a URL.</p>"},{"name":"RoutingModule","qualifiedName":"angular/angular.RoutingModule"},{"name":"Scope","qualifiedName":"angular/angular.Scope","preview":"<p><a>angular/angular.Scope</a> is represents a collection of <a>angular/angular.Scope.watch</a>es observeers, and <a>angular/angular.Scope.context</a>\nfor the watchers, observers and <a>angular/angular.Scope.eval</a>uations. Scopes structure loosely\nmimics the DOM structure. Scopes and Views are bound to each other.\nAs scopes are created and destroyed by ViewFactory they are responsible\nfor change detection, change processing and memory management.</p>"},{"name":"ScopeDigestTTL","qualifiedName":"angular/angular.ScopeDigestTTL","preview":"<p>Allows the configuration of Scope.digest iteration maximum time-to-live\nvalue. Digest keeps checking the state of the watcher getters until it\ncan execute one full iteration with no watchers triggering. TTL is used\nto prevent an infinite loop where watch A triggers watch B which in turn\ntriggers watch A. If the system does not stabilize in TTL iterations then\nthe digest is stopped and an exception is thrown.</p>"},{"name":"ScopeEvent","qualifiedName":"angular/angular.ScopeEvent","preview":"<p>Injected into the listener function within <a>angular/angular.Scope.on</a> to provide\nevent-specific details to the scope listener.</p>"},{"name":"ScopeStats","qualifiedName":"angular/angular.ScopeStats","preview":"<p>ScopeStats collects and emits statistics about a <a>angular/angular.Scope</a>.</p>"},{"name":"ScopeStatsConfig","qualifiedName":"angular/angular.ScopeStatsConfig","preview":"<p>ScopeStatsConfig is used to modify behavior of <a>angular/angular.ScopeStats</a>. You can use this\nobject to modify behavior at runtime too.</p>"},{"name":"ScopeStatsEmitter","qualifiedName":"angular/angular.ScopeStatsEmitter","preview":"<p>ScopeStatsEmitter is in charge of formatting the <a>angular/angular.ScopeStats</a> and outputting\na message.</p>"},{"name":"ShadowRootAware","qualifiedName":"angular/angular.ShadowRootAware","preview":"<p>Implementing components <a>angular/angular.ShadowRootAware.onShadowRoot</a> method will be called when\nthe template for the component has been loaded and inserted into Shadow DOM.\nIt is guaranteed that when <a>angular/angular.ShadowRootAware.onShadowRoot</a> is invoked, that shadow DOM\nhas been loaded and is ready.</p>"},{"name":"Stringify","qualifiedName":"angular/angular.Stringify","preview":"<p>Converts an object to a string.</p>"},{"name":"TemplateCache","qualifiedName":"angular/angular.TemplateCache","preview":"<p>Infinite cache service for templates loaded from URLs.</p>"},{"name":"Uppercase","qualifiedName":"angular/angular.Uppercase","preview":"<p>Converts a string to uppercase.</p>"},{"name":"UrlMatch","qualifiedName":"angular/angular.UrlMatch","preview":"<p>Object representing a successful URL match.</p>"},{"name":"UrlMatcher","qualifiedName":"angular/angular.UrlMatcher","preview":"<p>A reversible URL matcher interface.</p>"},{"name":"UrlRewriter","qualifiedName":"angular/angular.UrlRewriter"},{"name":"View","qualifiedName":"angular/angular.View","preview":"<p>A View is a fundamental building block of DOM. It is a chunk of DOM which\ncan not be structurally changed. A View can have <a>angular/angular.ViewPort</a> placeholders\nembedded in its DOM.  A <a>angular/angular.ViewPort</a> can contain other <a>angular/angular.View</a>s and it is the\nonly way in which DOM structure can be modified.</p>"},{"name":"ViewCache","qualifiedName":"angular/angular.ViewCache","preview":"<p>ViewCache is used to cache the compilation of templates into <a>angular/angular.View</a>s.\nIt can be used synchronously if HTML is known or asynchronously if the\ntemplate HTML needs to be looked up from the URL.</p>"},{"name":"ViewFactory","qualifiedName":"angular/angular.ViewFactory"},{"name":"ViewPort","qualifiedName":"angular/angular.ViewPort","preview":"<p>A ViewPort maintains an ordered list of <a>angular/angular.View</a>'s. It contains a\n<a>angular/angular.ViewPort.placeholder</a> node that is used as the insertion point for view nodes.</p>"},{"name":"Visitor","qualifiedName":"angular/angular.Visitor"},{"name":"VmTurnZone","qualifiedName":"angular/angular.VmTurnZone","preview":"<p>A Zone wrapper that lets you schedule tasks after its private microtask\nqueue is exhausted but before the next \"turn\", i.e. event loop iteration.\nThis lets you freely schedule microtasks that prepare data, and set an\n<a>angular/angular.VmTurnZone.onTurnDone</a> handler that will consume that data after it's ready but before\nthe browser has a chance to re-render.\nThe wrapper maintains an \"inner\" and \"outer\" Zone and a private queue of\nall the microtasks scheduled on the inner Zone.</p>"},{"name":"Watch","qualifiedName":"angular/angular.Watch","preview":"<p><a>angular/angular.Watch</a> corresponds to an individual watch registration on the watchGrp.</p>"},{"name":"WatchGroup","qualifiedName":"angular/angular.WatchGroup","preview":"<p><a>angular/angular.WatchGroup</a> is a logical grouping of a set of watches. <a>angular/angular.WatchGroup</a>s are\norganized into a hierarchical tree parent-children configuration.\n<a>angular/angular.WatchGroup</a> builds upon <a>angular/change_detection.ChangeDetector</a> and adds expression (field chains\nas in <code>a.b.c</code>) support as well as support function/closure/method (function\ninvocation as in <code>a.b()</code>) watching.</p>"}],"typedef":{"ChangeLog":{"name":"ChangeLog","qualifiedName":"angular/angular.ChangeLog","comment":"","return":"void","parameters":{"expression":{"name":"expression","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"current":{"name":"current","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"previous":{"name":"previous","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[],"generics":{}},"FactoryFn":{"name":"FactoryFn","qualifiedName":"angular/angular.FactoryFn","comment":"","return":"dynamic","parameters":{"injector":{"name":"injector","optional":false,"named":false,"default":false,"type":[{"outer":"angular/angular.Injector","inner":[]}],"value":null,"annotations":[]}},"annotations":[],"generics":{}},"ReactionFn":{"name":"ReactionFn","qualifiedName":"angular/angular.ReactionFn","comment":"<p>A function that is notified of changes to the model.</p>\n<p>ReactionFn is a function implemented by the developer that executes when a change is detected\nin a watched expression.</p><ul><li>value: The current value of the watched expression.</li><li>previousValue: The previous value of the watched expression.</li></ul>\n<p>If the expression is watching a collection (a list or a map), then value is wrapped in\na <a>angular/change_detection.CollectionChangeItem</a> that lists all the changes.</p>","return":"void","parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"previousValue":{"name":"previousValue","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[],"generics":{},"preview":"<p>A function that is notified of changes to the model.</p>"},"RequestErrorInterceptor":{"name":"RequestErrorInterceptor","qualifiedName":"angular/angular.RequestErrorInterceptor","comment":"","return":"dynamic","parameters":{"dynamic":{"name":"dynamic","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[],"generics":{}},"RequestInterceptor":{"name":"RequestInterceptor","qualifiedName":"angular/angular.RequestInterceptor","comment":"","return":"dynamic","parameters":{"HttpResponseConfig":{"name":"HttpResponseConfig","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[],"generics":{}},"Response":{"name":"Response","qualifiedName":"angular/angular.Response","comment":"","return":"dynamic","parameters":{"HttpResponse":{"name":"HttpResponse","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[],"generics":{}},"ResponseError":{"name":"ResponseError","qualifiedName":"angular/angular.ResponseError","comment":"","return":"dynamic","parameters":{"dynamic":{"name":"dynamic","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[],"generics":{}},"RouteEnterEventHandler":{"name":"RouteEnterEventHandler","qualifiedName":"angular/angular.RouteEnterEventHandler","comment":"","return":"void","parameters":{"event":{"name":"event","optional":false,"named":false,"default":false,"type":[{"outer":"angular/angular.RouteEnterEvent","inner":[]}],"value":null,"annotations":[]}},"annotations":[],"generics":{}},"RouteInitializerFn":{"name":"RouteInitializerFn","qualifiedName":"angular/angular.RouteInitializerFn","comment":"<p>An typedef that must be implemented by the user of routing library and\nshould include the route initialization.</p>\n<p>The function will be called by the framework once the router is\ninstantiated but before NgBindRouteDirective and NgViewDirective.</p>","return":"void","parameters":{"router":{"name":"router","optional":false,"named":false,"default":false,"type":[{"outer":"angular/angular.Router","inner":[]}],"value":null,"annotations":[]},"viewFactory":{"name":"viewFactory","optional":false,"named":false,"default":false,"type":[{"outer":"angular/angular.RouteViewFactory","inner":[]}],"value":null,"annotations":[]}},"annotations":[],"generics":{},"preview":"<p>An typedef that must be implemented by the user of routing library and\nshould include the route initialization.</p>"},"RouteLeaveEventHandler":{"name":"RouteLeaveEventHandler","qualifiedName":"angular/angular.RouteLeaveEventHandler","comment":"","return":"void","parameters":{"event":{"name":"event","optional":false,"named":false,"default":false,"type":[{"outer":"angular/angular.RouteLeaveEvent","inner":[]}],"value":null,"annotations":[]}},"annotations":[],"generics":{}},"RoutePreEnterEventHandler":{"name":"RoutePreEnterEventHandler","qualifiedName":"angular/angular.RoutePreEnterEventHandler","comment":"","return":"void","parameters":{"event":{"name":"event","optional":false,"named":false,"default":false,"type":[{"outer":"angular/angular.RoutePreEnterEvent","inner":[]}],"value":null,"annotations":[]}},"annotations":[],"generics":{}},"RoutePreLeaveEventHandler":{"name":"RoutePreLeaveEventHandler","qualifiedName":"angular/angular.RoutePreLeaveEventHandler","comment":"","return":"void","parameters":{"event":{"name":"event","optional":false,"named":false,"default":false,"type":[{"outer":"angular/angular.RoutePreLeaveEvent","inner":[]}],"value":null,"annotations":[]}},"annotations":[],"generics":{}},"TypeFactory":{"name":"TypeFactory","qualifiedName":"angular/angular.TypeFactory","comment":"<p>Produces an instance of some type, provided factory produces instances of\nthe dependencies that type.</p>","return":"dart-core.Object","parameters":{"factory":{"name":"factory","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dynamic","inner":[]}],"parameters":{"type":{"name":"type","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Type","inner":[]}],"value":null,"annotations":[]},"annotation":{"name":"annotation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Type","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[],"generics":{},"preview":"<p>Produces an instance of some type, provided factory produces instances of\nthe dependencies that type.</p>"},"Visibility":{"name":"Visibility","qualifiedName":"angular/angular.Visibility","comment":"<p>If owned by a <a>angular/di-provider.Provider</a> P bound by the defining injector, then this\nreturns whether P is visible to the requesting injector.\nSee <a>angular/angular.Injector.get</a>.</p>","return":"dart-core.bool","parameters":{"requesting":{"name":"requesting","optional":false,"named":false,"default":false,"type":[{"outer":"angular/angular.Injector","inner":[]}],"value":null,"annotations":[]},"defining":{"name":"defining","optional":false,"named":false,"default":false,"type":[{"outer":"angular/angular.Injector","inner":[]}],"value":null,"annotations":[]}},"annotations":[],"generics":{},"preview":"<p>If owned by a <a>angular/di-provider.Provider</a> P bound by the defining injector, then this\nreturns whether P is visible to the requesting injector.\nSee <a>angular/angular.Injector.get</a>.</p>"}},"error":[{"name":"CircularDependencyError","qualifiedName":"angular/angular.CircularDependencyError"},{"name":"InvalidBindingError","qualifiedName":"angular/angular.InvalidBindingError"},{"name":"NoProviderError","qualifiedName":"angular/angular.NoProviderError"}]},"packageName":"angular","packageIntro":"<h1>AngularDart</h1>\n<p>A port of <a href=\"http://angularjs.org/\">Angular</a> to <a href=\"http://www.dartlang.org\">Dart</a>.</p>\n<h2>Installing</h2>\n<p>Follow the instructions on <a href=\"http://pub.dartlang.org/packages/angular#installing\">AngularDart's page on pub</a>.</p>\n<h2>API documentation</h2>\n<p>Read the autogenerated <a href=\"https://docs.angulardart.org\">API documentation</a>.</p>\n<h2>Learning more</h2>\n<p>Study the <a href=\"https://angulardart.org/tutorial\">AngularDart Tutorial</a> to learn more about Angular\nin Dart.</p>\n<h2>Joining the discussion</h2>\n<p>Discuss AngularDart on the <a href=\"https://groups.google.com/forum/#!forum/angular-dart\">mailing list</a>,\nask questions on <a href=\"http://stackoverflow.com/questions/tagged/angular.dart\">StackOverflow</a>,\nfollow <a href=\"https://plus.google.com/117340875933142003564/posts\">+AngularDart on Google+</a>,\nand follow <a href=\"https://twitter.com/AngularDart\">@AngularDart</a> and <a href=\"https://twitter.com/AngularJS\">@AngularJS</a> on Twitter.</p>\n<h2>Filing bugs</h2>\n<p>Please file bugs and feature requests using the <a href=\"https://github.com/angular/angular.dart/issues?state=open\">Github Issues Tracker</a>.</p>\n<h2>I want to help</h2>\n<p>Excellent read up on <a href=\"https://github.com/angular/angular.dart/blob/master/CONTRIBUTING.md\">contributing</a>.</p>"}