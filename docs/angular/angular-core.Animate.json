{"name":"Animate","qualifiedName":"angular/angular-core.Animate","comment":"<p>The <a>angular/angular-core.Animate</a> service provides dom lifecycle management, detection and\nanalysis of css animations, and hooks for custom animations. When any of\nthese animations are run, <a>angular/angular-core.Animation</a>s are returned so the animation can be\ncontrolled and so that custom dom manipulations can occur when animations\ncomplete.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{"addClass":{"name":"addClass","qualifiedName":"angular/angular-core.Animate.addClass","comment":"<p>Add the <a>angular/angular-core.Animate.addClass.cssClass</a> to the classes on <a>angular/angular-core.Animate.addClass.element</a> after running any\ndefined animations.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular/angular-core.Animation","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Element","inner":[]}],"value":null,"annotations":[]},"cssClass":{"name":"cssClass","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"insert":{"name":"insert","qualifiedName":"angular/angular-core.Animate.insert","comment":"<p>Perform an 'enter' animation for each element in <a>angular/angular-core.Animate.insert.nodes</a>. The elements\nmust exist in the dom. This is equivalent to running enter on each element\nin <a>angular/angular-core.Animate.insert.nodes</a> and returning Future.wait(handles); for the onCompleted\nproperty on <a>angular/angular-core.Animation</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular/angular-core.Animation","inner":[]}],"parameters":{"nodes":{"name":"nodes","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-dom-html.Node","inner":[]}]}],"value":null,"annotations":[]},"parent":{"name":"parent","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Node","inner":[]}],"value":null,"annotations":[]},"insertBefore":{"name":"insertBefore","optional":true,"named":true,"default":false,"type":[{"outer":"dart-dom-html.Node","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"move":{"name":"move","qualifiedName":"angular/angular-core.Animate.move","comment":"<p>Perform a 'move' animation for each element in <a>angular/angular-core.Animate.move.nodes</a>. The elements\nmust exist in the dom. This is equivalent to running move on each element\nin <a>angular/angular-core.Animate.move.nodes</a> and returning Future.wait(handles); for the onCompleted\nproperty on <a>angular/angular-core.Animation</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular/angular-core.Animation","inner":[]}],"parameters":{"nodes":{"name":"nodes","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-dom-html.Node","inner":[]}]}],"value":null,"annotations":[]},"parent":{"name":"parent","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Node","inner":[]}],"value":null,"annotations":[]},"insertBefore":{"name":"insertBefore","optional":true,"named":true,"default":false,"type":[{"outer":"dart-dom-html.Node","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"remove":{"name":"remove","qualifiedName":"angular/angular-core.Animate.remove","comment":"<p>Perform a 'remove' animation for each element in <a>angular/angular-core.Animate.remove.nodes</a>. The elements\nmust exist in the dom and should not be detached until the onCompleted\nfuture on the <a>angular/angular-core.Animation</a> is executed AND the <a>angular/angular-core.AnimationResult</a> is\n<a>angular/angular-core-dom_internal.AnimationResult.COMPLETED</a> or <a>angular/angular-core-dom_internal.AnimationResult.COMPLETED_IGNORED</a>.</p>\n<p>This is equivalent to running remove on each element in <a>angular/angular-core.Animate.remove.nodes</a> and\nreturning Future.wait(handles); for the onCompleted property on\n<a>angular/angular-core.Animation</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular/angular-core.Animation","inner":[]}],"parameters":{"nodes":{"name":"nodes","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-dom-html.Node","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"removeClass":{"name":"removeClass","qualifiedName":"angular/angular-core.Animate.removeClass","comment":"<p>Remove the <a>angular/angular-core.Animate.removeClass.cssClass</a> from the classes on <a>angular/angular-core.Animate.removeClass.element</a> after running any\ndefined animations.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular/angular-core.Animation","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Element","inner":[]}],"value":null,"annotations":[]},"cssClass":{"name":"cssClass","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"angular/angular-core.Animate.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>angular/angular-core.Animate.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"angular/angular-core.Animate.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"angular/angular-core.Animate.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>angular/angular-core.Animate.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>angular/angular-core.Animate.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"angular/angular-core.Animate.noSuchMethod","comment":"<p><a>angular/angular-core.Animate.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>angular/angular-core.Animate.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>angular/angular-core.Animate.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>angular/angular-core.Animate.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"angular/angular-core.Animate.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[{"name":"angular/angular-core-annotation_src.Injectable","parameters":[]}],"generics":{}}