{"name":"ScopeAware","qualifiedName":"angular/angular-core.ScopeAware","comment":"<p>When a <a href=\"#angular/angular-core-annotation.Directive\">Directive</a> or the root context class\nimplements <a>angular/angular-core.ScopeAware</a> the scope setter will be called to set the <a>angular/angular-core.Scope</a> on this component.</p>\n<p>The order of calls is as follows:</p><ul><li><a href=\"#angular/angular-core-annotation.Component\">Component</a> instance is created.</li><li><a>angular/angular-core.Scope</a> instance is created (taking Component instance as evaluation context).</li><li>if Component is <a>angular/angular-core.ScopeAware</a>, set scope method is called with scope instance.</li></ul>\n<p><a>angular/angular-core.ScopeAware</a> is guaranteed to be called before <a href=\"#angular/angular-core-annotation.AttachAware\">AttachAware</a>\nor <a href=\"#angular/angular-core-annotation.DetachAware\">DetachAware</a> methods.</p>\n<p>Example:</p>\n<pre><code>@Component(...)\nclass MyComponent implements ScopeAware {\n  Watch watch;\n\n  MyComponent(Dependency myDep) {\n    // It is an error to add a Scope argument to the ctor and will result in a DI\n    // circular dependency error - the scope has a dependency on the component instance.\n  }\n\n  void set scope(Scope scope) {\n     // This setter gets called to initialize the scope\n     watch = scope.watch(\"expression\", (v, p) =&gt; ...);\n  }\n}\n</code></pre>","isAbstract":true,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{"scope=":{"name":"scope=","qualifiedName":"angular/angular-core.ScopeAware.scope=","comment":"","commentFrom":"angular-core.ScopeAware.scope=","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"scope":{"name":"scope","optional":false,"named":false,"default":false,"type":[{"outer":"angular/angular-core.Scope","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"getters":{},"constructors":{},"operators":{},"methods":{}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"angular/angular-core.ScopeAware.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>angular/angular-core.ScopeAware.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"angular/angular-core.ScopeAware.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"angular/angular-core.ScopeAware.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>angular/angular-core.ScopeAware.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>angular/angular-core.ScopeAware.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"angular/angular-core.ScopeAware.noSuchMethod","comment":"<p><a>angular/angular-core.ScopeAware.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>angular/angular-core.ScopeAware.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>angular/angular-core.ScopeAware.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>angular/angular-core.ScopeAware.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"angular/angular-core.ScopeAware.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}