{"name":"NgNullForm","qualifiedName":"angular/angular.NgNullForm","comment":"","isAbstract":false,"superclass":"angular/angular.NgNullControl","implements":["angular/angular.NgForm"],"subclass":[],"variables":{},"inheritedVariables":{"errors":{"name":"errors","qualifiedName":"angular/angular.NgControl.errors","comment":"","final":"true","static":"false","constant":"false","type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.List","inner":[{"outer":"angular/angular.NgControl","inner":[]}]}]}],"annotations":[]},"element":{"name":"element","qualifiedName":"angular/angular.NgNullControl.element","comment":"","final":"false","static":"false","constant":"false","type":[{"outer":"dart-dom-html.Element","inner":[]}],"annotations":[]}},"methods":{"setters":{},"getters":{"isEmpty":{"name":"isEmpty","qualifiedName":"angular/angular.NgNullForm.isEmpty","comment":"","commentFrom":"angular.NgForm.isEmpty","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isNotEmpty":{"name":"isNotEmpty","qualifiedName":"angular/angular.NgNullForm.isNotEmpty","comment":"","commentFrom":"angular.NgForm.isNotEmpty","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"values":{"name":"values","qualifiedName":"angular/angular.NgNullForm.values","comment":"","commentFrom":"angular.NgForm.values","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"keys":{"name":"keys","qualifiedName":"angular/angular.NgNullForm.keys","comment":"","commentFrom":"angular.NgForm.keys","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"length":{"name":"length","qualifiedName":"angular/angular.NgNullForm.length","comment":"","commentFrom":"angular.NgForm.length","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"angular/angular.NgNullForm.NgNullForm-","comment":"","commentFrom":"","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]}},"operators":{"[]":{"name":"[]","qualifiedName":"angular/angular.NgNullForm.[]","comment":"","commentFrom":"angular.NgForm.[]","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{"name":{"name":"name","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"[]=":{"name":"[]=","qualifiedName":"angular/angular.NgNullForm.[]=","comment":"","commentFrom":"angular.NgForm.[]=","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{"name":{"name":"name","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"value":{"name":"value","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"clear":{"name":"clear","qualifiedName":"angular/angular.NgNullForm.clear","comment":"","commentFrom":"angular.NgForm.clear","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"remove":{"name":"remove","qualifiedName":"angular/angular.NgNullForm.remove","comment":"","commentFrom":"angular.NgForm.remove","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{"_":{"name":"_","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"containsKey":{"name":"containsKey","qualifiedName":"angular/angular.NgNullForm.containsKey","comment":"","commentFrom":"angular.NgForm.containsKey","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{"_":{"name":"_","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"containsValue":{"name":"containsValue","qualifiedName":"angular/angular.NgNullForm.containsValue","comment":"","commentFrom":"angular.NgForm.containsValue","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{"_":{"name":"_","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"addAll":{"name":"addAll","qualifiedName":"angular/angular.NgNullForm.addAll","comment":"","commentFrom":"angular.NgForm.addAll","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{"_":{"name":"_","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"forEach":{"name":"forEach","qualifiedName":"angular/angular.NgNullForm.forEach","comment":"","commentFrom":"angular.NgForm.forEach","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{"_":{"name":"_","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"putIfAbsent":{"name":"putIfAbsent","qualifiedName":"angular/angular.NgNullForm.putIfAbsent","comment":"","commentFrom":"angular.NgForm.putIfAbsent","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{"_":{"name":"_","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"__":{"name":"__","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{"name=":{"name":"name=","qualifiedName":"angular/angular.NgNullForm.name=","comment":"","commentFrom":"","inheritedFrom":"angular.NgForm.name=","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{"value":{"name":"value","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"pristine=":{"name":"pristine=","qualifiedName":"angular/angular.NgNullForm.pristine=","comment":"","commentFrom":"","inheritedFrom":"angular.NgControl.pristine=","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{"value":{"name":"value","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"dirty=":{"name":"dirty=","qualifiedName":"angular/angular.NgNullForm.dirty=","comment":"","commentFrom":"","inheritedFrom":"angular.NgControl.dirty=","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{"value":{"name":"value","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"valid=":{"name":"valid=","qualifiedName":"angular/angular.NgNullForm.valid=","comment":"","commentFrom":"","inheritedFrom":"angular.NgControl.valid=","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{"value":{"name":"value","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"invalid=":{"name":"invalid=","qualifiedName":"angular/angular.NgNullForm.invalid=","comment":"","commentFrom":"","inheritedFrom":"angular.NgControl.invalid=","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{"value":{"name":"value","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"angular/angular.NgNullForm.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>angular/angular.NgNullForm.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"angular/angular.NgNullForm.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"name":{"name":"name","qualifiedName":"angular/angular.NgNullForm.name","comment":"","commentFrom":"","inheritedFrom":"angular.NgForm.name","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[{"name":"angular.NgAttr","parameters":["@"]}]},"element":{"name":"element","qualifiedName":"angular/angular.NgNullForm.element","comment":"","commentFrom":"","inheritedFrom":"angular.NgControl.element","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"pristine":{"name":"pristine","qualifiedName":"angular/angular.NgNullForm.pristine","comment":"","commentFrom":"","inheritedFrom":"angular.NgControl.pristine","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"dirty":{"name":"dirty","qualifiedName":"angular/angular.NgNullForm.dirty","comment":"","commentFrom":"","inheritedFrom":"angular.NgControl.dirty","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"valid":{"name":"valid","qualifiedName":"angular/angular.NgNullForm.valid","comment":"","commentFrom":"","inheritedFrom":"angular.NgControl.valid","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"invalid":{"name":"invalid","qualifiedName":"angular/angular.NgNullForm.invalid","comment":"","commentFrom":"","inheritedFrom":"angular.NgControl.invalid","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"keys":{"name":"keys","qualifiedName":"angular/angular.NgNullForm.keys","comment":"<p>The keys of this.</p>\n<p>The returned iterable has efficient <code>length</code> and <code>contains</code> operations,\nbased on <a>angular/angular.NgNullForm.length</a> and <a>angular/angular.NgNullForm.containsKey</a> of the map.</p>\n<p>The order of iteration is defined by the individual <code>Map</code> implementation,\nbut must be consistent between changes to the map.</p>","commentFrom":"dart-core.Map.keys","inheritedFrom":"angular.NgForm.keys","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"values":{"name":"values","qualifiedName":"angular/angular.NgNullForm.values","comment":"<p>The values of this.</p>\n<p>The values are iterated in the order of their corresponding keys.\nThis means that iterating <a>angular/angular.NgNullForm.keys</a> and <a>angular/angular.NgNullForm.values</a> in parrallel will\nprovided matching pairs of keys and values.</p>\n<p>The returned iterable has an efficient <code>length</code> method based on the\n<a>angular/angular.NgNullForm.length</a> of the map.</p>","commentFrom":"dart-core.Map.values","inheritedFrom":"angular.NgForm.values","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"length":{"name":"length","qualifiedName":"angular/angular.NgNullForm.length","comment":"<p>The number of key-value pairs in the map.</p>","commentFrom":"dart-core.Map.length","inheritedFrom":"angular.NgForm.length","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"isEmpty":{"name":"isEmpty","qualifiedName":"angular/angular.NgNullForm.isEmpty","comment":"<p>Returns true if there is no key-value pair in the map.</p>","commentFrom":"dart-core.Map.isEmpty","inheritedFrom":"angular.NgForm.isEmpty","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isNotEmpty":{"name":"isNotEmpty","qualifiedName":"angular/angular.NgNullForm.isNotEmpty","comment":"<p>Returns true if there is at least one key-value pair in the map.</p>","commentFrom":"dart-core.Map.isNotEmpty","inheritedFrom":"angular.NgForm.isNotEmpty","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"angular/angular.NgNullForm.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>angular/angular.NgNullForm.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>angular/angular.NgNullForm.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"[]":{"name":"[]","qualifiedName":"angular/angular.NgNullForm.[]","comment":"<p>Returns the value for the given key or null if key is not\nin the map. Because null values are supported, one should either\nuse <a>angular/angular.NgNullForm.containsKey</a> to distinguish between an absent key and a null\nvalue, or use the <a>angular/angular.NgNullForm.putIfAbsent</a> method.</p>","commentFrom":"dart-core.Map.[]","inheritedFrom":"angular.NgForm.[]","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{"name":{"name":"name","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"[]=":{"name":"[]=","qualifiedName":"angular/angular.NgNullForm.[]=","comment":"<p>Associates the <a>angular/angular.NgNullForm.[]=.key</a> with the given <a>angular/angular.NgNullForm.[]=.value</a>.</p>\n<p>If the key was already in the map, its associated value is changed.\nOtherwise the key-value pair is added to the map.</p>","commentFrom":"dart-core.Map.[]=","inheritedFrom":"angular.NgForm.[]=","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{"key":{"name":"key","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"value":{"name":"value","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"angular/angular.NgNullForm.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"angular/angular.NgNullForm.noSuchMethod","comment":"<p><a>angular/angular.NgNullForm.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>angular/angular.NgNullForm.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>angular/angular.NgNullForm.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>angular/angular.NgNullForm.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"detach":{"name":"detach","qualifiedName":"angular/angular.NgNullForm.detach","comment":"","commentFrom":"","inheritedFrom":"angular.NgControl.detach","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"reset":{"name":"reset","qualifiedName":"angular/angular.NgNullForm.reset","comment":"","commentFrom":"","inheritedFrom":"angular.NgControl.reset","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"addControl":{"name":"addControl","qualifiedName":"angular/angular.NgNullForm.addControl","comment":"<p>Registers a form control into the form for validation.</p><ul><li><a>angular/angular.NgNullForm.addControl.control</a> - The form control which will be registered (see ngControl).</li></ul>","commentFrom":"","inheritedFrom":"angular.NgControl.addControl","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{"control":{"name":"control","optional":"false","named":"false","default":"false","type":[{"outer":"angular/angular.NgControl","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"removeControl":{"name":"removeControl","qualifiedName":"angular/angular.NgNullForm.removeControl","comment":"<p>De-registers a form control from the list of controls associated with the\nform.</p><ul><li>\n<p><a>angular/angular.NgNullForm.removeControl.control</a> - The form control which will be de-registered (see\nngControl).</p></li></ul>","commentFrom":"","inheritedFrom":"angular.NgControl.removeControl","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{"control":{"name":"control","optional":"false","named":"false","default":"false","type":[{"outer":"angular/angular.NgControl","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"updateControlValidity":{"name":"updateControlValidity","qualifiedName":"angular/angular.NgNullForm.updateControlValidity","comment":"<p>Sets the validity status of the given control/errorType pair within\nthe list of controls registered on the form. Depending on the validation\nstate of the existing controls, this will either change valid to true\nor invalid to true depending on if all controls are valid or if one\nor more of them is invalid.</p><ul><li><a>angular/angular.NgNullForm.updateControlValidity.control</a> - The registered control object (see ngControl).</li><li>\n<p><a>angular/angular.NgNullForm.updateControlValidity.errorType</a> - The error associated with the control (e.g. required, url,\nnumber, etc...).</p></li><li>\n<p><a>angular/angular.NgNullForm.updateControlValidity.isValid</a> - Whether the given error is valid or not (false would mean the\nerror is real).</p></li></ul>","commentFrom":"","inheritedFrom":"angular.NgControl.updateControlValidity","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{"control":{"name":"control","optional":"false","named":"false","default":"false","type":[{"outer":"angular/angular.NgControl","inner":[]}],"value":"null","annotations":[]},"errorType":{"name":"errorType","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"isValid":{"name":"isValid","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.bool","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"containsValue":{"name":"containsValue","qualifiedName":"angular/angular.NgNullForm.containsValue","comment":"<p>Returns true if this map contains the given value.</p>","commentFrom":"dart-core.Map.containsValue","inheritedFrom":"angular.NgForm.containsValue","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{"_":{"name":"_","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"containsKey":{"name":"containsKey","qualifiedName":"angular/angular.NgNullForm.containsKey","comment":"<p>Returns true if this map contains the given key.</p>","commentFrom":"dart-core.Map.containsKey","inheritedFrom":"angular.NgForm.containsKey","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{"_":{"name":"_","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"putIfAbsent":{"name":"putIfAbsent","qualifiedName":"angular/angular.NgNullForm.putIfAbsent","comment":"<p>If key is not associated to a value, calls ifAbsent and\nupdates the map by mapping key to the value returned by\nifAbsent. Returns the value in the map.</p>\n<pre><code>Map&lt;String, int&gt; scores = {'Bob': 36};\nfor (var key in ['Bob', 'Rohan', 'Sophena']) {\n  scores.putIfAbsent(key, () =&gt; key.length);\n}\nscores['Bob'];      // 36\nscores['Rohan'];    //  5\nscores['Sophena'];  //  7\n</code></pre>\n<p>The code that ifAbsent executes must not add or remove keys.</p>","commentFrom":"dart-core.Map.putIfAbsent","inheritedFrom":"angular.NgForm.putIfAbsent","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{"_":{"name":"_","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"__":{"name":"__","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"addAll":{"name":"addAll","qualifiedName":"angular/angular.NgNullForm.addAll","comment":"<p>Adds all key-value pairs of other to this map.</p>\n<p>If a key of other is already in this map, its value is overwritten.</p>\n<p>The operation is equivalent to doing <code>this[key] = value</code> for each key\nand associated value in other. It iterates over other, which must\ntherefore not change during the iteration.</p>","commentFrom":"dart-core.Map.addAll","inheritedFrom":"angular.NgForm.addAll","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{"_":{"name":"_","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"remove":{"name":"remove","qualifiedName":"angular/angular.NgNullForm.remove","comment":"<p>Removes the association for the given key. Returns the value for\nkey in the map or null if key is not in the map. Note that values\ncan be null and a returned null value does not always imply that the\nkey is absent.</p>","commentFrom":"dart-core.Map.remove","inheritedFrom":"angular.NgForm.remove","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{"_":{"name":"_","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"clear":{"name":"clear","qualifiedName":"angular/angular.NgNullForm.clear","comment":"<p>Removes all pairs from the map.</p>\n<p>After this, the map is empty.</p>","commentFrom":"dart-core.Map.clear","inheritedFrom":"angular.NgForm.clear","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"forEach":{"name":"forEach","qualifiedName":"angular/angular.NgNullForm.forEach","comment":"<p>Applies f to each {key, value} pair of the map.</p>\n<p>Adding or removing keys from the map during iteration is not allowed.</p>","commentFrom":"dart-core.Map.forEach","inheritedFrom":"angular.NgForm.forEach","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{"_":{"name":"_","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}