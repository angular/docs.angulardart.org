{"name":"angular-core","qualifiedName":"angular-core","comment":"<p>Core functionality for <a href=\"#angular/angular\">angular.dart</a>, a web framework for Dart.</p>\n<p>This library is included as part of <a href=\"#angular/angular\">angular.dart</a>. The angular.core library\nprovides all of the fundamental Classes and Type Definitions that provide the basis for\nformatters (in <a href=\"#angular-formatter\">angular .formatter</a>) and directives (in <a href=\"#angular-directive\">angular.directive</a>).</p>","variables":{},"functions":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{}},"classes":{"class":[{"name":"Parser","qualifiedName":"angular-core.Parser","preview":"<p>Placeholder for DI. The parser you are looking for is DynamicParser.</p>"},{"name":"ClosureMap","qualifiedName":"angular-core.ClosureMap"},{"name":"AvgStopwatch","qualifiedName":"angular-core.AvgStopwatch"},{"name":"FieldGetterFactory","qualifiedName":"angular-core.FieldGetterFactory"},{"name":"Animation","qualifiedName":"angular-core.Animation","preview":"<p>Animation handle for controlling and listening to animation completion.</p>"},{"name":"AnimationResult","qualifiedName":"angular-core.AnimationResult","preview":"<p>Final result of an animation after it is no longer attached to the element.</p>"},{"name":"BrowserCookies","qualifiedName":"angular-core.BrowserCookies","preview":"<p>This class provides low-level acces to the browser's cookies.\nIt is not meant to be used directly by applications.  Instead\nuse the Cookies service.</p>"},{"name":"Cache","qualifiedName":"angular-core.Cache","preview":"<p>The Cache interface.</p>"},{"name":"Compiler","qualifiedName":"angular-core.Compiler"},{"name":"Cookies","qualifiedName":"angular-core.Cookies","preview":"<p>Cookies service</p>"},{"name":"BoundViewFactory","qualifiedName":"angular-core.BoundViewFactory","preview":"<p>BoundViewFactory is a <a>angular-core.ViewFactory</a> which does not need Injector because\nit is pre-bound to an injector from the parent. This means that this\nBoundViewFactory can only be used from within a specific Directive such\nas NgRepeat, but it can not be stored in a cache.</p>"},{"name":"DirectiveMap","qualifiedName":"angular-core.DirectiveMap"},{"name":"ElementProbe","qualifiedName":"angular-core.ElementProbe","preview":"<p><a>angular-core.ElementProbe</a> is attached to each Element in the DOM. Its sole purpose is\nto allow access to the <a>di.Injector</a>, <a>angular-core.Scope</a>, and Directives for debugging and\nautomated test purposes. The information here is not used by Angular in any\nway.</p>"},{"name":"EventHandler","qualifiedName":"angular-core.EventHandler","preview":"<p><a>angular-core.EventHandler</a> is responsible for handling events bound using on-* syntax\n(i.e. <code>on-click=\"ctrl.doSomething();\"</code>). The root of the application has an\nEventHandler attached as does every <a>angular-core-annotation_src.Component</a>.</p>"},{"name":"Http","qualifiedName":"angular-core.Http","preview":"<p>The <a>angular-core.Http</a> service facilitates communication with the remote HTTP servers.\nIt uses dart:html's HttpRequest and provides a number of features on top\nof the core Dart library.</p>"},{"name":"HttpBackend","qualifiedName":"angular-core.HttpBackend","preview":"<p>HTTP backend used by the <a>angular-core.Http</a> service that delegates to dart:html's\nHttpRequest and deals with Dart bugs.</p>"},{"name":"HttpDefaultHeaders","qualifiedName":"angular-core.HttpDefaultHeaders","preview":"<p>Default header configuration.</p>"},{"name":"HttpDefaults","qualifiedName":"angular-core.HttpDefaults","preview":"<p>Injected into the <a>angular-core.Http</a> service.  This class contains application-wide\nHTTP defaults.</p>"},{"name":"HttpInterceptor","qualifiedName":"angular-core.HttpInterceptor","preview":"<p>HttpInterceptors are used to modify the Http request. They can be added to\n<a>angular-core.HttpInterceptors</a> or passed into <a>angular-core.Http.call</a>.</p>"},{"name":"HttpInterceptors","qualifiedName":"angular-core.HttpInterceptors","preview":"<p>A list of <a>angular-core.HttpInterceptor</a>s.</p>"},{"name":"HttpResponse","qualifiedName":"angular-core.HttpResponse","preview":"<p>The response for an HTTP request.  Returned from the <a>angular-core.Http</a> service.</p>"},{"name":"HttpResponseConfig","qualifiedName":"angular-core.HttpResponseConfig","preview":"<p>The request configuration of the request associated with this response.</p>"},{"name":"LocationWrapper","qualifiedName":"angular-core.LocationWrapper"},{"name":"NgElement","qualifiedName":"angular-core.NgElement"},{"name":"NoOpAnimation","qualifiedName":"angular-core.NoOpAnimation","preview":"<p>Completed animation handle that is used when an animation is ignored and the\nfinal effect of the animation is immediately completed.</p>"},{"name":"NullTreeSanitizer","qualifiedName":"angular-core.NullTreeSanitizer"},{"name":"Animate","qualifiedName":"angular-core.Animate","preview":"<p>The <a>angular-core.Animate</a> service provides dom lifecycle management, detection and\nanalysis of css animations, and hooks for custom animations. When any of\nthese animations are run, <a>angular-core.Animation</a>s are returned so the animation can be\ncontrolled and so that custom dom manipulations can occur when animations\ncomplete.</p>"},{"name":"UrlRewriter","qualifiedName":"angular-core.UrlRewriter"},{"name":"TemplateCache","qualifiedName":"angular-core.TemplateCache","preview":"<p>Infinite cache service for templates loaded from URLs.</p>"},{"name":"View","qualifiedName":"angular-core.View","preview":"<p>A View is a fundamental building block of DOM. It is a chunk of DOM which\ncan not be structurally changed. A View can have <a>angular-core.ViewPort</a> placeholders\nembedded in its DOM.  A <a>angular-core.ViewPort</a> can contain other <a>angular-core.View</a>s and it is the\nonly way in which DOM structure can be modified.</p>"},{"name":"ViewCache","qualifiedName":"angular-core.ViewCache","preview":"<p>ViewCache is used to cache the compilation of templates into <a>angular-core.View</a>s.\nIt can be used synchronously if HTML is known or asynchronously if the\ntemplate HTML needs to be looked up from the URL.</p>"},{"name":"ViewFactory","qualifiedName":"angular-core.ViewFactory"},{"name":"ViewPort","qualifiedName":"angular-core.ViewPort","preview":"<p>A ViewPort maintains an ordered list of <a>angular-core.View</a>'s. It contains a\n<a>angular-core.ViewPort.placeholder</a> node that is used as the insertion point for view nodes.</p>"},{"name":"CacheStats","qualifiedName":"angular-core.CacheStats"},{"name":"ExceptionHandler","qualifiedName":"angular-core.ExceptionHandler","preview":"<p>Any uncaught exception in angular expressions is delegated to this service.\nThe default implementation logs exceptions into console.</p>"},{"name":"Interpolate","qualifiedName":"angular-core.Interpolate","preview":"<p>Compiles a string with markup into an expression. This service is used by the\nHTML Compiler service for data binding.</p>"},{"name":"VmTurnZone","qualifiedName":"angular-core.VmTurnZone","preview":"<p>A Zone wrapper that lets you schedule tasks after its private microtask\nqueue is exhausted but before the next \"turn\", i.e. event loop iteration.\nThis lets you freely schedule microtasks that prepare data, and set an\n<a>angular-core.VmTurnZone.onTurnDone</a> handler that will consume that data after it's ready but before\nthe browser has a chance to re-render.\nThe wrapper maintains an \"inner\" and \"outer\" Zone and a private queue of\nall the microtasks scheduled on the inner Zone.</p>"},{"name":"PrototypeMap","qualifiedName":"angular-core.PrototypeMap"},{"name":"RootScope","qualifiedName":"angular-core.RootScope","preview":"<p>Every Angular application has exactly one RootScope. RootScope extends Scope, adding\nservices related to change detection, async unit-of-work processing, and DOM read/write queues.\nThe RootScope can not be destroyed.</p>"},{"name":"Scope","qualifiedName":"angular-core.Scope","preview":"<p><a>angular-core.Scope</a> is represents a collection of <a>angular-core.Scope.watch</a>es observeers, and <a>angular-core.Scope.context</a>\nfor the watchers, observers and <a>angular-core.Scope.eval</a>uations. Scopes structure loosely\nmimics the DOM structure. Scopes and Views are bound to each other.\nAs scopes are created and destroyed by ViewFactory they are responsible\nfor change detection, change processing and memory management.</p>"},{"name":"ScopeDigestTTL","qualifiedName":"angular-core.ScopeDigestTTL","preview":"<p>Allows the configuration of Scope.digest iteration maximum time-to-live\nvalue. Digest keeps checking the state of the watcher getters until it\ncan execute one full iteration with no watchers triggering. TTL is used\nto prevent an infinite loop where watch A triggers watch B which in turn\ntriggers watch A. If the system does not stabilize in TTL iterations then\nthe digest is stopped and an exception is thrown.</p>"},{"name":"ScopeEvent","qualifiedName":"angular-core.ScopeEvent","preview":"<p>Injected into the listener function within <a>angular-core.Scope.on</a> to provide\nevent-specific details to the scope listener.</p>"},{"name":"ScopeStats","qualifiedName":"angular-core.ScopeStats","preview":"<p>ScopeStats collects and emits statistics about a <a>angular-core.Scope</a>.</p>"},{"name":"ScopeStatsConfig","qualifiedName":"angular-core.ScopeStatsConfig","preview":"<p>ScopeStatsConfig is used to modify behavior of <a>angular-core.ScopeStats</a>. You can use this\nobject to modify behavior at runtime too.</p>"},{"name":"ScopeStatsEmitter","qualifiedName":"angular-core.ScopeStatsEmitter","preview":"<p>ScopeStatsEmitter is in charge of formatting the <a>angular-core.ScopeStats</a> and outputting\na message.</p>"},{"name":"Watch","qualifiedName":"angular-core.Watch","preview":"<p><a>angular-core.Watch</a> corresponds to an individual watch registration on the watchGrp.</p>"}],"typedef":{"RequestErrorInterceptor":{"name":"RequestErrorInterceptor","qualifiedName":"angular-core.RequestErrorInterceptor","comment":"","return":"dynamic","parameters":{"dynamic":{"name":"dynamic","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[],"generics":{}},"RequestInterceptor":{"name":"RequestInterceptor","qualifiedName":"angular-core.RequestInterceptor","comment":"","return":"dynamic","parameters":{"HttpResponseConfig":{"name":"HttpResponseConfig","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[],"generics":{}},"Response":{"name":"Response","qualifiedName":"angular-core.Response","comment":"","return":"dynamic","parameters":{"HttpResponse":{"name":"HttpResponse","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[],"generics":{}},"ResponseError":{"name":"ResponseError","qualifiedName":"angular-core.ResponseError","comment":"","return":"dynamic","parameters":{"dynamic":{"name":"dynamic","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[],"generics":{}}},"error":[]},"packageName":"","packageIntro":null}