{"name":"Mock","qualifiedName":"angular-mock.Mock","comment":"<p>The base class for all mocked objects.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":["angular-mock.MockDocument","angular-mock.MockHistory","angular-mock.MockLocation","angular-mock.MockWindow"],"variables":{"name":{"name":"name","qualifiedName":"angular-mock.Mock.name","comment":"<p>The mock name. Needed if the log is shared; optional otherwise.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"log":{"name":"log","qualifiedName":"angular-mock.Mock.log","comment":"<p>The <a>angular-mock.Mock.log</a> of calls made. Only used if <a>angular-mock.Mock.name</a> is null.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"mock.LogEntryList","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{"logging=":{"name":"logging=","qualifiedName":"angular-mock.Mock.logging=","comment":"","commentFrom":"angular-mock.Mock.logging=","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"getters":{"logging":{"name":"logging","qualifiedName":"angular-mock.Mock.logging","comment":"","commentFrom":"angular-mock.Mock.logging","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"angular-mock.Mock.Mock-","comment":"<p>Default constructor. Unknown method calls are allowed and logged,\nthe mock has no name, and has its own log.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"custom":{"name":"custom","qualifiedName":"angular-mock.Mock.Mock-custom","comment":"<p>This constructor makes a mock that has a <a>angular-mock.Mock.Mock-custom.name</a> and possibly uses\na shared <a>angular-mock.Mock.Mock-custom.log</a>. If <a>angular-mock.Mock.Mock-custom.throwIfNoBehavior</a> is true, any calls to methods\nthat have no defined behaviors will throw an exception; otherwise they\nwill be allowed and logged (but will not do anything).\nIf <a>angular-mock.Mock.Mock-custom.enableLogging</a> is false, no logging will be done initially (whether\nor not a <a>angular-mock.Mock.Mock-custom.log</a> is supplied), but <a>angular-mock.Mock.logging</a> can be set to true later.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"name":{"name":"name","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"log":{"name":"log","optional":true,"named":true,"default":false,"type":[{"outer":"mock.LogEntryList","inner":[]}],"value":"null","annotations":[]},"throwIfNoBehavior":{"name":"throwIfNoBehavior","optional":true,"named":true,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"false","annotations":[]},"enableLogging":{"name":"enableLogging","optional":true,"named":true,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"true","annotations":[]}},"annotations":[]},"spy":{"name":"spy","qualifiedName":"angular-mock.Mock.Mock-spy","comment":"<p>This constructor creates a spy with no user-defined behavior.\nThis is simply a proxy for a real object that passes calls\nthrough to that real object but captures an audit trail of\ncalls made to the object that can be queried and validated\nlater.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"_realObject":{"name":"_realObject","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":"null","annotations":[]},"name":{"name":"name","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"log":{"name":"log","optional":true,"named":true,"default":false,"type":[{"outer":"mock.LogEntryList","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"operators":{},"methods":{"when":{"name":"when","qualifiedName":"angular-mock.Mock.when","comment":"<p><a>angular-mock.Mock.when</a> is used to create a new or extend an existing <a>mock.Behavior</a>.\nA [CallMatcher] [filter] must be supplied, and the <a>mock.Behavior</a>s for\nthat signature are returned (being created first if needed).</p>\n<p>Typical use case:</p>\n<pre><code>mock.when(callsTo(...)).alwaysReturn(...);\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"mock.Behavior","inner":[]}],"parameters":{"logFilter":{"name":"logFilter","optional":false,"named":false,"default":false,"type":[{"outer":"mock.CallMatcher","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"angular-mock.Mock.noSuchMethod","comment":"<p>This is the handler for method calls. We loop through the list\nof <a>mock.Behavior</a>s, and find the first match that still has return\nvalues available, and then do the action specified by that\nreturn value. If we find no <a>mock.Behavior</a> to apply an exception is\nthrown.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"verifyZeroInteractions":{"name":"verifyZeroInteractions","qualifiedName":"angular-mock.Mock.verifyZeroInteractions","comment":"<p><a>angular-mock.Mock.verifyZeroInteractions</a> returns true if no calls were made</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"getLogs":{"name":"getLogs","qualifiedName":"angular-mock.Mock.getLogs","comment":"<p><a>angular-mock.Mock.getLogs</a> extracts all calls from the call log that match the\n<a>angular-mock.Mock.getLogs.logFilter</a>, and returns the matching list of <a>mock.LogEntry</a>s. If\n<a>angular-mock.Mock.getLogs.destructive</a> is false (the default) the matching calls are left\nin the log, else they are removed. Removal allows us to verify a\nset of interactions and then verify that there are no other\ninteractions left. <a>angular-mock.Mock.getLogs.actionMatcher</a> can be used to further\nrestrict the returned logs based on the action the mock performed.\n<a>angular-mock.Mock.getLogs.logFilter</a> can be a <a>mock.CallMatcher</a> or a predicate function that\ntakes a <a>mock.LogEntry</a> and returns a bool.</p>\n<p>Typical usage:</p>\n<pre><code>getLogs(callsTo(...)).verify(...);\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"mock.LogEntryList","inner":[]}],"parameters":{"logFilter":{"name":"logFilter","optional":true,"named":false,"default":false,"type":[{"outer":"mock.CallMatcher","inner":[]}],"value":"null","annotations":[]},"actionMatcher":{"name":"actionMatcher","optional":true,"named":false,"default":false,"type":[{"outer":"matcher-interfaces.Matcher","inner":[]}],"value":"null","annotations":[]},"destructive":{"name":"destructive","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]}},"annotations":[]},"calls":{"name":"calls","qualifiedName":"angular-mock.Mock.calls","comment":"<p>Useful shorthand method that creates a <a>mock.CallMatcher</a> from its arguments\nand then calls <a>angular-mock.Mock.getLogs</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"mock.LogEntryList","inner":[]}],"parameters":{"method":{"name":"method","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"arg0":{"name":"arg0","optional":true,"named":false,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"ConstructedConstant(_Sentinel())","annotations":[]},"arg1":{"name":"arg1","optional":true,"named":false,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"ConstructedConstant(_Sentinel())","annotations":[]},"arg2":{"name":"arg2","optional":true,"named":false,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"ConstructedConstant(_Sentinel())","annotations":[]},"arg3":{"name":"arg3","optional":true,"named":false,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"ConstructedConstant(_Sentinel())","annotations":[]},"arg4":{"name":"arg4","optional":true,"named":false,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"ConstructedConstant(_Sentinel())","annotations":[]},"arg5":{"name":"arg5","optional":true,"named":false,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"ConstructedConstant(_Sentinel())","annotations":[]},"arg6":{"name":"arg6","optional":true,"named":false,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"ConstructedConstant(_Sentinel())","annotations":[]},"arg7":{"name":"arg7","optional":true,"named":false,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"ConstructedConstant(_Sentinel())","annotations":[]},"arg8":{"name":"arg8","optional":true,"named":false,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"ConstructedConstant(_Sentinel())","annotations":[]},"arg9":{"name":"arg9","optional":true,"named":false,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"ConstructedConstant(_Sentinel())","annotations":[]}},"annotations":[]},"resetBehavior":{"name":"resetBehavior","qualifiedName":"angular-mock.Mock.resetBehavior","comment":"<p>Clear the behaviors for the Mock.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"clearLogs":{"name":"clearLogs","qualifiedName":"angular-mock.Mock.clearLogs","comment":"<p>Clear the logs for the Mock.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"reset":{"name":"reset","qualifiedName":"angular-mock.Mock.reset","comment":"<p>Clear both logs and behavior.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"angular-mock.Mock.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>angular-mock.Mock.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"angular-mock.Mock.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"angular-mock.Mock.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>angular-mock.Mock.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>angular-mock.Mock.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"angular-mock.Mock.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"angular-mock.Mock.noSuchMethod","comment":"<p><a>angular-mock.Mock.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>angular-mock.Mock.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>angular-mock.Mock.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>angular-mock.Mock.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[{"name":"dart-core._Proxy","parameters":[]}],"generics":{}}