{"name":"angular-core-annotation","qualifiedName":"angular-core-annotation","comment":"<p>Angular class annotations for Directives, Filters, and Services.</p>","variables":{},"functions":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{}},"classes":{"class":[{"name":"NgAttachAware","qualifiedName":"angular-core-annotation.NgAttachAware","preview":"<p>A directives or components may chose to implements <a>angular-core-annotation.NgAttachAware</a>.<a>angular-core-annotation.NgAttachAware.attach</a> method.\nIf implemented the method will be called when the next scope digest occurs after\ncomponent instantiation. It is guaranteed that when <a>angular-core-annotation.NgAttachAware.attach</a> is invoked, that all\nattribute mappings have already been processed.</p>"},{"name":"NgDetachAware","qualifiedName":"angular-core-annotation.NgDetachAware","preview":"<p>A directives or components may chose to implements <a>angular-core-annotation.NgDetachAware</a>.<a>angular-core-annotation.NgDetachAware.detach</a> method.\nIf implemented the method will be called when the next associated scope is destroyed.</p>"},{"name":"NgFilter","qualifiedName":"angular-core-annotation.NgFilter","preview":"<p>Use @<a>angular-core-annotation.NgFilter</a> annotation to register a new filter. A filter is a class\nwith a call method (a callable function).</p>"},{"name":"NgInjectableService","qualifiedName":"angular-core-annotation.NgInjectableService","preview":"<p>An annotation when applied to a class indicates that the class (service) will\nbe instantiated by di injector. This annotation is also used to designate which\nclasses need to have a static factory generated when using static angular, and\ntherefore is required on any injectable class.</p>"},{"name":"AbstractNgAnnotation","qualifiedName":"angular-core-annotation.AbstractNgAnnotation","preview":"<p>Abstract supper class of <a>angular-core-annotation.NgController</a>, <a>angular-core-annotation.NgComponent</a>, and <a>angular-core-annotation.NgDirective</a>.</p>"},{"name":"NgComponent","qualifiedName":"angular-core-annotation.NgComponent","preview":"<p>Meta-data marker placed on a class which should act as a controller for the\ncomponent. Angular components are a light-weight version of web-components.\nAngular components use shadow-DOM for rendering their templates.</p>"},{"name":"NgController","qualifiedName":"angular-core-annotation.NgController","preview":"<p>Meta-data marker placed on a class which should act as a controller for your\napplication.</p>"},{"name":"NgDirective","qualifiedName":"angular-core-annotation.NgDirective","preview":"<p>Meta-data marker placed on a class which should act as a directive.</p>"},{"name":"AbstractNgFieldAnnotation","qualifiedName":"angular-core-annotation.AbstractNgFieldAnnotation","preview":"<p>Abstract supper class of <a>angular-core-annotation.NgAttr</a>, <a>angular-core-annotation.NgCallback</a>, <a>angular-core-annotation.NgOneWay</a>, <a>angular-core-annotation.NgOneWayOneTime</a>, and <a>angular-core-annotation.NgTwoWay</a>.</p>"},{"name":"NgAttr","qualifiedName":"angular-core-annotation.NgAttr","preview":"<p>When applied as an annotation on a directive field specifies that\nthe field is to be mapped to DOM attribute with the provided <a>angular-core-annotation.AbstractNgFieldAnnotation.attrName</a>.\nThe value of the attribute to be treated as a string, equivalent\nto <code>@</code> specification.</p>"},{"name":"NgCallback","qualifiedName":"angular-core-annotation.NgCallback","preview":"<p>When applied as an annotation on a directive field specifies that\nthe field is to be mapped to DOM attribute with the provided <a>angular-core-annotation.AbstractNgFieldAnnotation.attrName</a>.\nThe value of the attribute to be treated as a callback expression,\nequivalent to <code>&amp;</code> specification.</p>"},{"name":"NgOneWay","qualifiedName":"angular-core-annotation.NgOneWay","preview":"<p>When applied as an annotation on a directive field specifies that\nthe field is to be mapped to DOM attribute with the provided <a>angular-core-annotation.AbstractNgFieldAnnotation.attrName</a>.\nThe value of the attribute to be treated as a one-way expression, equivalent\nto <code>=&gt;</code> specification.</p>"},{"name":"NgOneWayOneTime","qualifiedName":"angular-core-annotation.NgOneWayOneTime","preview":"<p>When applied as an annotation on a directive field specifies that\nthe field is to be mapped to DOM attribute with the provided <a>angular-core-annotation.AbstractNgFieldAnnotation.attrName</a>.\nThe value of the attribute to be treated as a one time one-way expression,\nequivalent to <code>=&gt;!</code> specification.</p>"},{"name":"NgTwoWay","qualifiedName":"angular-core-annotation.NgTwoWay","preview":"<p>When applied as an annotation on a directive field specifies that\nthe field is to be mapped to DOM attribute with the provided <a>angular-core-annotation.AbstractNgFieldAnnotation.attrName</a>.\nThe value of the attribute to be treated as a two-way expression,\nequivalent to <code>&lt;=&gt;</code> specification.</p>"},{"name":"NgShadowRootAware","qualifiedName":"angular-core-annotation.NgShadowRootAware","preview":"<p>Implementing components <a>angular-core-annotation.NgShadowRootAware.onShadowRoot</a> method will be called when\nthe template for the component has been loaded and inserted into Shadow DOM.\nIt is guaranteed that when <a>angular-core-annotation.NgShadowRootAware.onShadowRoot</a> is invoked, that shadow DOM\nhas been loaded and is ready.</p>"}],"typedef":{},"error":[]},"packageName":"","packageIntro":null}