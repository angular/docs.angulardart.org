{"name":"NgViewDirective","qualifiedName":"angular-routing.NgViewDirective","comment":"<p>A directive that works with the <a>route-client.Router</a> and loads the template associated\nwith the current route.</p>\n<pre><code>&lt;ng-view&gt;&lt;/ng-view&gt;\n</code></pre>\n<p><a>angular-routing.NgViewDirective</a> can work with <a>angular-routing.NgViewDirective</a> to define nested views\nfor hierarchical routes. For example:</p>\n<pre><code>void initRoutes(Router router, RouteViewFactory view) {\n  router.root\n    ..addRoute(\n        name: 'library',\n        path: '/library',\n        enter: view('library.html'),\n        mount: (Route route) =&gt; route\n          ..addRoute(\n              name: 'all',\n              path: '/all',\n              enter: view('book_list.html'))\n          ..addRoute(\n              name: 'book',\n              path: '/:bookId',\n              mount: (Route route) =&gt; route\n                ..addRoute(\n                    name: 'overview',\n                    path: '/overview',\n                    defaultRoute: true,\n                    enter: view('book_overview.html'))\n                ..addRoute(\n                    name: 'read',\n                    path: '/read',\n                    enter: view('book_read.html'))));\n}\n</code></pre>\n<p>  }</p>\n<p>index.html:</p>\n<pre><code>&lt;ng-view&gt;&lt;/ng-view&gt;\n</code></pre>\n<p>library.html:</p>\n<pre><code>&lt;div&gt;\n  &lt;h1&gt;Library!&lt;/h1&gt;\n\n  &lt;ng-view&gt;&lt;/ng-view&gt;\n&lt;/div&gt;\n</code></pre>\n<p>book_list.html:</p>\n<pre><code>&lt;ul&gt;\n  &lt;li&gt;&lt;a href=\"/library/12345/overview\"&gt;Book 12345&lt;/a&gt;\n  &lt;li&gt;&lt;a href=\"/library/23456/overview\"&gt;Book 23456&lt;/a&gt;\n&lt;/ul&gt;\n</code></pre>","isAbstract":false,"superclass":"dart-core.Object","implements":["angular-routing.RouteProvider","angular-routing.NgDetachAware"],"subclass":[],"variables":{"locationService":{"name":"locationService","qualifiedName":"angular-routing.NgViewDirective.locationService","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"angular-routing.NgRoutingHelper","inner":[]}],"annotations":[]},"viewCache":{"name":"viewCache","qualifiedName":"angular-routing.NgViewDirective.viewCache","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"angular-core-dom_internal.ViewCache","inner":[]}],"annotations":[]},"injector":{"name":"injector","qualifiedName":"angular-routing.NgViewDirective.injector","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"di.Injector","inner":[]}],"annotations":[]},"element":{"name":"element","qualifiedName":"angular-routing.NgViewDirective.element","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-dom-html.Element","inner":[]}],"annotations":[]},"scope":{"name":"scope","qualifiedName":"angular-routing.NgViewDirective.scope","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"angular-core_internal.Scope","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"route":{"name":"route","qualifiedName":"angular-routing.NgViewDirective.route","comment":"<p>Returns <a>route-client.Route</a> for current view.</p>","commentFrom":"angular-routing.RouteProvider.route","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"route-client.Route","inner":[]}],"parameters":{},"annotations":[]},"routeName":{"name":"routeName","qualifiedName":"angular-routing.NgViewDirective.routeName","comment":"<p>Returns the name of the current route.</p>","commentFrom":"angular-routing.RouteProvider.routeName","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"parameters":{"name":"parameters","qualifiedName":"angular-routing.NgViewDirective.parameters","comment":"<p>Returns parameters for this route.</p>","commentFrom":"angular-routing.RouteProvider.parameters","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"angular-routing.NgViewDirective.NgViewDirective-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Element","inner":[]}],"value":"null","annotations":[]},"viewCache":{"name":"viewCache","optional":false,"named":false,"default":false,"type":[{"outer":"angular-core-dom_internal.ViewCache","inner":[]}],"value":"null","annotations":[]},"injector":{"name":"injector","optional":false,"named":false,"default":false,"type":[{"outer":"di.Injector","inner":[]}],"value":"null","annotations":[]},"router":{"name":"router","optional":false,"named":false,"default":false,"type":[{"outer":"route-client.Router","inner":[]}],"value":"null","annotations":[]},"scope":{"name":"scope","optional":false,"named":false,"default":false,"type":[{"outer":"angular-core_internal.Scope","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"operators":{},"methods":{"module":{"name":"module","qualifiedName":"angular-routing.NgViewDirective.module","comment":"","commentFrom":"angular-routing.NgViewDirective.module","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"detach":{"name":"detach","qualifiedName":"angular-routing.NgViewDirective.detach","comment":"","commentFrom":"angular-animate.NgDetachAware.detach","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"angular-routing.NgViewDirective.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>angular-routing.NgViewDirective.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"angular-routing.NgViewDirective.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"route":{"name":"route","qualifiedName":"angular-routing.NgViewDirective.route","comment":"<p>Returns <a>route-client.Route</a> for current view.</p>","commentFrom":"","inheritedFrom":"angular-routing.RouteProvider.route","static":false,"abstract":true,"constant":false,"return":[{"outer":"route-client.Route","inner":[]}],"parameters":{},"annotations":[]},"routeName":{"name":"routeName","qualifiedName":"angular-routing.NgViewDirective.routeName","comment":"<p>Returns the name of the current route.</p>","commentFrom":"","inheritedFrom":"angular-routing.RouteProvider.routeName","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"parameters":{"name":"parameters","qualifiedName":"angular-routing.NgViewDirective.parameters","comment":"<p>Returns parameters for this route.</p>","commentFrom":"","inheritedFrom":"angular-routing.RouteProvider.parameters","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"angular-routing.NgViewDirective.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>angular-routing.NgViewDirective.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>angular-routing.NgViewDirective.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"angular-routing.NgViewDirective.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"angular-routing.NgViewDirective.noSuchMethod","comment":"<p><a>angular-routing.NgViewDirective.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>angular-routing.NgViewDirective.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>angular-routing.NgViewDirective.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>angular-routing.NgViewDirective.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"detach":{"name":"detach","qualifiedName":"angular-routing.NgViewDirective.detach","comment":"","commentFrom":"","inheritedFrom":"angular-routing.NgDetachAware.detach","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[{"name":"angular-core-annotation.NgDirective","parameters":[]}],"generics":{}}