{"name":"NgModel","qualifiedName":"angular-directive.NgModel","comment":"<p>Ng-model directive is responsible for reading/writing to the model.\nThe directive itself is headless. (It does not know how to render or what\nevents to listen for.) It is meant to be used with other directives which\nprovide the rendering and listening capabilities. The directive itself\nknows how to convert the view-value into model-value and vice versa by\nallowing others to register converters (To be implemented). It also\nknows how to (in)validate the model and the form in which it is declared\n(to be implemented)</p>","isAbstract":false,"superclass":"angular-directive.NgControl","implements":["angular-core-annotation.NgAttachAware"],"subclass":[],"variables":{"setter":{"name":"setter","qualifiedName":"angular-directive.NgModel.setter","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"angular-core-parser.BoundSetter","inner":[]}],"annotations":[]},"render":{"name":"render","qualifiedName":"angular-directive.NgModel.render","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.Function","inner":[]}],"annotations":[]}},"inheritedVariables":{"errorStates":{"name":"errorStates","qualifiedName":"angular-directive.NgControl.errorStates","comment":"<p>The list of errors present on the control represented by an error name and\nan inner control instance.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"infoStates":{"name":"infoStates","qualifiedName":"angular-directive.NgControl.infoStates","comment":"<p>The list of info messages present on the control represented by an state name and\nan inner control instance.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]}},"methods":{"setters":{"converter=":{"name":"converter=","qualifiedName":"angular-directive.NgModel.converter=","comment":"","commentFrom":"angular-directive.NgModel.converter=","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"c":{"name":"c","optional":false,"named":false,"default":false,"type":[{"outer":"angular-directive.NgModelConverter","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"name=":{"name":"name=","qualifiedName":"angular-directive.NgModel.name=","comment":"","commentFrom":"angular-directive.NgControl.name=","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"watchCollection=":{"name":"watchCollection=","qualifiedName":"angular-directive.NgModel.watchCollection=","comment":"","commentFrom":"angular-directive.NgModel.watchCollection=","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"model=":{"name":"model=","qualifiedName":"angular-directive.NgModel.model=","comment":"","commentFrom":"angular-directive.NgModel.model=","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"boundExpression":{"name":"boundExpression","optional":false,"named":false,"default":false,"type":[{"outer":"angular-core-parser-syntax.BoundExpression","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"angular-core-annotation.NgCallback","parameters":["&"]}]},"viewValue=":{"name":"viewValue=","qualifiedName":"angular-directive.NgModel.viewValue=","comment":"","commentFrom":"angular-directive.NgModel.viewValue=","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"modelValue=":{"name":"modelValue=","qualifiedName":"angular-directive.NgModel.modelValue=","comment":"","commentFrom":"angular-directive.NgModel.modelValue=","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"getters":{"converter":{"name":"converter","qualifiedName":"angular-directive.NgModel.converter","comment":"<p>Returns the associated converter that is used with the model.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular-directive.NgModelConverter","inner":[]}],"parameters":{},"annotations":[]},"name":{"name":"name","qualifiedName":"angular-directive.NgModel.name","comment":"","commentFrom":"angular-directive.NgControl.name","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[{"name":"angular-core-annotation.NgAttr","parameters":["@"]}]},"watchCollection":{"name":"watchCollection","qualifiedName":"angular-directive.NgModel.watchCollection","comment":"","commentFrom":"angular-directive.NgModel.watchCollection","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"viewValue":{"name":"viewValue","qualifiedName":"angular-directive.NgModel.viewValue","comment":"","commentFrom":"angular-directive.NgModel.viewValue","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"modelValue":{"name":"modelValue","qualifiedName":"angular-directive.NgModel.modelValue","comment":"","commentFrom":"angular-directive.NgModel.modelValue","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"validators":{"name":"validators","qualifiedName":"angular-directive.NgModel.validators","comment":"<p>Returns the list of validators that are registered on the model.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"angular-directive.NgValidator","inner":[]}]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"angular-directive.NgModel.NgModel-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"_scope":{"name":"_scope","optional":false,"named":false,"default":false,"type":[{"outer":"angular-core_internal.Scope","inner":[]}],"value":"null","annotations":[]},"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"angular-core-dom_internal.NgElement","inner":[]}],"value":"null","annotations":[]},"injector":{"name":"injector","optional":false,"named":false,"default":false,"type":[{"outer":"di.Injector","inner":[]}],"value":"null","annotations":[]},"attrs":{"name":"attrs","optional":false,"named":false,"default":false,"type":[{"outer":"angular-core-dom_internal.NodeAttrs","inner":[]}],"value":"null","annotations":[]},"animate":{"name":"animate","optional":false,"named":false,"default":false,"type":[{"outer":"angular-core-dom_internal.NgAnimate","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"operators":{},"methods":{"attach":{"name":"attach","qualifiedName":"angular-directive.NgModel.attach","comment":"","commentFrom":"angular-core-annotation.NgAttachAware.attach","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"reset":{"name":"reset","qualifiedName":"angular-directive.NgModel.reset","comment":"<p>Resets the model value to it's original (pristine) value. If the model has been interacted\nwith by the user at all then the model will be also reset to an \"untouched\" state.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"onSubmit":{"name":"onSubmit","qualifiedName":"angular-directive.NgModel.onSubmit","comment":"","commentFrom":"angular-directive.NgControl.onSubmit","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"valid":{"name":"valid","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"markAsUntouched":{"name":"markAsUntouched","qualifiedName":"angular-directive.NgModel.markAsUntouched","comment":"","commentFrom":"angular-directive.NgModel.markAsUntouched","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"markAsTouched":{"name":"markAsTouched","qualifiedName":"angular-directive.NgModel.markAsTouched","comment":"","commentFrom":"angular-directive.NgModel.markAsTouched","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"markAsPristine":{"name":"markAsPristine","qualifiedName":"angular-directive.NgModel.markAsPristine","comment":"","commentFrom":"angular-directive.NgModel.markAsPristine","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"markAsDirty":{"name":"markAsDirty","qualifiedName":"angular-directive.NgModel.markAsDirty","comment":"","commentFrom":"angular-directive.NgModel.markAsDirty","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"validateLater":{"name":"validateLater","qualifiedName":"angular-directive.NgModel.validateLater","comment":"<p>Flags the model to be set for validation upon the next digest. This operation is useful\nto optimize validations incase multiple validations are triggered one after the other.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"addError":{"name":"addError","qualifiedName":"angular-directive.NgModel.addError","comment":"<p>Applies the given <a>angular-directive.NgModel.addError.error</a> to the model.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"error":{"name":"error","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"removeError":{"name":"removeError","qualifiedName":"angular-directive.NgModel.removeError","comment":"<p>Removes the given <a>angular-directive.NgModel.removeError.error</a> from the model.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"error":{"name":"error","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"addInfo":{"name":"addInfo","qualifiedName":"angular-directive.NgModel.addInfo","comment":"<p>Adds the given <a>angular-directive.NgModel.addInfo.info</a> state to the model.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"info":{"name":"info","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"removeInfo":{"name":"removeInfo","qualifiedName":"angular-directive.NgModel.removeInfo","comment":"<p>Removes the given <a>angular-directive.NgModel.removeInfo.info</a> state from the model.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"info":{"name":"info","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"validate":{"name":"validate","qualifiedName":"angular-directive.NgModel.validate","comment":"<p>Executes a validation on the model against each of the validators present on the model.\nOnce complete, the model will either be set as valid or invalid.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"addValidator":{"name":"addValidator","qualifiedName":"angular-directive.NgModel.addValidator","comment":"<p>Registers a validator into the model to consider when running validate().</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"v":{"name":"v","optional":false,"named":false,"default":false,"type":[{"outer":"angular-directive.NgValidator","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"removeValidator":{"name":"removeValidator","qualifiedName":"angular-directive.NgModel.removeValidator","comment":"<p>De-registers a validator from the model.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"v":{"name":"v","optional":false,"named":false,"default":false,"type":[{"outer":"angular-directive.NgValidator","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{"name=":{"name":"name=","qualifiedName":"angular-directive.NgModel.name=","comment":"","commentFrom":"","inheritedFrom":"angular-directive.NgControl.name=","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"angular-directive.NgModel.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>angular-directive.NgModel.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"angular-directive.NgModel.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"parentControl":{"name":"parentControl","qualifiedName":"angular-directive.NgModel.parentControl","comment":"","commentFrom":"","inheritedFrom":"angular-directive.NgControl.parentControl","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular-directive.NgControl","inner":[]}],"parameters":{},"annotations":[]},"submitted":{"name":"submitted","qualifiedName":"angular-directive.NgModel.submitted","comment":"<p>Whether or not the form has been submitted yet.</p>","commentFrom":"","inheritedFrom":"angular-directive.NgControl.submitted","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"validSubmit":{"name":"validSubmit","qualifiedName":"angular-directive.NgModel.validSubmit","comment":"<p>Whether or not the form was valid when last submitted.</p>","commentFrom":"","inheritedFrom":"angular-directive.NgControl.validSubmit","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"invalidSubmit":{"name":"invalidSubmit","qualifiedName":"angular-directive.NgModel.invalidSubmit","comment":"<p>Whether or not the form was invalid when last submitted.</p>","commentFrom":"","inheritedFrom":"angular-directive.NgControl.invalidSubmit","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"name":{"name":"name","qualifiedName":"angular-directive.NgModel.name","comment":"","commentFrom":"","inheritedFrom":"angular-directive.NgControl.name","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"element":{"name":"element","qualifiedName":"angular-directive.NgModel.element","comment":"<p>Whether or not the form was invalid when last submitted.</p>","commentFrom":"","inheritedFrom":"angular-directive.NgControl.element","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular-core-dom_internal.NgElement","inner":[]}],"parameters":{},"annotations":[]},"valid":{"name":"valid","qualifiedName":"angular-directive.NgModel.valid","comment":"<p>A control is considered valid if all inner models are valid.</p>","commentFrom":"","inheritedFrom":"angular-directive.NgControl.valid","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"invalid":{"name":"invalid","qualifiedName":"angular-directive.NgModel.invalid","comment":"<p>A control is considered invalid if any inner models are invalid.</p>","commentFrom":"","inheritedFrom":"angular-directive.NgControl.invalid","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"pristine":{"name":"pristine","qualifiedName":"angular-directive.NgModel.pristine","comment":"<p>Whether or not the control's or model's data has not been changed.</p>","commentFrom":"","inheritedFrom":"angular-directive.NgControl.pristine","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"dirty":{"name":"dirty","qualifiedName":"angular-directive.NgModel.dirty","comment":"<p>Whether or not the control's or model's data has been changed.</p>","commentFrom":"","inheritedFrom":"angular-directive.NgControl.dirty","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"untouched":{"name":"untouched","qualifiedName":"angular-directive.NgModel.untouched","comment":"<p>Whether or not the control/model has not been interacted with by the user.</p>","commentFrom":"","inheritedFrom":"angular-directive.NgControl.untouched","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"touched":{"name":"touched","qualifiedName":"angular-directive.NgModel.touched","comment":"<p>Whether or not the control/model has been interacted with by the user.</p>","commentFrom":"","inheritedFrom":"angular-directive.NgControl.touched","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"angular-directive.NgModel.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>angular-directive.NgModel.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>angular-directive.NgModel.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"angular-directive.NgModel.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"angular-directive.NgModel.noSuchMethod","comment":"<p><a>angular-directive.NgModel.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>angular-directive.NgModel.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>angular-directive.NgModel.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>angular-directive.NgModel.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"detach":{"name":"detach","qualifiedName":"angular-directive.NgModel.detach","comment":"","commentFrom":"","inheritedFrom":"angular-directive.NgControl.detach","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[{"name":"dart-core._Override","parameters":[]}]},"attach":{"name":"attach","qualifiedName":"angular-directive.NgModel.attach","comment":"","commentFrom":"","inheritedFrom":"angular-core-annotation.NgAttachAware.attach","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"reset":{"name":"reset","qualifiedName":"angular-directive.NgModel.reset","comment":"<p>Resets the form and inner models to their pristine state.</p>","commentFrom":"","inheritedFrom":"angular-directive.NgControl.reset","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"onSubmit":{"name":"onSubmit","qualifiedName":"angular-directive.NgModel.onSubmit","comment":"","commentFrom":"","inheritedFrom":"angular-directive.NgControl.onSubmit","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"valid":{"name":"valid","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"addControl":{"name":"addControl","qualifiedName":"angular-directive.NgModel.addControl","comment":"<p>Registers a form control into the form for validation.</p><ul><li><a>angular-directive.NgModel.addControl.control</a> - The form control which will be registered (see <a>angular-directive.NgControl</a>).</li></ul>","commentFrom":"","inheritedFrom":"angular-directive.NgControl.addControl","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"control":{"name":"control","optional":false,"named":false,"default":false,"type":[{"outer":"angular-directive.NgControl","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"removeControl":{"name":"removeControl","qualifiedName":"angular-directive.NgModel.removeControl","comment":"<p>De-registers a form control from the list of controls associated with the\nform.</p><ul><li><a>angular-directive.NgModel.removeControl.control</a> - The form control which will be de-registered (see <a>angular-directive.NgControl</a>).</li></ul>","commentFrom":"","inheritedFrom":"angular-directive.NgControl.removeControl","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"control":{"name":"control","optional":false,"named":false,"default":false,"type":[{"outer":"angular-directive.NgControl","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"removeStates":{"name":"removeStates","qualifiedName":"angular-directive.NgModel.removeStates","comment":"<p>Clears all the info and error states that are associated with the control.</p><ul><li><a>angular-directive.NgModel.removeStates.control</a> - The form control which will be cleared of all state (see <a>angular-directive.NgControl</a>).</li></ul>","commentFrom":"","inheritedFrom":"angular-directive.NgControl.removeStates","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"control":{"name":"control","optional":false,"named":false,"default":false,"type":[{"outer":"angular-directive.NgControl","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"hasErrorState":{"name":"hasErrorState","qualifiedName":"angular-directive.NgModel.hasErrorState","comment":"<p>Whether or not the control contains the given error.</p><ul><li><a>angular-directive.NgModel.hasErrorState.errorName</a> - The name of the error (e.g. ng-required, ng-pattern, etc...)</li></ul>","commentFrom":"","inheritedFrom":"angular-directive.NgControl.hasErrorState","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"errorName":{"name":"errorName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"addErrorState":{"name":"addErrorState","qualifiedName":"angular-directive.NgModel.addErrorState","comment":"<p>Adds the given childControl/errorName to the list of errors present on the control. Once\nadded all associated parent controls will be registered with the error as well.</p><ul><li><a>angular-directive.NgModel.addErrorState.childControl</a> - The child control that contains the error.</li><li><a>angular-directive.NgModel.addErrorState.errorName</a> - The name of the given error (e.g. ng-required, ng-pattern, etc...).</li></ul>","commentFrom":"","inheritedFrom":"angular-directive.NgControl.addErrorState","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"childControl":{"name":"childControl","optional":false,"named":false,"default":false,"type":[{"outer":"angular-directive.NgControl","inner":[]}],"value":"null","annotations":[]},"errorName":{"name":"errorName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"removeErrorState":{"name":"removeErrorState","qualifiedName":"angular-directive.NgModel.removeErrorState","comment":"<p>Removes the given childControl/errorName from the list of errors present on the control. Once\nremoved the control will update any parent controls depending if error is not present on\nany other inner controls and or models.</p><ul><li><a>angular-directive.NgModel.removeErrorState.childControl</a> - The child control that contains the error.</li><li><a>angular-directive.NgModel.removeErrorState.errorName</a> - The name of the given error (e.g. ng-required, ng-pattern, etc...).</li></ul>","commentFrom":"","inheritedFrom":"angular-directive.NgControl.removeErrorState","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"childControl":{"name":"childControl","optional":false,"named":false,"default":false,"type":[{"outer":"angular-directive.NgControl","inner":[]}],"value":"null","annotations":[]},"errorName":{"name":"errorName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"addInfoState":{"name":"addInfoState","qualifiedName":"angular-directive.NgModel.addInfoState","comment":"<p>Registers a non-error state on the control with the given childControl/stateName data. Once\nadded the control will also add the same data to any associated parent controls.</p><ul><li><a>angular-directive.NgModel.addInfoState.childControl</a> - The child control that contains the error.</li><li><a>angular-directive.NgModel.addInfoState.stateName</a> - The name of the given error (e.g. ng-required, ng-pattern, etc...).</li></ul>","commentFrom":"","inheritedFrom":"angular-directive.NgControl.addInfoState","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"childControl":{"name":"childControl","optional":false,"named":false,"default":false,"type":[{"outer":"angular-directive.NgControl","inner":[]}],"value":"null","annotations":[]},"stateName":{"name":"stateName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"removeInfoState":{"name":"removeInfoState","qualifiedName":"angular-directive.NgModel.removeInfoState","comment":"<p>De-registers the provided state on the control with the given childControl. The state\nwill be fully removed from the control if all of the inner controls/models also do not\ncontain the state. If so then the state will also be attempted to be removed from the\nassociated parent controls.</p><ul><li><a>angular-directive.NgModel.removeInfoState.childControl</a> - The child control that contains the error.</li><li><a>angular-directive.NgModel.removeInfoState.stateName</a> - The name of the given error (e.g. ng-required, ng-pattern, etc...).</li></ul>","commentFrom":"","inheritedFrom":"angular-directive.NgControl.removeInfoState","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"childControl":{"name":"childControl","optional":false,"named":false,"default":false,"type":[{"outer":"angular-directive.NgControl","inner":[]}],"value":"null","annotations":[]},"stateName":{"name":"stateName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[{"name":"angular-core-annotation.NgDirective","parameters":[]}],"generics":{}}