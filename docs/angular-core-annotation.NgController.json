{"name":"NgController","qualifiedName":"angular-core-annotation.NgController","comment":"<p>Meta-data marker placed on a class which should act as a controller for your\napplication.</p>\n<p>Controllers are essentially <a>angular-core-annotation.NgDirective</a>s with few key differences:</p><ul><li>Controllers create a new scope at the element.</li><li>Controllers should not do any DOM manipulation.</li><li>\n<p>Controllers are meant for application-logic\n  (rather then DOM monipulation logic which directives are meant for.)</p></li></ul>\n<p>Controllers can implement <a>angular-core-annotation.NgAttachAware</a>, <a>angular-core-annotation.NgDetachAware</a> and\ndeclare these optional methods:</p><ul><li><code>attach()</code> - Called on first Scope.apply().</li><li><code>detach()</code> - Called on when owning scope is destroyed.</li></ul>","isAbstract":false,"superclass":"angular-core-annotation.NgDirective","implements":[],"subclass":[],"variables":{"LOCAL_VISIBILITY":{"name":"LOCAL_VISIBILITY","qualifiedName":"angular-core-annotation.NgController.LOCAL_VISIBILITY","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"CHILDREN_VISIBILITY":{"name":"CHILDREN_VISIBILITY","qualifiedName":"angular-core-annotation.NgController.CHILDREN_VISIBILITY","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"DIRECT_CHILDREN_VISIBILITY":{"name":"DIRECT_CHILDREN_VISIBILITY","qualifiedName":"angular-core-annotation.NgController.DIRECT_CHILDREN_VISIBILITY","comment":"","final":false,"static":true,"constant":true,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"publishAs":{"name":"publishAs","qualifiedName":"angular-core-annotation.NgController.publishAs","comment":"<p>An expression under which the controller instance will be published into.\nThis allows the expressions in the template to be referring to controller\ninstance and its properties.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]}},"inheritedVariables":{"selector":{"name":"selector","qualifiedName":"angular-core-annotation.NgAnnotation.selector","comment":"<p>CSS selector which will trigger this component/directive.\nCSS Selectors are limited to a single element and can contain:</p><ul><li><code>element-name</code> limit to a given element name.</li><li><code>.class</code> limit to an element with a given class.</li><li><code>[attribute]</code> limit to an element with a given attribute name.</li><li><code>[attribute=value]</code> limit to an element with a given attribute and value.</li><li><code>:contains(/abc/)</code> limit to an element which contains the given text.</li></ul>\n<p>Example: <code>input[type=checkbox][ng-model]</code></p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"children":{"name":"children","qualifiedName":"angular-core-annotation.NgAnnotation.children","comment":"<p>Specifies the compiler action to be taken on the child nodes of the\nelement which this currently being compiled.  The values are:</p><ul><li><a href=\"*default*\">COMPILE_CHILDREN</a></li><li><a>angular-core-annotation.NgAnnotation.TRANSCLUDE_CHILDREN</a></li><li><a>angular-core-annotation.NgAnnotation.IGNORE_CHILDREN</a></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"visibility":{"name":"visibility","qualifiedName":"angular-core-annotation.NgAnnotation.visibility","comment":"<p>A directive/component controller class can be injected into other\ndirectives/components. This attribute controls whether the\ncontroller is available to others.</p><ul><li>\n<p><code>local</code> <a>angular-core-annotation.NgDirective.LOCAL_VISIBILITY</a> - the controller can be injected\n  into other directives / components on the same DOM element.</p></li><li>\n<p><code>children</code> <a>angular-core-annotation.NgDirective.CHILDREN_VISIBILITY</a> - the controller can be\n  injected into other directives / components on the same or child DOM\n  elements.</p></li><li>\n<p><code>direct_children</code> [NgDirective.DIRECT_CHILDREN_VISIBILITY] - the\n  controller can be injected into other directives / components on the\n  direct children of the current DOM element.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"di.Visibility","inner":[]}],"annotations":[]},"module":{"name":"module","qualifiedName":"angular-core-annotation.NgAnnotation.module","comment":"<p>A directive/component class can publish types by using a factory\nfunction to generate a module. The module is then installed into\nthe injector at that element. Any types declared in the module than\nbecome available for injection.</p>\n<p>Example:</p>\n<pre><code>@NgDirective(\n  selector: '[foo]',\n  module: FooDirective.moduleFactory)\nFooDirective {\n  // We can be static since Module definition does not change.\n  static moduleFactory() =&gt; new Module()\n    ..type(SomeTypeA, visibility: NgDirective.LOCAL_VISIBILITY);\n}\n</code></pre>\n<p>When specifying types, factories or values in the module, notice that\n<code>Visibility</code> maps to:\n * <a>angular-core-annotation.NgDirective.LOCAL_VISIBILITY</a>\n * <a>angular-core-annotation.NgDirective.CHILDREN_VISIBILITY</a>\n * [NgDirective.DIRECT_CHILDREN_VISIBILITY]</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.Function","inner":[]}],"annotations":[]},"map":{"name":"map","qualifiedName":"angular-core-annotation.NgAnnotation.map","comment":"<p>Use map to define the mapping of  DOM attributes to fields.\nThe map's key is the DOM attribute name (DOM attribute is in dash-case).\nThe Map's value consists of a mode prefix followed by an expression.\nThe destination expression will be evaluated against the instance of the\ndirective / component class.</p><ul><li>\n<p><code>@</code> - Map the DOM attribute string. The attribute string will be taken\n  literally or interpolated if it contains binding {{}} systax and assigned\n  to the expression. (cost: 0 watches)</p></li><li>\n<p><code>=&gt;</code> - Treat the DOM attribute value as an expression. Set up a watch,\n  which will read the expression in the attribute and assign the value\n  to destination expression. (cost: 1 watch)</p></li><li>\n<p><code>&lt;=&gt;</code> - Treat the DOM attribute value as an expression. Set up a watch\n  on both outside as well as component scope to keep the src and\n  destination in sync. (cost: 2 watches)</p></li><li>\n<p><code>=&gt;!</code> - Treat the DOM attribute value as an expression. Set up a one time\n  watch on expression. Once the expression turns truthy it will no longer\n  update. (cost: 1 watches until not null, then 0 watches)</p></li><li>\n<p><code>&amp;</code> - Treat the DOM attribute value as an expression. Assign a closure\n  function into the field. This allows the component to control\n  the invocation of the closure. This is useful for passing\n  expressions into controllers which act like callbacks. (cost: 0 watches)</p></li></ul>\n<p>Example:</p>\n<pre><code>&lt;my-component title=\"Hello {{username}}\"\n              selection=\"selectedItem\"\n              on-selection-change=\"doSomething()\"&gt;\n\n@NgComponent(\n  selector: 'my-component'\n  map: const {\n    'title': '@title',\n    'selection': '&lt;=&gt;currentItem',\n    'on-selection-change': '&amp;onChange'})\nclass MyComponent {\n  String title;\n  var currentItem;\n  ParsedFn onChange;\n}\n</code></pre>\n<p> The above example shows how all three mapping modes are used.</p><ul><li>\n<p><code>@title</code> maps the title DOM attribute to the controller <code>title</code>\n   field. Notice that this maps the content of the attribute, which\n   means that it can be used with <code>{{}}</code> interpolation.</p></li><li>\n<p><code>&lt;=&gt;currentItem</code> maps the expression (in this case the <code>selectedItem</code>\n   in the current scope into the <code>currentItem</code> in the controller. Notice\n   that mapping is bi-directional. A change either in field or on\n   parent scope will result in change to the other.</p></li><li>\n<p><code>&amp;onChange</code> maps the expression into the controller <code>onChange</code>\n   field. The result of mapping is a callable function which can be\n   invoked at any time by the controller. The invocation of the\n   callable function will result in the expression <code>doSomething()</code> to\n   be executed in the parent context.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"annotations":[]},"exportExpressionAttrs":{"name":"exportExpressionAttrs","qualifiedName":"angular-core-annotation.NgAnnotation.exportExpressionAttrs","comment":"<p>Use the list to specify expressions containing attributes which are not\nincluded under <a>angular-core-annotation.NgAnnotation.map</a> with '=' or '@' specification.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.String","inner":[]}]}],"annotations":[]},"exportExpressions":{"name":"exportExpressions","qualifiedName":"angular-core-annotation.NgAnnotation.exportExpressions","comment":"<p>Use the list to specify expressions which are evaluated dynamically\n(ex. via Scope.eval) and are otherwise not statically discoverable.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.String","inner":[]}]}],"annotations":[]}},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"angular-core-annotation.NgController.NgController-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":true,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"children":{"name":"children","optional":true,"named":true,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"StringConstant(\"compile\")","annotations":[]},"publishAs":{"name":"publishAs","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"map":{"name":"map","optional":true,"named":true,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"module":{"name":"module","optional":true,"named":true,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"selector":{"name":"selector","optional":true,"named":true,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"visibility":{"name":"visibility","optional":true,"named":true,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"exportExpressions":{"name":"exportExpressions","optional":true,"named":true,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"exportExpressionAttrs":{"name":"exportExpressionAttrs","optional":true,"named":true,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"operators":{},"methods":{"cloneWithNewMap":{"name":"cloneWithNewMap","qualifiedName":"angular-core-annotation.NgController.cloneWithNewMap","comment":"","commentFrom":"angular-core-annotation.NgDirective.cloneWithNewMap","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular-core-annotation.NgAnnotation","inner":[]}],"parameters":{"newMap":{"name":"newMap","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"angular-core-annotation.NgController.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>angular-core-annotation.NgController.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"dart-core.Object.hashCode","inheritedFrom":"angular-core-annotation.NgAnnotation.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"angular-core-annotation.NgController.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"angular-core-annotation.NgController.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>angular-core-annotation.NgController.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>angular-core-annotation.NgController.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"dart-core.Object.==","inheritedFrom":"angular-core-annotation.NgAnnotation.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"angular-core-annotation.NgController.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"angular-core-annotation.NgAnnotation.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"angular-core-annotation.NgController.noSuchMethod","comment":"<p><a>angular-core-annotation.NgController.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>angular-core-annotation.NgController.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>angular-core-annotation.NgController.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>angular-core-annotation.NgController.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"cloneWithNewMap":{"name":"cloneWithNewMap","qualifiedName":"angular-core-annotation.NgController.cloneWithNewMap","comment":"","commentFrom":"","inheritedFrom":"angular-core-annotation.NgDirective.cloneWithNewMap","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular-core-annotation.NgAnnotation","inner":[]}],"parameters":{"newMap":{"name":"newMap","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}