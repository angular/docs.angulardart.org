{"name":"Date","qualifiedName":"angular-filter.Date","comment":"<p>Formats date to a string based on the requested format.\nSee Dart http://api.dartlang.org/docs/releases/latest/intl/DateFormat.html\nfor full formating options.</p><ul><li><code>medium</code>: equivalent to <code>MMM d, y h:mm:ss a</code> for en_US locale (e.g. Sep 3, 2010 12:05:08 pm)</li><li><code>short</code>: equivalent to <code>M/d/yy h:mm a</code> for en_US locale (e.g. 9/3/10 12:05 pm)</li><li><code>fullDate</code>: equivalent to <code>EEEE, MMMM d, y</code> for en_US locale (e.g. Friday, September 3, 2010)</li><li><code>longDate</code>: equivalent to <code>MMMM d, y</code> for en_US locale (e.g. September 3, 2010)</li><li><code>mediumDate</code>: equivalent to <code>MMM d, y</code> for en_US locale (e.g. Sep 3, 2010)</li><li><code>shortDate</code>: equivalent to <code>M/d/yy</code> for en_US locale (e.g. 9/3/10)</li><li><code>mediumTime</code>: equivalent to <code>h:mm:ss a</code> for en_US locale (e.g. 12:05:08 pm)</li><li><code>shortTime</code>: equivalent to <code>h:mm a</code> for en_US locale (e.g. 12:05 pm)</li></ul>\n<p>Usage:</p>\n<pre><code>{{ date_expression | date[:format] }}\n</code></pre>","isAbstract":false,"superclass":"dart-core.Object","implements":["dart-core.Function"],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{"call":{"name":"call","qualifiedName":"angular-filter.Date.call","comment":"<p><a>angular-filter.Date.call.date</a>: Date to format either as Date object, milliseconds\n   (string or <a>dart-core.num</a>) or various ISO 8601 datetime string formats\n   (e.g. <code>yyyy-MM-ddTHH:mm:ss.SSSZ</code> and its shorter versions like\n   <code>yyyy-MM-ddTHH:mmZ</code>, <code>yyyy-MM-dd</code> or <code>yyyyMMddTHHmmssZ</code>). If no\n   timezone is specified in the string input, the time is considered to\n   be in the local timezone.</p>\n<p> <a>angular-filter.Date.call.format</a>: Formatting rules (see Description). If not specified,\n   mediumDate is used</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"date":{"name":"date","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":"null","annotations":[]},"format":{"name":"format","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.String","inner":[]}],"value":"StringConstant(\"mediumDate\")","annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"angular-filter.Date.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>angular-filter.Date.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"angular-filter.Date.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"angular-filter.Date.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>angular-filter.Date.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>angular-filter.Date.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"angular-filter.Date.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"angular-filter.Date.noSuchMethod","comment":"<p><a>angular-filter.Date.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>angular-filter.Date.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>angular-filter.Date.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>angular-filter.Date.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[{"name":"angular-core-annotation_src.NgFilter","parameters":["date"]}],"generics":{}}