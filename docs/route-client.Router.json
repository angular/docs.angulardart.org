{"name":"Router","qualifiedName":"route-client.Router","comment":"<p>Stores a set of UrlPattern to Handler associations and provides methods\nfor calling a handler for a URL path, listening to <a>dart-dom-html.Window</a> history events,\nand creating HTML event handlers that navigate to a URL.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"root":{"name":"root","qualifiedName":"route-client.Router.root","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"route-client.Route","inner":[]}],"annotations":[]},"sortRoutes":{"name":"sortRoutes","qualifiedName":"route-client.Router.sortRoutes","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"onRouteStart":{"name":"onRouteStart","qualifiedName":"route-client.Router.onRouteStart","comment":"<p>A stream of route calls.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"route-client.RouteStartEvent","inner":[]}]}],"parameters":{},"annotations":[]},"activePath":{"name":"activePath","qualifiedName":"route-client.Router.activePath","comment":"<p>Returns the current active route path in the route tree.\nExcludes the root path.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"route-client.Route","inner":[]}]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"route-client.Router.Router-","comment":"<p><a>route-client.Router.Router-.useFragment</a> determines whether this Router uses pure paths with\n<a>dart-dom-html.History.pushState</a> or paths + fragments and <a>dart-dom-html.Location.assign</a>. The default\nvalue is null which then determines the behavior based on\n<a>dart-dom-html.History.supportsState</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"useFragment":{"name":"useFragment","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"null","annotations":[]},"windowImpl":{"name":"windowImpl","optional":true,"named":true,"default":false,"type":[{"outer":"dart-dom-html.Window","inner":[]}],"value":"null","annotations":[]},"sortRoutes":{"name":"sortRoutes","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"true","annotations":[]}},"annotations":[]}},"operators":{},"methods":{"route":{"name":"route","qualifiedName":"route-client.Router.route","comment":"<p>Finds a matching <a>route-client.Route</a> added with addRoute, parses the path\nand invokes the associated callback.</p>\n<p>This method does not perform any navigation, <a>route-client.Router.go</a> should be used for that.\nThis method is used to invoke a handler after some other code navigates the\nwindow, such as <a>route-client.Router.listen</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.bool","inner":[]}]}],"parameters":{"path":{"name":"path","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"startingFrom":{"name":"startingFrom","optional":true,"named":true,"default":false,"type":[{"outer":"route-client.Route","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"go":{"name":"go","qualifiedName":"route-client.Router.go","comment":"<p>Navigates to a given relative route path, and parameters.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"routePath":{"name":"routePath","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"parameters":{"name":"parameters","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[]}],"value":"null","annotations":[]},"startingFrom":{"name":"startingFrom","optional":true,"named":true,"default":false,"type":[{"outer":"route-client.Route","inner":[]}],"value":"null","annotations":[]},"replace":{"name":"replace","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]}},"annotations":[]},"url":{"name":"url","qualifiedName":"route-client.Router.url","comment":"<p>Returns an absolute URL for a given relative route path and parameters.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"routePath":{"name":"routePath","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"startingFrom":{"name":"startingFrom","optional":true,"named":true,"default":false,"type":[{"outer":"route-client.Route","inner":[]}],"value":"null","annotations":[]},"parameters":{"name":"parameters","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"listen":{"name":"listen","qualifiedName":"route-client.Router.listen","comment":"<p>Listens for window history events and invokes the router. On older\nbrowsers the hashChange event is used instead.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"ignoreClick":{"name":"ignoreClick","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]},"appRoot":{"name":"appRoot","optional":true,"named":true,"default":false,"type":[{"outer":"dart-dom-html.Element","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"gotoUrl":{"name":"gotoUrl","qualifiedName":"route-client.Router.gotoUrl","comment":"<p>Navigates the browser to the path produced by <a>route-client.Router.gotoUrl.url</a> with args by calling\n<a>dart-dom-html.History.pushState</a>, then invokes the handler associated with <a>route-client.Router.gotoUrl.url</a>.</p>\n<p>On older browsers <a>dart-dom-html.Location.assign</a> is used instead with the fragment\nversion of the UrlPattern.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.bool","inner":[]}]}],"parameters":{"url":{"name":"url","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"findRoute":{"name":"findRoute","qualifiedName":"route-client.Router.findRoute","comment":"<p>A shortcut for router.root.getRoute().</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"route-client.Route","inner":[]}],"parameters":{"routePath":{"name":"routePath","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"route-client.Router.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>route-client.Router.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"route-client.Router.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"route-client.Router.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>route-client.Router.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>route-client.Router.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"route-client.Router.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"route-client.Router.noSuchMethod","comment":"<p><a>route-client.Router.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>route-client.Router.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>route-client.Router.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>route-client.Router.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}