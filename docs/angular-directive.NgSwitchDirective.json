{"name":"NgSwitchDirective","qualifiedName":"angular-directive.NgSwitchDirective","comment":"<p>The ngSwitch directive is used to conditionally swap DOM structure on your\ntemplate based on a scope expression. Elements within ngSwitch but without\nngSwitchWhen or ngSwitchDefault directives will be preserved at the location\nas specified in the template.</p>\n<p>The directive itself works similar to ngInclude, however, instead of\ndownloading template code (or loading it from the template cache), ngSwitch\nsimply choses one of the nested elements and makes it visible based on which\nelement matches the value obtained from the evaluated expression. In other\nwords, you define a container element (where you place the directive), place\nan expression on the <strong>ng-switch=\"...\" attribute</strong>, define any inner elements\ninside of the directive and place a when attribute per element. The when\nattribute is used to inform ngSwitch which element to display when the on\nexpression is evaluated. If a matching expression is not found via a when\nattribute then an element with the default attribute is displayed.</p>\n<h2>Example:</h2>\n<pre><code>&lt;ANY ng-switch=\"expression\"&gt;\n  &lt;ANY ng-switch-when=\"matchValue1\"&gt;...&lt;/ANY&gt;\n  &lt;ANY ng-switch-when=\"matchValue2\"&gt;...&lt;/ANY&gt;\n  &lt;ANY ng-switch-default&gt;...&lt;/ANY&gt;\n&lt;/ANY&gt;\n</code></pre>\n<p>On child elements add:</p><ul><li>\n<p><code>ngSwitchWhen</code>: the case statement to match against. If match then this\n  case will be displayed. If the same match appears multiple times, all the\n  elements will be displayed.</p></li><li>\n<p><code>ngSwitchDefault</code>: the default case when no other case match. If there\n  are multiple default cases, all of them will be displayed when no other\n  case match.</p></li></ul>\n<h2>Example:</h2>\n<pre><code>&lt;div&gt;\n  &lt;button ng-click=\"selection='settings'\"&gt;Show Settings&lt;/button&gt;\n  &lt;button ng-click=\"selection='home'\"&gt;Show Home Span&lt;/button&gt;\n  &lt;button ng-click=\"selection=''\"&gt;Show default&lt;/button&gt;\n  &lt;tt&gt;selection={{selection}}&lt;/tt&gt;\n  &lt;hr/&gt;\n  &lt;div ng-switch=\"selection\"&gt;\n      &lt;div ng-switch-when=\"settings\"&gt;Settings Div&lt;/div&gt;\n      &lt;div ng-switch-when=\"home\"&gt;Home Span&lt;/div&gt;\n      &lt;div ng-switch-default&gt;default&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"cases":{"name":"cases","qualifiedName":"angular/angular.NgSwitchDirective.cases","comment":"","final":"false","static":"false","constant":"false","type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.List","inner":[{"outer":"angular/angular._Case","inner":[]}]}]}],"annotations":[]},"currentViews":{"name":"currentViews","qualifiedName":"angular/angular.NgSwitchDirective.currentViews","comment":"","final":"false","static":"false","constant":"false","type":[{"outer":"dart-core.List","inner":[{"outer":"angular/angular._ViewScopePair","inner":[]}]}],"annotations":[]},"onChange":{"name":"onChange","qualifiedName":"angular/angular.NgSwitchDirective.onChange","comment":"","final":"false","static":"false","constant":"false","type":[{"outer":"dart-core.Function","inner":[]}],"annotations":[]},"scope":{"name":"scope","qualifiedName":"angular/angular.NgSwitchDirective.scope","comment":"","final":"true","static":"false","constant":"false","type":[{"outer":"angular/angular.Scope","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{"value=":{"name":"value=","qualifiedName":"angular-directive.NgSwitchDirective.value=","comment":"","commentFrom":"angular.NgSwitchDirective.value=","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{"val":{"name":"val","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"getters":{},"constructors":{"":{"name":"","qualifiedName":"angular-directive.NgSwitchDirective.NgSwitchDirective-","comment":"","commentFrom":"","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{"scope":{"name":"scope","optional":"false","named":"false","default":"false","type":[{"outer":"angular-core.Scope","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"operators":{},"methods":{"addCase":{"name":"addCase","qualifiedName":"angular-directive.NgSwitchDirective.addCase","comment":"","commentFrom":"angular.NgSwitchDirective.addCase","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{"value":{"name":"value","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"anchor":{"name":"anchor","optional":"false","named":"false","default":"false","type":[{"outer":"angular-core-dom.ViewPort","inner":[]}],"value":"null","annotations":[]},"viewFactory":{"name":"viewFactory","optional":"false","named":"false","default":"false","type":[{"outer":"angular-core-dom.BoundViewFactory","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"angular-directive.NgSwitchDirective.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>angular-directive.NgSwitchDirective.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"angular-directive.NgSwitchDirective.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"angular-directive.NgSwitchDirective.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>angular-directive.NgSwitchDirective.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>angular-directive.NgSwitchDirective.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"angular-directive.NgSwitchDirective.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"angular-directive.NgSwitchDirective.noSuchMethod","comment":"<p><a>angular-directive.NgSwitchDirective.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>angular-directive.NgSwitchDirective.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>angular-directive.NgSwitchDirective.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>angular-directive.NgSwitchDirective.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[{"name":"angular-core.NgDirective","parameters":[]}],"generics":{}}