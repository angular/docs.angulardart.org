{"name":"PerfModule","qualifiedName":"angular-perf.PerfModule","comment":"","isAbstract":false,"superclass":"angular-perf.Module","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"angular-perf.PerfModule.PerfModule-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]}},"operators":{},"methods":{}},"inheritedMethods":{"setters":{"typeFactories=":{"name":"typeFactories=","qualifiedName":"angular-perf.PerfModule.typeFactories=","comment":"","commentFrom":"","inheritedFrom":"angular-perf.Module.typeFactories=","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"factories":{"name":"factories","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.Type","inner":[]},{"outer":"di.TypeFactory","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]}},"getters":{"bindings":{"name":"bindings","qualifiedName":"angular-perf.PerfModule.bindings","comment":"<p>Compiles and returs bindings map by performing depth-first traversal of the\nchild (installed) modules.</p>","commentFrom":"","inheritedFrom":"angular-perf.Module.bindings","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.int","inner":[]},{"outer":"di-provider.Provider","inner":[]}]}],"parameters":{},"annotations":[]},"hashCode":{"name":"hashCode","qualifiedName":"angular-perf.PerfModule.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>angular-perf.PerfModule.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"angular-perf.PerfModule.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"typeFactories":{"name":"typeFactories","qualifiedName":"angular-perf.PerfModule.typeFactories","comment":"","commentFrom":"","inheritedFrom":"angular-perf.Module.typeFactories","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.Type","inner":[]},{"outer":"di.TypeFactory","inner":[]}]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"angular-perf.PerfModule.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>angular-perf.PerfModule.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>angular-perf.PerfModule.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"factory":{"name":"factory","qualifiedName":"angular-perf.PerfModule.factory","comment":"<p>Register binding to a factory function.abstract</p>\n<p>The <a>angular-perf.PerfModule.factory.factoryFn</a> will be called and all its arguments will get injected.\nThe result of that function is the value that will be injected.</p>","commentFrom":"","inheritedFrom":"angular-perf.Module.factory","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"factoryFn":{"name":"factoryFn","optional":false,"named":false,"default":false,"type":[{"outer":"di.FactoryFn","inner":[]}],"value":null,"annotations":[]},"id":{"name":"id","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Type","inner":[]}],"value":null,"annotations":[]},"visibility":{"name":"visibility","optional":true,"named":true,"default":false,"type":[{"outer":"di.Visibility","inner":[]}],"value":null,"annotations":[]},"withAnnotation":{"name":"withAnnotation","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Type","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"factoryByKey":{"name":"factoryByKey","qualifiedName":"angular-perf.PerfModule.factoryByKey","comment":"","commentFrom":"","inheritedFrom":"angular-perf.Module.factoryByKey","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"factoryFn":{"name":"factoryFn","optional":false,"named":false,"default":false,"type":[{"outer":"di.FactoryFn","inner":[]}],"value":null,"annotations":[]},"key":{"name":"key","optional":false,"named":false,"default":false,"type":[{"outer":"di.Key","inner":[]}],"value":null,"annotations":[]},"visibility":{"name":"visibility","optional":true,"named":true,"default":false,"type":[{"outer":"di.Visibility","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"install":{"name":"install","qualifiedName":"angular-perf.PerfModule.install","comment":"<p>Installs another module into this module. Bindings defined on this module\ntake precidence over the installed module.</p>","commentFrom":"","inheritedFrom":"angular-perf.Module.install","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"module":{"name":"module","optional":false,"named":false,"default":false,"type":[{"outer":"angular-perf.Module","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"angular-perf.PerfModule.noSuchMethod","comment":"<p><a>angular-perf.PerfModule.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>angular-perf.PerfModule.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>angular-perf.PerfModule.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>angular-perf.PerfModule.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"angular-perf.PerfModule.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"type":{"name":"type","qualifiedName":"angular-perf.PerfModule.type","comment":"<p>Register binding to a <a>dart-core.Type</a>.</p>\n<p>The <a>angular-perf.PerfModule.type.implementedBy</a> will be instantiated using new operator and the\nresulting instance will be injected. If no type is provided, then it's\nimplied that <a>angular-perf.PerfModule.type.id</a> should be instantiated.</p>","commentFrom":"","inheritedFrom":"angular-perf.Module.type","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"id":{"name":"id","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Type","inner":[]}],"value":null,"annotations":[]},"implementedBy":{"name":"implementedBy","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Type","inner":[]}],"value":null,"annotations":[]},"visibility":{"name":"visibility","optional":true,"named":true,"default":false,"type":[{"outer":"di.Visibility","inner":[]}],"value":null,"annotations":[]},"withAnnotation":{"name":"withAnnotation","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Type","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"value":{"name":"value","qualifiedName":"angular-perf.PerfModule.value","comment":"<p>Register binding to a concrete value.</p>\n<p>The <a>angular-perf.PerfModule.value.value</a> is what actually will be injected.</p>","commentFrom":"","inheritedFrom":"angular-perf.Module.value","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"id":{"name":"id","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Type","inner":[]}],"value":null,"annotations":[]},"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"visibility":{"name":"visibility","optional":true,"named":true,"default":false,"type":[{"outer":"di.Visibility","inner":[]}],"value":null,"annotations":[]},"withAnnotation":{"name":"withAnnotation","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Type","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}