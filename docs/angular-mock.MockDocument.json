{"name":"MockDocument","qualifiedName":"angular-mock.MockDocument","comment":"","isAbstract":false,"superclass":"angular-mock.Mock","implements":["angular-mock.HtmlDocument"],"subclass":[],"variables":{},"inheritedVariables":{"name":{"name":"name","qualifiedName":"angular-mock.Mock.name","comment":"<p>The mock name. Needed if the log is shared; optional otherwise.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"log":{"name":"log","qualifiedName":"angular-mock.Mock.log","comment":"<p>The <a>angular-mock.Mock.log</a> of calls made. Only used if <a>angular-mock.Mock.name</a> is null.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"mock.LogEntryList","inner":[]}],"annotations":[]},"childNodes":{"name":"childNodes","qualifiedName":"angular-mock.Node.childNodes","comment":"<p>A list of this node's children.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node.childNodes\">Node.childNodes</a>\nfrom MDN.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"angular-mock.Node","inner":[]}]}],"annotations":[{"name":"metadata.DomName","parameters":["Node.childNodes"]}]},"firstChild":{"name":"firstChild","qualifiedName":"angular-mock.Node.firstChild","comment":"<p>The first child of this node.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node.firstChild\">Node.firstChild</a>\nfrom MDN.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"angular-mock.Node","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Node.firstChild"]}]},"lastChild":{"name":"lastChild","qualifiedName":"angular-mock.Node.lastChild","comment":"<p>The last child of this node.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node.lastChild\">Node.lastChild</a>\nfrom MDN.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"angular-mock.Node","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Node.lastChild"]}]},"nextNode":{"name":"nextNode","qualifiedName":"angular-mock.Node.nextNode","comment":"<p>The next sibling node.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node.nextSibling\">Node.nextSibling</a>\nfrom MDN.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"angular-mock.Node","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Node.nextSibling"]}]},"nodeName":{"name":"nodeName","qualifiedName":"angular-mock.Node.nodeName","comment":"<p>The name of this node.</p>\n<p>This varies by this node's <a>angular-mock.Node.nodeType</a>.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node.nodeName\">Node.nodeName</a>\nfrom MDN. This page contains a table of <a>angular-mock.Node.nodeName</a> values for each\n<a>angular-mock.Node.nodeType</a>.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Node.nodeName"]}]},"nodeType":{"name":"nodeType","qualifiedName":"angular-mock.Node.nodeType","comment":"<p>The type of node.</p>\n<p>This value is one of:</p><ul><li><a>angular-mock.Node.ATTRIBUTE_NODE</a> if this node is an attribute.</li><li>[CDATA_SECTION_NODE] if this node is a <a>dart-dom-html.CDataSection</a>.</li><li><a>angular-mock.Node.COMMENT_NODE</a> if this node is a <a>dart-dom-html.Comment</a>.</li><li>[DOCUMENT_FRAGMENT_NODE] if this node is a <a>dart-dom-html.DocumentFragment</a>.</li><li><a>angular-mock.Node.DOCUMENT_NODE</a> if this node is a <a>angular-mock.Document</a>.</li><li>[DOCUMENT_TYPE_NODE] if this node is a DocumentType node.</li><li><a>angular-mock.Node.ELEMENT_NODE</a> if this node is an <a>dart-dom-html.Element</a>.</li><li><a>angular-mock.Node.ENTITY_NODE</a> if this node is an entity.</li><li>[ENTITY_REFERENCE_NODE] if this node is an entity reference.</li><li><a>angular-mock.Node.NOTATION_NODE</a> if this node is a notation.</li><li>[PROCESSING_INSTRUCTION_NODE] if this node is a <a>dart-dom-html.ProcessingInstruction</a>.</li><li><a>angular-mock.Node.TEXT_NODE</a> if this node is a <a>dart-dom-html.Text</a> node.</li></ul>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node.nodeType\">Node.nodeType</a> from MDN.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Node.nodeType"]}]},"nodeValue":{"name":"nodeValue","qualifiedName":"angular-mock.Node.nodeValue","comment":"<p>The value of this node.</p>\n<p>This varies by this type's <a>angular-mock.Node.nodeType</a>.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node.nodeValue\">Node.nodeValue</a>\nfrom MDN. This page contains a table of <a>angular-mock.Node.nodeValue</a> values for each\n<a>angular-mock.Node.nodeType</a>.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Node.nodeValue"]}]},"ownerDocument":{"name":"ownerDocument","qualifiedName":"angular-mock.Node.ownerDocument","comment":"<p>The document this node belongs to.</p>\n<p>Returns null if this node does not belong to any document.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node.ownerDocument\">Node.ownerDocument</a> from\nMDN.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"angular-mock.Document","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Node.ownerDocument"]}]},"parent":{"name":"parent","qualifiedName":"angular-mock.Node.parent","comment":"<p>The parent element of this node.</p>\n<p>Returns null if this node either does not have a parent or its parent is\nnot an element.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node.parentElement\">Node.parentElement</a> from\nW3C.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-dom-html.Element","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Node.parentElement"]}]},"parentNode":{"name":"parentNode","qualifiedName":"angular-mock.Node.parentNode","comment":"<p>The parent node of this node.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node.parentNode\">Node.parentNode</a> from\nMDN.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"angular-mock.Node","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Node.parentNode"]}]},"previousNode":{"name":"previousNode","qualifiedName":"angular-mock.Node.previousNode","comment":"<p>The previous sibling node.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node.previousSibling\">Node.previousSibling</a>\nfrom MDN.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"angular-mock.Node","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Node.previousSibling"]}]},"text":{"name":"text","qualifiedName":"angular-mock.Node.text","comment":"<p>All text within this node and its decendents.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node.textContent\">Node.textContent</a> from\nMDN.</p></li></ul>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Node.textContent"]}]},"activeElement":{"name":"activeElement","qualifiedName":"angular-mock.Document.activeElement","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-dom-html.Element","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Document.activeElement"]},{"name":"metadata.Experimental","parameters":[]}]},"cookie":{"name":"cookie","qualifiedName":"angular-mock.Document.cookie","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Document.cookie"]}]},"currentScript":{"name":"currentScript","qualifiedName":"angular-mock.Document.currentScript","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-dom-html.ScriptElement","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Document.currentScript"]},{"name":"metadata.Experimental","parameters":[]}]},"documentElement":{"name":"documentElement","qualifiedName":"angular-mock.Document.documentElement","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-dom-html.Element","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Document.documentElement"]}]},"domain":{"name":"domain","qualifiedName":"angular-mock.Document.domain","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Document.domain"]}]},"fonts":{"name":"fonts","qualifiedName":"angular-mock.Document.fonts","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-dom-html.FontFaceSet","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Document.fonts"]},{"name":"metadata.Experimental","parameters":[]}]},"hidden":{"name":"hidden","qualifiedName":"angular-mock.Document.hidden","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Document.hidden"]},{"name":"metadata.Experimental","parameters":[]}]},"implementation":{"name":"implementation","qualifiedName":"angular-mock.Document.implementation","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-dom-html.DomImplementation","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Document.implementation"]}]},"readyState":{"name":"readyState","qualifiedName":"angular-mock.Document.readyState","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Document.readyState"]}]},"rootElement":{"name":"rootElement","qualifiedName":"angular-mock.Document.rootElement","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-dom-svg.SvgSvgElement","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Document.rootElement"]},{"name":"metadata.Experimental","parameters":[]}]},"timeline":{"name":"timeline","qualifiedName":"angular-mock.Document.timeline","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-dom-html.Timeline","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Document.timeline"]},{"name":"metadata.Experimental","parameters":[]}]},"visibilityState":{"name":"visibilityState","qualifiedName":"angular-mock.Document.visibilityState","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Document.visibilityState"]},{"name":"metadata.Experimental","parameters":[]}]},"body":{"name":"body","qualifiedName":"angular-mock.HtmlDocument.body","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-dom-html.BodyElement","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Document.body"]}]}},"methods":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"angular-mock.MockDocument.noSuchMethod","comment":"","commentFrom":"angular-mock.Interceptor.noSuchMethod","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{"logging=":{"name":"logging=","qualifiedName":"angular-mock.MockDocument.logging=","comment":"","commentFrom":"","inheritedFrom":"angular-mock.Mock.logging=","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"nodes=":{"name":"nodes=","qualifiedName":"angular-mock.MockDocument.nodes=","comment":"","commentFrom":"","inheritedFrom":"angular-mock.Node.nodes=","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"angular-mock.Node","inner":[]}]}],"value":"null","annotations":[]}},"annotations":[]},"selectedStylesheetSet=":{"name":"selectedStylesheetSet=","qualifiedName":"angular-mock.MockDocument.selectedStylesheetSet=","comment":"","commentFrom":"","inheritedFrom":"angular-mock.HtmlDocument.selectedStylesheetSet=","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"title=":{"name":"title=","qualifiedName":"angular-mock.MockDocument.title=","comment":"","commentFrom":"","inheritedFrom":"angular-mock.HtmlDocument.title=","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Document.title"]}]}},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"angular-mock.MockDocument.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>angular-mock.MockDocument.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"dart-core.Object.hashCode","inheritedFrom":"angular-mock.Interceptor.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"angular-mock.MockDocument.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"dart-core.Object.runtimeType","inheritedFrom":"angular-mock.Interceptor.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"logging":{"name":"logging","qualifiedName":"angular-mock.MockDocument.logging","comment":"","commentFrom":"","inheritedFrom":"angular-mock.Mock.logging","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"on":{"name":"on","qualifiedName":"angular-mock.MockDocument.on","comment":"<p>This is an ease-of-use accessor for event streams which should only be\nused when an explicit accessor is not available.</p>","commentFrom":"","inheritedFrom":"angular-mock.EventTarget.on","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.Events","inner":[]}],"parameters":{},"annotations":[]},"nodes":{"name":"nodes","qualifiedName":"angular-mock.MockDocument.nodes","comment":"<p>A modifiable list of this node's children.</p>","commentFrom":"","inheritedFrom":"angular-mock.Node.nodes","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"angular-mock.Node","inner":[]}]}],"parameters":{},"annotations":[]},"window":{"name":"window","qualifiedName":"angular-mock.MockDocument.window","comment":"","commentFrom":"","inheritedFrom":"angular-mock.Document.window","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular-mock.WindowBase","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.window"]},{"name":"metadata.Experimental","parameters":[]}]},"onAbort":{"name":"onAbort","qualifiedName":"angular-mock.MockDocument.onAbort","comment":"<p>Stream of <code>abort</code> events handled by this <a>angular-mock.Document</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Document.onAbort","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.onabort"]}]},"onBeforeCopy":{"name":"onBeforeCopy","qualifiedName":"angular-mock.MockDocument.onBeforeCopy","comment":"<p>Stream of <code>beforecopy</code> events handled by this <a>angular-mock.Document</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Document.onBeforeCopy","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.onbeforecopy"]}]},"onBeforeCut":{"name":"onBeforeCut","qualifiedName":"angular-mock.MockDocument.onBeforeCut","comment":"<p>Stream of <code>beforecut</code> events handled by this <a>angular-mock.Document</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Document.onBeforeCut","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.onbeforecut"]}]},"onBeforePaste":{"name":"onBeforePaste","qualifiedName":"angular-mock.MockDocument.onBeforePaste","comment":"<p>Stream of <code>beforepaste</code> events handled by this <a>angular-mock.Document</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Document.onBeforePaste","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.onbeforepaste"]}]},"onBlur":{"name":"onBlur","qualifiedName":"angular-mock.MockDocument.onBlur","comment":"<p>Stream of <code>blur</code> events handled by this <a>angular-mock.Document</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Document.onBlur","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.onblur"]}]},"onChange":{"name":"onChange","qualifiedName":"angular-mock.MockDocument.onChange","comment":"<p>Stream of <code>change</code> events handled by this <a>angular-mock.Document</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Document.onChange","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.onchange"]}]},"onClick":{"name":"onClick","qualifiedName":"angular-mock.MockDocument.onClick","comment":"<p>Stream of <code>click</code> events handled by this <a>angular-mock.Document</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Document.onClick","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.onclick"]}]},"onContextMenu":{"name":"onContextMenu","qualifiedName":"angular-mock.MockDocument.onContextMenu","comment":"<p>Stream of <code>contextmenu</code> events handled by this <a>angular-mock.Document</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Document.onContextMenu","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.oncontextmenu"]}]},"onCopy":{"name":"onCopy","qualifiedName":"angular-mock.MockDocument.onCopy","comment":"<p>Stream of <code>copy</code> events handled by this <a>angular-mock.Document</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Document.onCopy","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.oncopy"]}]},"onCut":{"name":"onCut","qualifiedName":"angular-mock.MockDocument.onCut","comment":"<p>Stream of <code>cut</code> events handled by this <a>angular-mock.Document</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Document.onCut","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.oncut"]}]},"onDoubleClick":{"name":"onDoubleClick","qualifiedName":"angular-mock.MockDocument.onDoubleClick","comment":"<p>Stream of <code>doubleclick</code> events handled by this <a>angular-mock.Document</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Document.onDoubleClick","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.ondblclick"]}]},"onDrag":{"name":"onDrag","qualifiedName":"angular-mock.MockDocument.onDrag","comment":"<p>Stream of <code>drag</code> events handled by this <a>angular-mock.Document</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Document.onDrag","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.ondrag"]}]},"onDragEnd":{"name":"onDragEnd","qualifiedName":"angular-mock.MockDocument.onDragEnd","comment":"<p>Stream of <code>dragend</code> events handled by this <a>angular-mock.Document</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Document.onDragEnd","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.ondragend"]}]},"onDragEnter":{"name":"onDragEnter","qualifiedName":"angular-mock.MockDocument.onDragEnter","comment":"<p>Stream of <code>dragenter</code> events handled by this <a>angular-mock.Document</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Document.onDragEnter","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.ondragenter"]}]},"onDragLeave":{"name":"onDragLeave","qualifiedName":"angular-mock.MockDocument.onDragLeave","comment":"<p>Stream of <code>dragleave</code> events handled by this <a>angular-mock.Document</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Document.onDragLeave","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.ondragleave"]}]},"onDragOver":{"name":"onDragOver","qualifiedName":"angular-mock.MockDocument.onDragOver","comment":"<p>Stream of <code>dragover</code> events handled by this <a>angular-mock.Document</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Document.onDragOver","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.ondragover"]}]},"onDragStart":{"name":"onDragStart","qualifiedName":"angular-mock.MockDocument.onDragStart","comment":"<p>Stream of <code>dragstart</code> events handled by this <a>angular-mock.Document</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Document.onDragStart","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.ondragstart"]}]},"onDrop":{"name":"onDrop","qualifiedName":"angular-mock.MockDocument.onDrop","comment":"<p>Stream of <code>drop</code> events handled by this <a>angular-mock.Document</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Document.onDrop","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.ondrop"]}]},"onError":{"name":"onError","qualifiedName":"angular-mock.MockDocument.onError","comment":"<p>Stream of <code>error</code> events handled by this <a>angular-mock.Document</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Document.onError","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.onerror"]}]},"onFocus":{"name":"onFocus","qualifiedName":"angular-mock.MockDocument.onFocus","comment":"<p>Stream of <code>focus</code> events handled by this <a>angular-mock.Document</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Document.onFocus","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.onfocus"]}]},"onInput":{"name":"onInput","qualifiedName":"angular-mock.MockDocument.onInput","comment":"<p>Stream of <code>input</code> events handled by this <a>angular-mock.Document</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Document.onInput","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.oninput"]}]},"onInvalid":{"name":"onInvalid","qualifiedName":"angular-mock.MockDocument.onInvalid","comment":"<p>Stream of <code>invalid</code> events handled by this <a>angular-mock.Document</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Document.onInvalid","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.oninvalid"]}]},"onKeyDown":{"name":"onKeyDown","qualifiedName":"angular-mock.MockDocument.onKeyDown","comment":"<p>Stream of <code>keydown</code> events handled by this <a>angular-mock.Document</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Document.onKeyDown","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.KeyboardEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.onkeydown"]}]},"onKeyPress":{"name":"onKeyPress","qualifiedName":"angular-mock.MockDocument.onKeyPress","comment":"<p>Stream of <code>keypress</code> events handled by this <a>angular-mock.Document</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Document.onKeyPress","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.KeyboardEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.onkeypress"]}]},"onKeyUp":{"name":"onKeyUp","qualifiedName":"angular-mock.MockDocument.onKeyUp","comment":"<p>Stream of <code>keyup</code> events handled by this <a>angular-mock.Document</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Document.onKeyUp","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.KeyboardEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.onkeyup"]}]},"onLoad":{"name":"onLoad","qualifiedName":"angular-mock.MockDocument.onLoad","comment":"<p>Stream of <code>load</code> events handled by this <a>angular-mock.Document</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Document.onLoad","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.onload"]}]},"onMouseDown":{"name":"onMouseDown","qualifiedName":"angular-mock.MockDocument.onMouseDown","comment":"<p>Stream of <code>mousedown</code> events handled by this <a>angular-mock.Document</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Document.onMouseDown","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.onmousedown"]}]},"onMouseEnter":{"name":"onMouseEnter","qualifiedName":"angular-mock.MockDocument.onMouseEnter","comment":"<p>Stream of <code>mouseenter</code> events handled by this <a>angular-mock.Document</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Document.onMouseEnter","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.onmouseenter"]},{"name":"metadata.Experimental","parameters":[]}]},"onMouseLeave":{"name":"onMouseLeave","qualifiedName":"angular-mock.MockDocument.onMouseLeave","comment":"<p>Stream of <code>mouseleave</code> events handled by this <a>angular-mock.Document</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Document.onMouseLeave","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.onmouseleave"]},{"name":"metadata.Experimental","parameters":[]}]},"onMouseMove":{"name":"onMouseMove","qualifiedName":"angular-mock.MockDocument.onMouseMove","comment":"<p>Stream of <code>mousemove</code> events handled by this <a>angular-mock.Document</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Document.onMouseMove","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.onmousemove"]}]},"onMouseOut":{"name":"onMouseOut","qualifiedName":"angular-mock.MockDocument.onMouseOut","comment":"<p>Stream of <code>mouseout</code> events handled by this <a>angular-mock.Document</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Document.onMouseOut","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.onmouseout"]}]},"onMouseOver":{"name":"onMouseOver","qualifiedName":"angular-mock.MockDocument.onMouseOver","comment":"<p>Stream of <code>mouseover</code> events handled by this <a>angular-mock.Document</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Document.onMouseOver","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.onmouseover"]}]},"onMouseUp":{"name":"onMouseUp","qualifiedName":"angular-mock.MockDocument.onMouseUp","comment":"<p>Stream of <code>mouseup</code> events handled by this <a>angular-mock.Document</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Document.onMouseUp","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.MouseEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.onmouseup"]}]},"onMouseWheel":{"name":"onMouseWheel","qualifiedName":"angular-mock.MockDocument.onMouseWheel","comment":"<p>Stream of <code>mousewheel</code> events handled by this <a>angular-mock.Document</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Document.onMouseWheel","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.WheelEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.onmousewheel"]}]},"onPaste":{"name":"onPaste","qualifiedName":"angular-mock.MockDocument.onPaste","comment":"<p>Stream of <code>paste</code> events handled by this <a>angular-mock.Document</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Document.onPaste","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.onpaste"]}]},"onReadyStateChange":{"name":"onReadyStateChange","qualifiedName":"angular-mock.MockDocument.onReadyStateChange","comment":"<p>Stream of <code>readystatechange</code> events handled by this <a>angular-mock.Document</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Document.onReadyStateChange","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.onreadystatechange"]}]},"onReset":{"name":"onReset","qualifiedName":"angular-mock.MockDocument.onReset","comment":"<p>Stream of <code>reset</code> events handled by this <a>angular-mock.Document</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Document.onReset","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.onreset"]}]},"onResize":{"name":"onResize","qualifiedName":"angular-mock.MockDocument.onResize","comment":"","commentFrom":"","inheritedFrom":"angular-mock.Document.onResize","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.onresize"]},{"name":"metadata.Experimental","parameters":[]}]},"onScroll":{"name":"onScroll","qualifiedName":"angular-mock.MockDocument.onScroll","comment":"<p>Stream of <code>scroll</code> events handled by this <a>angular-mock.Document</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Document.onScroll","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.onscroll"]}]},"onSearch":{"name":"onSearch","qualifiedName":"angular-mock.MockDocument.onSearch","comment":"<p>Stream of <code>search</code> events handled by this <a>angular-mock.Document</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Document.onSearch","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.onsearch"]},{"name":"metadata.Experimental","parameters":[]}]},"onSecurityPolicyViolation":{"name":"onSecurityPolicyViolation","qualifiedName":"angular-mock.MockDocument.onSecurityPolicyViolation","comment":"<p>Stream of <code>securitypolicyviolation</code> events handled by this <a>angular-mock.Document</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Document.onSecurityPolicyViolation","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.SecurityPolicyViolationEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.onsecuritypolicyviolation"]},{"name":"metadata.Experimental","parameters":[]}]},"onSelect":{"name":"onSelect","qualifiedName":"angular-mock.MockDocument.onSelect","comment":"<p>Stream of <code>select</code> events handled by this <a>angular-mock.Document</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Document.onSelect","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.onselect"]}]},"onSelectionChange":{"name":"onSelectionChange","qualifiedName":"angular-mock.MockDocument.onSelectionChange","comment":"<p>Stream of <code>selectionchange</code> events handled by this <a>angular-mock.Document</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Document.onSelectionChange","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.onselectionchange"]}]},"onSelectStart":{"name":"onSelectStart","qualifiedName":"angular-mock.MockDocument.onSelectStart","comment":"<p>Stream of <code>selectstart</code> events handled by this <a>angular-mock.Document</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Document.onSelectStart","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.onselectstart"]}]},"onSubmit":{"name":"onSubmit","qualifiedName":"angular-mock.MockDocument.onSubmit","comment":"<p>Stream of <code>submit</code> events handled by this <a>angular-mock.Document</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Document.onSubmit","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.onsubmit"]}]},"onTouchCancel":{"name":"onTouchCancel","qualifiedName":"angular-mock.MockDocument.onTouchCancel","comment":"<p>Stream of <code>touchcancel</code> events handled by this <a>angular-mock.Document</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Document.onTouchCancel","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.TouchEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.ontouchcancel"]},{"name":"metadata.Experimental","parameters":[]}]},"onTouchEnd":{"name":"onTouchEnd","qualifiedName":"angular-mock.MockDocument.onTouchEnd","comment":"<p>Stream of <code>touchend</code> events handled by this <a>angular-mock.Document</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Document.onTouchEnd","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.TouchEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.ontouchend"]},{"name":"metadata.Experimental","parameters":[]}]},"onTouchMove":{"name":"onTouchMove","qualifiedName":"angular-mock.MockDocument.onTouchMove","comment":"<p>Stream of <code>touchmove</code> events handled by this <a>angular-mock.Document</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Document.onTouchMove","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.TouchEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.ontouchmove"]},{"name":"metadata.Experimental","parameters":[]}]},"onTouchStart":{"name":"onTouchStart","qualifiedName":"angular-mock.MockDocument.onTouchStart","comment":"<p>Stream of <code>touchstart</code> events handled by this <a>angular-mock.Document</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Document.onTouchStart","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-dom-html.TouchEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.ontouchstart"]},{"name":"metadata.Experimental","parameters":[]}]},"onFullscreenChange":{"name":"onFullscreenChange","qualifiedName":"angular-mock.MockDocument.onFullscreenChange","comment":"<p>Stream of <code>fullscreenchange</code> events handled by this <a>angular-mock.Document</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Document.onFullscreenChange","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.onwebkitfullscreenchange"]},{"name":"metadata.Experimental","parameters":[]}]},"onFullscreenError":{"name":"onFullscreenError","qualifiedName":"angular-mock.MockDocument.onFullscreenError","comment":"<p>Stream of <code>fullscreenerror</code> events handled by this <a>angular-mock.Document</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Document.onFullscreenError","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.onwebkitfullscreenerror"]},{"name":"metadata.Experimental","parameters":[]}]},"onPointerLockChange":{"name":"onPointerLockChange","qualifiedName":"angular-mock.MockDocument.onPointerLockChange","comment":"<p>Stream of <code>pointerlockchange</code> events handled by this <a>angular-mock.Document</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Document.onPointerLockChange","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.onwebkitpointerlockchange"]},{"name":"metadata.Experimental","parameters":[]}]},"onPointerLockError":{"name":"onPointerLockError","qualifiedName":"angular-mock.MockDocument.onPointerLockError","comment":"<p>Stream of <code>pointerlockerror</code> events handled by this <a>angular-mock.Document</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Document.onPointerLockError","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.onwebkitpointerlockerror"]},{"name":"metadata.Experimental","parameters":[]}]},"supportsRegister":{"name":"supportsRegister","qualifiedName":"angular-mock.MockDocument.supportsRegister","comment":"<p>Checks if register is supported on the current platform.</p>","commentFrom":"","inheritedFrom":"angular-mock.Document.supportsRegister","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"head":{"name":"head","qualifiedName":"angular-mock.MockDocument.head","comment":"","commentFrom":"","inheritedFrom":"angular-mock.HtmlDocument.head","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.HeadElement","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.head"]}]},"lastModified":{"name":"lastModified","qualifiedName":"angular-mock.MockDocument.lastModified","comment":"","commentFrom":"","inheritedFrom":"angular-mock.HtmlDocument.lastModified","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.lastModified"]}]},"preferredStylesheetSet":{"name":"preferredStylesheetSet","qualifiedName":"angular-mock.MockDocument.preferredStylesheetSet","comment":"","commentFrom":"","inheritedFrom":"angular-mock.HtmlDocument.preferredStylesheetSet","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.preferredStylesheetSet"]}]},"referrer":{"name":"referrer","qualifiedName":"angular-mock.MockDocument.referrer","comment":"","commentFrom":"","inheritedFrom":"angular-mock.HtmlDocument.referrer","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.referrer"]}]},"selectedStylesheetSet":{"name":"selectedStylesheetSet","qualifiedName":"angular-mock.MockDocument.selectedStylesheetSet","comment":"","commentFrom":"","inheritedFrom":"angular-mock.HtmlDocument.selectedStylesheetSet","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.selectedStylesheetSet"]}]},"styleSheets":{"name":"styleSheets","qualifiedName":"angular-mock.MockDocument.styleSheets","comment":"","commentFrom":"","inheritedFrom":"angular-mock.HtmlDocument.styleSheets","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-dom-html.StyleSheet","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.styleSheets"]}]},"title":{"name":"title","qualifiedName":"angular-mock.MockDocument.title","comment":"","commentFrom":"","inheritedFrom":"angular-mock.HtmlDocument.title","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.title"]}]},"fullscreenElement":{"name":"fullscreenElement","qualifiedName":"angular-mock.MockDocument.fullscreenElement","comment":"<p>Returns the element, if any, that is currently displayed in fullscreen.</p>\n<p>Returns null if there is currently no fullscreen element. You can use\nthis to determine if the page is in fullscreen mode.</p>\n<pre><code>myVideo = new VideoElement();\nif (document.fullscreenElement == null) {\n  myVideo.requestFullscreen();\n  print(document.fullscreenElement == myVideo); // true\n}\n</code></pre>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://docs.webplatform.org/wiki/tutorials/using_the_full-screen_api\">Using the fullscreen API</a> from\nWebPlatform.org.</p></li><li>\n<p><a href=\"http://www.w3.org/TR/fullscreen/\">Fullscreen specification</a> from W3C.</p></li></ul>","commentFrom":"","inheritedFrom":"angular-mock.HtmlDocument.fullscreenElement","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.Element","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.webkitFullscreenElement"]},{"name":"metadata.SupportedBrowser","parameters":["Chrome"]},{"name":"metadata.SupportedBrowser","parameters":["Safari"]},{"name":"metadata.Experimental","parameters":[]}]},"fullscreenEnabled":{"name":"fullscreenEnabled","qualifiedName":"angular-mock.MockDocument.fullscreenEnabled","comment":"<p>Returns true if this document can display elements in fullscreen mode.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://docs.webplatform.org/wiki/tutorials/using_the_full-screen_api\">Using the fullscreen API</a> from\nWebPlatform.org.</p></li><li>\n<p><a href=\"http://www.w3.org/TR/fullscreen/\">Fullscreen specification</a> from W3C.</p></li></ul>","commentFrom":"","inheritedFrom":"angular-mock.HtmlDocument.fullscreenEnabled","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.webkitFullscreenEnabled"]},{"name":"metadata.SupportedBrowser","parameters":["Chrome"]},{"name":"metadata.SupportedBrowser","parameters":["Safari"]},{"name":"metadata.Experimental","parameters":[]}]},"hidden":{"name":"hidden","qualifiedName":"angular-mock.MockDocument.hidden","comment":"","commentFrom":"","inheritedFrom":"angular-mock.HtmlDocument.hidden","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.webkitHidden"]},{"name":"metadata.SupportedBrowser","parameters":["Chrome"]},{"name":"metadata.SupportedBrowser","parameters":["Safari"]},{"name":"metadata.Experimental","parameters":[]}]},"pointerLockElement":{"name":"pointerLockElement","qualifiedName":"angular-mock.MockDocument.pointerLockElement","comment":"","commentFrom":"","inheritedFrom":"angular-mock.HtmlDocument.pointerLockElement","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.Element","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.webkitPointerLockElement"]},{"name":"metadata.SupportedBrowser","parameters":["Chrome"]},{"name":"metadata.SupportedBrowser","parameters":["Safari"]},{"name":"metadata.Experimental","parameters":[]}]},"visibilityState":{"name":"visibilityState","qualifiedName":"angular-mock.MockDocument.visibilityState","comment":"","commentFrom":"","inheritedFrom":"angular-mock.HtmlDocument.visibilityState","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.visibilityState"]},{"name":"metadata.SupportedBrowser","parameters":["Chrome"]},{"name":"metadata.SupportedBrowser","parameters":["Firefox"]},{"name":"metadata.SupportedBrowser","parameters":["Internet Explorer","10"]},{"name":"metadata.Experimental","parameters":[]}]},"onVisibilityChange":{"name":"onVisibilityChange","qualifiedName":"angular-mock.MockDocument.onVisibilityChange","comment":"","commentFrom":"","inheritedFrom":"angular-mock.HtmlDocument.onVisibilityChange","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"angular-mock.Event","inner":[]}]}],"parameters":{},"annotations":[{"name":"metadata.SupportedBrowser","parameters":["Chrome"]},{"name":"metadata.SupportedBrowser","parameters":["Firefox"]},{"name":"metadata.SupportedBrowser","parameters":["Internet Explorer","10"]},{"name":"metadata.Experimental","parameters":[]}]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"angular-mock.MockDocument.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>angular-mock.MockDocument.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>angular-mock.MockDocument.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"dart-core.Object.==","inheritedFrom":"angular-mock.Interceptor.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"angular-mock.MockDocument.toString","comment":"<p>Print out a String representation of this Node.</p>","commentFrom":"","inheritedFrom":"angular-mock.Node.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"angular-mock.MockDocument.noSuchMethod","comment":"<p><a>angular-mock.MockDocument.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>angular-mock.MockDocument.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>angular-mock.MockDocument.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>angular-mock.MockDocument.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"dart-core.Object.noSuchMethod","inheritedFrom":"angular-mock.Interceptor.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"when":{"name":"when","qualifiedName":"angular-mock.MockDocument.when","comment":"<p><a>angular-mock.MockDocument.when</a> is used to create a new or extend an existing <a>mock.Behavior</a>.\nA [CallMatcher] [filter] must be supplied, and the <a>mock.Behavior</a>s for\nthat signature are returned (being created first if needed).</p>\n<p>Typical use case:</p>\n<pre><code>mock.when(callsTo(...)).alwaysReturn(...);\n</code></pre>","commentFrom":"","inheritedFrom":"angular-mock.Mock.when","static":false,"abstract":false,"constant":false,"return":[{"outer":"mock.Behavior","inner":[]}],"parameters":{"logFilter":{"name":"logFilter","optional":false,"named":false,"default":false,"type":[{"outer":"mock.CallMatcher","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"verifyZeroInteractions":{"name":"verifyZeroInteractions","qualifiedName":"angular-mock.MockDocument.verifyZeroInteractions","comment":"<p><a>angular-mock.MockDocument.verifyZeroInteractions</a> returns true if no calls were made</p>","commentFrom":"","inheritedFrom":"angular-mock.Mock.verifyZeroInteractions","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"getLogs":{"name":"getLogs","qualifiedName":"angular-mock.MockDocument.getLogs","comment":"<p><a>angular-mock.MockDocument.getLogs</a> extracts all calls from the call log that match the\n<a>angular-mock.MockDocument.getLogs.logFilter</a>, and returns the matching list of <a>mock.LogEntry</a>s. If\n<a>angular-mock.MockDocument.getLogs.destructive</a> is false (the default) the matching calls are left\nin the log, else they are removed. Removal allows us to verify a\nset of interactions and then verify that there are no other\ninteractions left. <a>angular-mock.MockDocument.getLogs.actionMatcher</a> can be used to further\nrestrict the returned logs based on the action the mock performed.\n<a>angular-mock.MockDocument.getLogs.logFilter</a> can be a <a>mock.CallMatcher</a> or a predicate function that\ntakes a <a>mock.LogEntry</a> and returns a bool.</p>\n<p>Typical usage:</p>\n<pre><code>getLogs(callsTo(...)).verify(...);\n</code></pre>","commentFrom":"","inheritedFrom":"angular-mock.Mock.getLogs","static":false,"abstract":false,"constant":false,"return":[{"outer":"mock.LogEntryList","inner":[]}],"parameters":{"logFilter":{"name":"logFilter","optional":true,"named":false,"default":false,"type":[{"outer":"mock.CallMatcher","inner":[]}],"value":"null","annotations":[]},"actionMatcher":{"name":"actionMatcher","optional":true,"named":false,"default":false,"type":[{"outer":"matcher-interfaces.Matcher","inner":[]}],"value":"null","annotations":[]},"destructive":{"name":"destructive","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]}},"annotations":[]},"calls":{"name":"calls","qualifiedName":"angular-mock.MockDocument.calls","comment":"<p>Useful shorthand method that creates a <a>mock.CallMatcher</a> from its arguments\nand then calls <a>angular-mock.MockDocument.getLogs</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Mock.calls","static":false,"abstract":false,"constant":false,"return":[{"outer":"mock.LogEntryList","inner":[]}],"parameters":{"method":{"name":"method","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"arg0":{"name":"arg0","optional":true,"named":false,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"ConstructedConstant(_Sentinel())","annotations":[]},"arg1":{"name":"arg1","optional":true,"named":false,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"ConstructedConstant(_Sentinel())","annotations":[]},"arg2":{"name":"arg2","optional":true,"named":false,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"ConstructedConstant(_Sentinel())","annotations":[]},"arg3":{"name":"arg3","optional":true,"named":false,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"ConstructedConstant(_Sentinel())","annotations":[]},"arg4":{"name":"arg4","optional":true,"named":false,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"ConstructedConstant(_Sentinel())","annotations":[]},"arg5":{"name":"arg5","optional":true,"named":false,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"ConstructedConstant(_Sentinel())","annotations":[]},"arg6":{"name":"arg6","optional":true,"named":false,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"ConstructedConstant(_Sentinel())","annotations":[]},"arg7":{"name":"arg7","optional":true,"named":false,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"ConstructedConstant(_Sentinel())","annotations":[]},"arg8":{"name":"arg8","optional":true,"named":false,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"ConstructedConstant(_Sentinel())","annotations":[]},"arg9":{"name":"arg9","optional":true,"named":false,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"ConstructedConstant(_Sentinel())","annotations":[]}},"annotations":[]},"resetBehavior":{"name":"resetBehavior","qualifiedName":"angular-mock.MockDocument.resetBehavior","comment":"<p>Clear the behaviors for the Mock.</p>","commentFrom":"","inheritedFrom":"angular-mock.Mock.resetBehavior","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"clearLogs":{"name":"clearLogs","qualifiedName":"angular-mock.MockDocument.clearLogs","comment":"<p>Clear the logs for the Mock.</p>","commentFrom":"","inheritedFrom":"angular-mock.Mock.clearLogs","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"reset":{"name":"reset","qualifiedName":"angular-mock.MockDocument.reset","comment":"<p>Clear both logs and behavior.</p>","commentFrom":"","inheritedFrom":"angular-mock.Mock.reset","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"addEventListener":{"name":"addEventListener","qualifiedName":"angular-mock.MockDocument.addEventListener","comment":"","commentFrom":"","inheritedFrom":"angular-mock.EventTarget.addEventListener","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"type":{"name":"type","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"listener":{"name":"listener","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.EventListener","inner":[]}],"value":"null","annotations":[]},"useCapture":{"name":"useCapture","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["EventTarget.addEventListener"]}]},"dispatchEvent":{"name":"dispatchEvent","qualifiedName":"angular-mock.MockDocument.dispatchEvent","comment":"","commentFrom":"","inheritedFrom":"angular-mock.EventTarget.dispatchEvent","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"event":{"name":"event","optional":false,"named":false,"default":false,"type":[{"outer":"angular-mock.Event","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["EventTarget.dispatchEvent"]}]},"removeEventListener":{"name":"removeEventListener","qualifiedName":"angular-mock.MockDocument.removeEventListener","comment":"","commentFrom":"","inheritedFrom":"angular-mock.EventTarget.removeEventListener","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"type":{"name":"type","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"listener":{"name":"listener","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.EventListener","inner":[]}],"value":"null","annotations":[]},"useCapture":{"name":"useCapture","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["EventTarget.removeEventListener"]}]},"remove":{"name":"remove","qualifiedName":"angular-mock.MockDocument.remove","comment":"<p>Removes this node from the DOM.</p>","commentFrom":"","inheritedFrom":"angular-mock.Node.remove","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Node.removeChild"]}]},"replaceWith":{"name":"replaceWith","qualifiedName":"angular-mock.MockDocument.replaceWith","comment":"<p>Replaces this node with another node.</p>","commentFrom":"","inheritedFrom":"angular-mock.Node.replaceWith","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular-mock.Node","inner":[]}],"parameters":{"otherNode":{"name":"otherNode","optional":false,"named":false,"default":false,"type":[{"outer":"angular-mock.Node","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Node.replaceChild"]}]},"insertAllBefore":{"name":"insertAllBefore","qualifiedName":"angular-mock.MockDocument.insertAllBefore","comment":"<p>Inserts all of the nodes into this node directly before refChild.</p>\n<p>See also:</p><ul><li><a>angular-mock.MockDocument.insertBefore</a></li></ul>","commentFrom":"","inheritedFrom":"angular-mock.Node.insertAllBefore","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular-mock.Node","inner":[]}],"parameters":{"newNodes":{"name":"newNodes","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"angular-mock.Node","inner":[]}]}],"value":"null","annotations":[]},"refChild":{"name":"refChild","optional":false,"named":false,"default":false,"type":[{"outer":"angular-mock.Node","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"append":{"name":"append","qualifiedName":"angular-mock.MockDocument.append","comment":"<p>Adds a node to the end of the child <a>angular-mock.MockDocument.nodes</a> list of this node.</p>\n<p>If the node already exists in this document, it will be removed from its\ncurrent parent node, then added to this node.</p>\n<p>This method is more efficient than <code>nodes.add</code>, and is the preferred\nway of appending a child node.</p>","commentFrom":"","inheritedFrom":"angular-mock.Node.append","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular-mock.Node","inner":[]}],"parameters":{"newChild":{"name":"newChild","optional":false,"named":false,"default":false,"type":[{"outer":"angular-mock.Node","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Node.appendChild"]}]},"clone":{"name":"clone","qualifiedName":"angular-mock.MockDocument.clone","comment":"<p>Returns a copy of this node.</p>\n<p>If <a>angular-mock.MockDocument.clone.deep</a> is <code>true</code>, then all of this node's children and decendents are\ncopied as well. If <a>angular-mock.MockDocument.clone.deep</a> is <code>false</code>, then only this node is copied.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node.cloneNode\">Node.cloneNode</a> from\nMDN.</p></li></ul>","commentFrom":"","inheritedFrom":"angular-mock.Node.clone","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular-mock.Node","inner":[]}],"parameters":{"deep":{"name":"deep","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Node.cloneNode"]}]},"contains":{"name":"contains","qualifiedName":"angular-mock.MockDocument.contains","comment":"<p>Returns true if this node contains the specified node.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node.contains\">Node.contains</a> from MDN.</p></li></ul>","commentFrom":"","inheritedFrom":"angular-mock.Node.contains","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"angular-mock.Node","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Node.contains"]}]},"hasChildNodes":{"name":"hasChildNodes","qualifiedName":"angular-mock.MockDocument.hasChildNodes","comment":"<p>Returns true if this node has any children.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node.hasChildNodes\">Node.hasChildNodes</a> from\nMDN.</p></li></ul>","commentFrom":"","inheritedFrom":"angular-mock.Node.hasChildNodes","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Node.hasChildNodes"]}]},"insertBefore":{"name":"insertBefore","qualifiedName":"angular-mock.MockDocument.insertBefore","comment":"<p>Inserts all of the nodes into this node directly before refChild.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node.insertBefore\">Node.insertBefore</a> from\nMDN.</p></li></ul>","commentFrom":"","inheritedFrom":"angular-mock.Node.insertBefore","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular-mock.Node","inner":[]}],"parameters":{"newChild":{"name":"newChild","optional":false,"named":false,"default":false,"type":[{"outer":"angular-mock.Node","inner":[]}],"value":"null","annotations":[]},"refChild":{"name":"refChild","optional":false,"named":false,"default":false,"type":[{"outer":"angular-mock.Node","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Node.insertBefore"]}]},"adoptNode":{"name":"adoptNode","qualifiedName":"angular-mock.MockDocument.adoptNode","comment":"","commentFrom":"","inheritedFrom":"angular-mock.Document.adoptNode","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular-mock.Node","inner":[]}],"parameters":{"node":{"name":"node","optional":false,"named":false,"default":false,"type":[{"outer":"angular-mock.Node","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Document.adoptNode"]}]},"createDocumentFragment":{"name":"createDocumentFragment","qualifiedName":"angular-mock.MockDocument.createDocumentFragment","comment":"","commentFrom":"","inheritedFrom":"angular-mock.Document.createDocumentFragment","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.DocumentFragment","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.createDocumentFragment"]}]},"createElementNS":{"name":"createElementNS","qualifiedName":"angular-mock.MockDocument.createElementNS","comment":"","commentFrom":"","inheritedFrom":"angular-mock.Document.createElementNS","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.Element","inner":[]}],"parameters":{"namespaceURI":{"name":"namespaceURI","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"qualifiedName":{"name":"qualifiedName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"typeExtension":{"name":"typeExtension","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Document.createElementNS"]}]},"createRange":{"name":"createRange","qualifiedName":"angular-mock.MockDocument.createRange","comment":"","commentFrom":"","inheritedFrom":"angular-mock.Document.createRange","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.Range","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.createRange"]}]},"execCommand":{"name":"execCommand","qualifiedName":"angular-mock.MockDocument.execCommand","comment":"","commentFrom":"","inheritedFrom":"angular-mock.Document.execCommand","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"command":{"name":"command","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"userInterface":{"name":"userInterface","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"null","annotations":[]},"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Document.execCommand"]}]},"getElementById":{"name":"getElementById","qualifiedName":"angular-mock.MockDocument.getElementById","comment":"","commentFrom":"","inheritedFrom":"angular-mock.Document.getElementById","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.Element","inner":[]}],"parameters":{"elementId":{"name":"elementId","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Document.getElementById"]}]},"getElementsByClassName":{"name":"getElementsByClassName","qualifiedName":"angular-mock.MockDocument.getElementsByClassName","comment":"","commentFrom":"","inheritedFrom":"angular-mock.Document.getElementsByClassName","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.HtmlCollection","inner":[]}],"parameters":{"classNames":{"name":"classNames","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Document.getElementsByClassName"]}]},"getElementsByName":{"name":"getElementsByName","qualifiedName":"angular-mock.MockDocument.getElementsByName","comment":"","commentFrom":"","inheritedFrom":"angular-mock.Document.getElementsByName","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"angular-mock.Node","inner":[]}]}],"parameters":{"elementName":{"name":"elementName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Document.getElementsByName"]}]},"getElementsByTagName":{"name":"getElementsByTagName","qualifiedName":"angular-mock.MockDocument.getElementsByTagName","comment":"","commentFrom":"","inheritedFrom":"angular-mock.Document.getElementsByTagName","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.HtmlCollection","inner":[]}],"parameters":{"localName":{"name":"localName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Document.getElementsByTagName"]}]},"importNode":{"name":"importNode","qualifiedName":"angular-mock.MockDocument.importNode","comment":"","commentFrom":"","inheritedFrom":"angular-mock.Document.importNode","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular-mock.Node","inner":[]}],"parameters":{"node":{"name":"node","optional":false,"named":false,"default":false,"type":[{"outer":"angular-mock.Node","inner":[]}],"value":"null","annotations":[]},"deep":{"name":"deep","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Document.importNode"]}]},"queryCommandEnabled":{"name":"queryCommandEnabled","qualifiedName":"angular-mock.MockDocument.queryCommandEnabled","comment":"","commentFrom":"","inheritedFrom":"angular-mock.Document.queryCommandEnabled","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"command":{"name":"command","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Document.queryCommandEnabled"]}]},"queryCommandIndeterm":{"name":"queryCommandIndeterm","qualifiedName":"angular-mock.MockDocument.queryCommandIndeterm","comment":"","commentFrom":"","inheritedFrom":"angular-mock.Document.queryCommandIndeterm","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"command":{"name":"command","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Document.queryCommandIndeterm"]}]},"queryCommandState":{"name":"queryCommandState","qualifiedName":"angular-mock.MockDocument.queryCommandState","comment":"","commentFrom":"","inheritedFrom":"angular-mock.Document.queryCommandState","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"command":{"name":"command","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Document.queryCommandState"]}]},"queryCommandSupported":{"name":"queryCommandSupported","qualifiedName":"angular-mock.MockDocument.queryCommandSupported","comment":"","commentFrom":"","inheritedFrom":"angular-mock.Document.queryCommandSupported","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"command":{"name":"command","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Document.queryCommandSupported"]}]},"queryCommandValue":{"name":"queryCommandValue","qualifiedName":"angular-mock.MockDocument.queryCommandValue","comment":"","commentFrom":"","inheritedFrom":"angular-mock.Document.queryCommandValue","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"command":{"name":"command","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Document.queryCommandValue"]}]},"querySelector":{"name":"querySelector","qualifiedName":"angular-mock.MockDocument.querySelector","comment":"<p>Finds the first descendant element of this document that matches the\nspecified group of selectors.</p>\n<p>Unless your webpage contains multiple documents, the top-level\n<a>angular-mock.MockDocument.querySelector</a>\nmethod behaves the same as this method, so you should use it instead to\nsave typing a few characters.</p>\n<p><a>angular-mock.MockDocument.querySelector.selectors</a> should be a string using CSS selector syntax.</p>\n<pre><code>var element1 = document.querySelector('.className');\nvar element2 = document.querySelector('#id');\n</code></pre>\n<p>For details about CSS selector syntax, see the\n<a href=\"http://www.w3.org/TR/css3-selectors/\">CSS selector specification</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Document.querySelector","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.Element","inner":[]}],"parameters":{"selectors":{"name":"selectors","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Document.querySelector"]}]},"querySelectorAll":{"name":"querySelectorAll","qualifiedName":"angular-mock.MockDocument.querySelectorAll","comment":"<p>Finds all descendant elements of this document that match the specified\ngroup of selectors.</p>\n<p>Unless your webpage contains multiple documents, the top-level\n<a>angular-mock.MockDocument.querySelectorAll</a>\nmethod behaves the same as this method, so you should use it instead to\nsave typing a few characters.</p>\n<p><a>angular-mock.MockDocument.querySelectorAll.selectors</a> should be a string using CSS selector syntax.</p>\n<pre><code>var items = document.querySelectorAll('.itemClassName');\n</code></pre>\n<p>For details about CSS selector syntax, see the\n<a href=\"http://www.w3.org/TR/css3-selectors/\">CSS selector specification</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Document.querySelectorAll","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.ElementList","inner":[]}],"parameters":{"selectors":{"name":"selectors","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"query":{"name":"query","qualifiedName":"angular-mock.MockDocument.query","comment":"<p>Alias for <a>angular-mock.MockDocument.querySelector</a>. Note this function is deprecated because its\nsemantics will be changing in the future.</p>","commentFrom":"","inheritedFrom":"angular-mock.Document.query","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.Element","inner":[]}],"parameters":{"relativeSelectors":{"name":"relativeSelectors","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"dart-core.Deprecated","parameters":["next release"]},{"name":"metadata.Experimental","parameters":[]},{"name":"metadata.DomName","parameters":["Document.querySelector"]}]},"queryAll":{"name":"queryAll","qualifiedName":"angular-mock.MockDocument.queryAll","comment":"<p>Alias for <a>angular-mock.MockDocument.querySelectorAll</a>. Note this function is deprecated because its\nsemantics will be changing in the future.</p>","commentFrom":"","inheritedFrom":"angular-mock.Document.queryAll","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.ElementList","inner":[]}],"parameters":{"relativeSelectors":{"name":"relativeSelectors","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"dart-core.Deprecated","parameters":["next release"]},{"name":"metadata.Experimental","parameters":[]},{"name":"metadata.DomName","parameters":["Document.querySelectorAll"]}]},"createElement":{"name":"createElement","qualifiedName":"angular-mock.MockDocument.createElement","comment":"","commentFrom":"","inheritedFrom":"angular-mock.Document.createElement","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.Element","inner":[]}],"parameters":{"tagName":{"name":"tagName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"typeExtension":{"name":"typeExtension","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Document.createElement"]}]},"caretRangeFromPoint":{"name":"caretRangeFromPoint","qualifiedName":"angular-mock.MockDocument.caretRangeFromPoint","comment":"","commentFrom":"","inheritedFrom":"angular-mock.HtmlDocument.caretRangeFromPoint","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.Range","inner":[]}],"parameters":{"x":{"name":"x","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]},"y":{"name":"y","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Document.caretRangeFromPoint"]}]},"elementFromPoint":{"name":"elementFromPoint","qualifiedName":"angular-mock.MockDocument.elementFromPoint","comment":"","commentFrom":"","inheritedFrom":"angular-mock.HtmlDocument.elementFromPoint","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.Element","inner":[]}],"parameters":{"x":{"name":"x","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]},"y":{"name":"y","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Document.elementFromPoint"]}]},"getCssCanvasContext":{"name":"getCssCanvasContext","qualifiedName":"angular-mock.MockDocument.getCssCanvasContext","comment":"<p>Gets a CanvasRenderingContext which can be used as the CSS background of an\nelement.</p>\n<p>CSS:</p>\n<pre><code>background: -webkit-canvas(backgroundCanvas)\n</code></pre>\n<p>Generate the canvas:</p>\n<pre><code>var context = document.getCssCanvasContext('2d', 'backgroundCanvas',\n    100, 100);\ncontext.fillStyle = 'red';\ncontext.fillRect(0, 0, 100, 100);\n</code></pre>\n<p>See also:</p><ul><li><a>dart-dom-html.HtmlDocument.supportsCssCanvasContext</a></li><li><a>dart-dom-html.CanvasElement.getContext</a></li></ul>","commentFrom":"","inheritedFrom":"angular-mock.HtmlDocument.getCssCanvasContext","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.CanvasRenderingContext","inner":[]}],"parameters":{"contextId":{"name":"contextId","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"width":{"name":"width","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]},"height":{"name":"height","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.SupportedBrowser","parameters":["Chrome"]},{"name":"metadata.SupportedBrowser","parameters":["Safari"]},{"name":"metadata.Experimental","parameters":[]},{"name":"metadata.DomName","parameters":["Document.getCSSCanvasContext"]}]},"exitFullscreen":{"name":"exitFullscreen","qualifiedName":"angular-mock.MockDocument.exitFullscreen","comment":"<p>Returns page to standard layout.</p>\n<p>Has no effect if the page is not in fullscreen mode.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://docs.webplatform.org/wiki/tutorials/using_the_full-screen_api\">Using the fullscreen API</a> from\nWebPlatform.org.</p></li><li>\n<p><a href=\"http://www.w3.org/TR/fullscreen/\">Fullscreen specification</a> from W3C.</p></li></ul>","commentFrom":"","inheritedFrom":"angular-mock.HtmlDocument.exitFullscreen","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.webkitExitFullscreen"]},{"name":"metadata.SupportedBrowser","parameters":["Chrome"]},{"name":"metadata.SupportedBrowser","parameters":["Safari"]},{"name":"metadata.Experimental","parameters":[]}]},"exitPointerLock":{"name":"exitPointerLock","qualifiedName":"angular-mock.MockDocument.exitPointerLock","comment":"","commentFrom":"","inheritedFrom":"angular-mock.HtmlDocument.exitPointerLock","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Document.webkitExitPointerLock"]},{"name":"metadata.SupportedBrowser","parameters":["Chrome"]},{"name":"metadata.SupportedBrowser","parameters":["Safari"]},{"name":"metadata.Experimental","parameters":[]}]},"register":{"name":"register","qualifiedName":"angular-mock.MockDocument.register","comment":"<p>Register a custom subclass of Element to be instantiatable by the DOM.</p>\n<p>This is necessary to allow the construction of any custom elements.</p>\n<p>The class being registered must either subclass HtmlElement or SvgElement.\nIf they subclass these directly then they can be used as:</p>\n<pre><code>class FooElement extends HtmlElement{\n   void created() {\n     print('FooElement created!');\n   }\n}\n\nmain() {\n  document.register('x-foo', FooElement);\n  var myFoo = new Element.tag('x-foo');\n  // prints 'FooElement created!' to the console.\n}\n</code></pre>\n<p>The custom element can also be instantiated via HTML using the syntax\n<code>&lt;x-foo&gt;&lt;/x-foo&gt;</code></p>\n<p>Other elements can be subclassed as well:</p>\n<pre><code>class BarElement extends InputElement{\n   void created() {\n     print('BarElement created!');\n   }\n}\n\nmain() {\n  document.register('x-bar', BarElement);\n  var myBar = new Element.tag('input', 'x-bar');\n  // prints 'BarElement created!' to the console.\n}\n</code></pre>\n<p>This custom element can also be instantiated via HTML using the syntax\n<code>&lt;input is=\"x-bar\"&gt;&lt;/input&gt;</code></p>\n<p>The nativeTagName parameter is needed by platforms without native support\nwhen subclassing a native type other than:</p><ul><li>HtmlElement</li><li>SvgElement</li><li>AnchorElement</li><li>AudioElement</li><li>ButtonElement</li><li>CanvasElement</li><li>DivElement</li><li>ImageElement</li><li>InputElement</li><li>LIElement</li><li>LabelElement</li><li>MenuElement</li><li>MeterElement</li><li>OListElement</li><li>OptionElement</li><li>OutputElement</li><li>ParagraphElement</li><li>PreElement</li><li>ProgressElement</li><li>SelectElement</li><li>SpanElement</li><li>UListElement</li><li>VideoElement</li></ul>","commentFrom":"","inheritedFrom":"angular-mock.HtmlDocument.register","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"tag":{"name":"tag","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"customElementClass":{"name":"customElementClass","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Type","inner":[]}],"value":"null","annotations":[]},"extendsTag":{"name":"extendsTag","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.Experimental","parameters":[]}]}}},"annotations":[{"name":"dart-core._Proxy","parameters":[]}],"generics":{}}