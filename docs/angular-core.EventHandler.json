{"name":"EventHandler","qualifiedName":"angular-core.EventHandler","comment":"<p><a>angular-core.EventHandler</a> is responsible for handling events bound using on-* syntax\n(i.e. <code>on-click=\"ctrl.doSomething();\"</code>). The root of the application has an\nEventHandler attached as does every <a>angular-core-annotation_src.Component</a>.</p>\n<p>Events bound within <a>angular-core-annotation_src.Component</a> are handled by EventHandler attached to\ntheir ShadowRoot. All other events are handled by EventHandler attached\nto the application root (Application).</p>\n<p><strong>Note</strong>: The expressions are executed within the closest context.</p>\n<p>Example:</p>\n<pre><code>&lt;div foo&gt;\n  &lt;button on-click=\"ctrl.say('Hello');\"&gt;Button&lt;/button&gt;;\n&lt;/div&gt;\n\n@Component(selector: '[foo]', publishAs: ctrl)\nclass FooController {\n  say(String something) =&gt; print(something);\n}\n</code></pre>\n<p>When button is clicked, \"Hello\" will be printed in the console.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"angular-core.EventHandler.EventHandler-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"_rootNode":{"name":"_rootNode","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Node","inner":[]}],"value":null,"annotations":[]},"_expando":{"name":"_expando","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Expando","inner":[]}],"value":null,"annotations":[]},"_exceptionHandler":{"name":"_exceptionHandler","optional":false,"named":false,"default":false,"type":[{"outer":"angular-core.ExceptionHandler","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{"attrNameToEventName":{"name":"attrNameToEventName","qualifiedName":"angular-core.EventHandler.attrNameToEventName","comment":"<p>Converts attribute into event name. Attribute 'on-some-custom-event'\ncorresponds to event named 'someCustomEvent'.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"attrName":{"name":"attrName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"eventNameToAttrName":{"name":"eventNameToAttrName","qualifiedName":"angular-core.EventHandler.eventNameToAttrName","comment":"<p>Converts event name into attribute. Event named 'someCustomEvent' needs to\nbe transformed into on-some-custom-event.</p>","commentFrom":"","inheritedFrom":"","static":true,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"eventName":{"name":"eventName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"register":{"name":"register","qualifiedName":"angular-core.EventHandler.register","comment":"<p>Register an event. This makes sure that  an event (of the specified name)\nwhich bubbles to this node, gets processed by this <a>angular-core.EventHandler</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"eventName":{"name":"eventName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"angular-core.EventHandler.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>angular-core.EventHandler.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"angular-core.EventHandler.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"angular-core.EventHandler.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>angular-core.EventHandler.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>angular-core.EventHandler.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"angular-core.EventHandler.noSuchMethod","comment":"<p><a>angular-core.EventHandler.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>angular-core.EventHandler.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>angular-core.EventHandler.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>angular-core.EventHandler.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"angular-core.EventHandler.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[{"name":"angular-core-annotation_src.Injectable","parameters":[]}],"generics":{}}