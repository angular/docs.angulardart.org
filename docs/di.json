{"name":"di","qualifiedName":"di","comment":"","variables":{},"functions":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{}},"classes":{"class":[{"name":"Key","qualifiedName":"di.Key"},{"name":"Module","qualifiedName":"di.Module","preview":"<p>Module contributes configuration information to an <a>di.Injector</a> by providing a collection of type\nbindings that specify how each type is created.</p>"},{"name":"Injector","qualifiedName":"di.Injector"}],"typedef":{"FactoryFn":{"name":"FactoryFn","qualifiedName":"di.FactoryFn","comment":"","return":"dynamic","parameters":{"injector":{"name":"injector","optional":false,"named":false,"default":false,"type":[{"outer":"di.Injector","inner":[]}],"value":null,"annotations":[]}},"annotations":[],"generics":{}},"TypeFactory":{"name":"TypeFactory","qualifiedName":"di.TypeFactory","comment":"","return":"dart-core.Object","parameters":{"factory":{"name":"factory","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[]}},"annotations":[],"generics":{}},"Visibility":{"name":"Visibility","qualifiedName":"di.Visibility","comment":"<p>Visibility determines if the instance in the defining module is visible to\nthe requesting injector. If true is returned, then the instance from the\ndefining injector is provided. If false is returned, the injector keeps\nwalking up the tree to find another visible instance.</p>","return":"dart-core.bool","parameters":{"defining":{"name":"defining","optional":false,"named":false,"default":false,"type":[{"outer":"di.Injector","inner":[]}],"value":null,"annotations":[]},"requesting":{"name":"requesting","optional":false,"named":false,"default":false,"type":[{"outer":"di.Injector","inner":[]}],"value":null,"annotations":[]}},"annotations":[],"generics":{},"preview":"<p>Visibility determines if the instance in the defining module is visible to\nthe requesting injector. If true is returned, then the instance from the\ndefining injector is provided. If false is returned, the injector keeps\nwalking up the tree to find another visible instance.</p>"}},"error":[{"name":"CircularDependencyError","qualifiedName":"di.CircularDependencyError"},{"name":"NoProviderError","qualifiedName":"di.NoProviderError"},{"name":"InvalidBindingError","qualifiedName":"di.InvalidBindingError"}]},"packageName":"","packageIntro":null}