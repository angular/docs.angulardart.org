{"name":"InputNumberLike","qualifiedName":"angular-directive.InputNumberLike","comment":"<p>Usage:</p>\n<pre><code>&lt;input type=\"number|range\" ng-model=\"myModel\"&gt;\n</code></pre>\n<p>Model:</p>\n<pre><code>num myModel;\n</code></pre>\n<p>This creates a two-way binding between the input and the named model property\n(e.g., myModel in the example above). When processing the input, its value is\nread as a <code>num</code>, via the <a>dart-dom-html.InputElement.valueAsNumber</a> field. If the\ninput text does not represent a number, then the model is appropriately set\nto <a>dart-core.double.NAN</a>. Setting the model property to null will clear the input.\nSetting the model to <a>dart-core.double.NAN</a> will have no effect (input will be left\nunchanged).</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"inputElement":{"name":"inputElement","qualifiedName":"angular-directive.InputNumberLike.inputElement","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-dom-html.InputElement","inner":[]}],"annotations":[]},"ngModel":{"name":"ngModel","qualifiedName":"angular-directive.InputNumberLike.ngModel","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"angular-directive.NgModel","inner":[]}],"annotations":[]},"scope":{"name":"scope","qualifiedName":"angular-directive.InputNumberLike.scope","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"angular-core_internal.Scope","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{"typedValue=":{"name":"typedValue=","qualifiedName":"angular-directive.InputNumberLike.typedValue=","comment":"","commentFrom":"angular-directive.InputNumberLike.typedValue=","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"getters":{"typedValue":{"name":"typedValue","qualifiedName":"angular-directive.InputNumberLike.typedValue","comment":"","commentFrom":"angular-directive.InputNumberLike.typedValue","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.num","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"angular-directive.InputNumberLike.InputNumberLike-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"inputElement":{"name":"inputElement","optional":false,"named":false,"default":false,"type":[{"outer":"dart-dom-html.Element","inner":[]}],"value":"null","annotations":[]},"ngModel":{"name":"ngModel","optional":false,"named":false,"default":false,"type":[{"outer":"angular-directive.NgModel","inner":[]}],"value":"null","annotations":[]},"scope":{"name":"scope","optional":false,"named":false,"default":false,"type":[{"outer":"angular-core_internal.Scope","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"operators":{},"methods":{"processValue":{"name":"processValue","qualifiedName":"angular-directive.InputNumberLike.processValue","comment":"","commentFrom":"angular-directive.InputNumberLike.processValue","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"angular-directive.InputNumberLike.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>angular-directive.InputNumberLike.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"angular-directive.InputNumberLike.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"angular-directive.InputNumberLike.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>angular-directive.InputNumberLike.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>angular-directive.InputNumberLike.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"angular-directive.InputNumberLike.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"angular-directive.InputNumberLike.noSuchMethod","comment":"<p><a>angular-directive.InputNumberLike.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>angular-directive.InputNumberLike.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>angular-directive.InputNumberLike.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>angular-directive.InputNumberLike.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[{"name":"angular-core-annotation_src.NgDirective","parameters":[]},{"name":"angular-core-annotation_src.NgDirective","parameters":[]}],"generics":{}}