{"name":"MockProgressEvent","qualifiedName":"angular-mock.MockProgressEvent","comment":"","isAbstract":false,"superclass":"dart-core.Object","implements":["angular-mock.ProgressEvent"],"subclass":[],"variables":{"bubbles":{"name":"bubbles","qualifiedName":"angular-mock.MockProgressEvent.bubbles","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"cancelable":{"name":"cancelable","qualifiedName":"angular-mock.MockProgressEvent.cancelable","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"clipboardData":{"name":"clipboardData","qualifiedName":"angular-mock.MockProgressEvent.clipboardData","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-dom-html.DataTransfer","inner":[]}],"annotations":[]},"currentTarget":{"name":"currentTarget","qualifiedName":"angular-mock.MockProgressEvent.currentTarget","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"angular-mock.EventTarget","inner":[]}],"annotations":[]},"matchingTarget":{"name":"matchingTarget","qualifiedName":"angular-mock.MockProgressEvent.matchingTarget","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-dom-html.Element","inner":[]}],"annotations":[]},"defaultPrevented":{"name":"defaultPrevented","qualifiedName":"angular-mock.MockProgressEvent.defaultPrevented","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"eventPhase":{"name":"eventPhase","qualifiedName":"angular-mock.MockProgressEvent.eventPhase","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"lengthComputable":{"name":"lengthComputable","qualifiedName":"angular-mock.MockProgressEvent.lengthComputable","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"loaded":{"name":"loaded","qualifiedName":"angular-mock.MockProgressEvent.loaded","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"path":{"name":"path","qualifiedName":"angular-mock.MockProgressEvent.path","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"angular-mock.Node","inner":[]}]}],"annotations":[]},"position":{"name":"position","qualifiedName":"angular-mock.MockProgressEvent.position","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"angular-mock.MockProgressEvent.runtimeType","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.Type","inner":[]}],"annotations":[]},"target":{"name":"target","qualifiedName":"angular-mock.MockProgressEvent.target","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"angular-mock.EventTarget","inner":[]}],"annotations":[]},"timeStamp":{"name":"timeStamp","qualifiedName":"angular-mock.MockProgressEvent.timeStamp","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"total":{"name":"total","qualifiedName":"angular-mock.MockProgressEvent.total","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"totalSize":{"name":"totalSize","qualifiedName":"angular-mock.MockProgressEvent.totalSize","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"type":{"name":"type","qualifiedName":"angular-mock.MockProgressEvent.type","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"cancelBubble":{"name":"cancelBubble","qualifiedName":"angular-mock.MockProgressEvent.cancelBubble","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]}},"inheritedVariables":{"bubbles":{"name":"bubbles","qualifiedName":"angular-mock.Event.bubbles","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Event.bubbles"]}]},"cancelable":{"name":"cancelable","qualifiedName":"angular-mock.Event.cancelable","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Event.cancelable"]}]},"clipboardData":{"name":"clipboardData","qualifiedName":"angular-mock.Event.clipboardData","comment":"<p>Access to the system's clipboard data during copy, cut, and paste events.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://www.w3.org/TR/clipboard-apis/#attributes\">clipboardData specification</a> from W3C.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-dom-html.DataTransfer","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Event.clipboardData"]},{"name":"metadata.SupportedBrowser","parameters":["Chrome"]},{"name":"metadata.SupportedBrowser","parameters":["Safari"]},{"name":"metadata.Experimental","parameters":[]},{"name":"metadata.Experimental","parameters":[]}]},"defaultPrevented":{"name":"defaultPrevented","qualifiedName":"angular-mock.Event.defaultPrevented","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Event.defaultPrevented"]}]},"eventPhase":{"name":"eventPhase","qualifiedName":"angular-mock.Event.eventPhase","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Event.eventPhase"]}]},"path":{"name":"path","qualifiedName":"angular-mock.Event.path","comment":"<p>This event's path, taking into account shadow DOM.</p>\n<h2>Other resources</h2><ul><li>\n<p><a href=\"http://w3c.github.io/webcomponents/spec/shadow/#extensions-to-event\">Shadow DOM extensions to Event</a> from\nW3C.</p></li></ul>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"angular-mock.Node","inner":[]}]}],"annotations":[{"name":"metadata.DomName","parameters":["Event.path"]},{"name":"metadata.Experimental","parameters":[]}]},"timeStamp":{"name":"timeStamp","qualifiedName":"angular-mock.Event.timeStamp","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Event.timeStamp"]}]},"type":{"name":"type","qualifiedName":"angular-mock.Event.type","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Event.type"]}]},"lengthComputable":{"name":"lengthComputable","qualifiedName":"angular-mock.ProgressEvent.lengthComputable","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["ProgressEvent.lengthComputable"]}]},"loaded":{"name":"loaded","qualifiedName":"angular-mock.ProgressEvent.loaded","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["ProgressEvent.loaded"]}]},"total":{"name":"total","qualifiedName":"angular-mock.ProgressEvent.total","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["ProgressEvent.total"]}]}},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"angular-mock.MockProgressEvent.MockProgressEvent-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"currentTarget":{"name":"currentTarget","optional":false,"named":false,"default":false,"type":[{"outer":"angular-mock.MockHttpRequest","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"operators":{},"methods":{"preventDefault":{"name":"preventDefault","qualifiedName":"angular-mock.MockProgressEvent.preventDefault","comment":"","commentFrom":"angular-mock.Event.preventDefault","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"stopImmediatePropagation":{"name":"stopImmediatePropagation","qualifiedName":"angular-mock.MockProgressEvent.stopImmediatePropagation","comment":"","commentFrom":"angular-mock.Event.stopImmediatePropagation","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"stopPropagation":{"name":"stopPropagation","qualifiedName":"angular-mock.MockProgressEvent.stopPropagation","comment":"","commentFrom":"angular-mock.Event.stopPropagation","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"angular-mock.MockProgressEvent.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>angular-mock.MockProgressEvent.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"dart-core.Object.hashCode","inheritedFrom":"angular-mock.Interceptor.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"angular-mock.MockProgressEvent.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"dart-core.Object.runtimeType","inheritedFrom":"angular-mock.Interceptor.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"matchingTarget":{"name":"matchingTarget","qualifiedName":"angular-mock.MockProgressEvent.matchingTarget","comment":"<p>A pointer to the element whose CSS selector matched within which an event\nwas fired. If this Event was not associated with any Event delegation,\naccessing this value will throw an <a>dart-core.UnsupportedError</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Event.matchingTarget","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-dom-html.Element","inner":[]}],"parameters":{},"annotations":[]},"currentTarget":{"name":"currentTarget","qualifiedName":"angular-mock.MockProgressEvent.currentTarget","comment":"","commentFrom":"","inheritedFrom":"angular-mock.Event.currentTarget","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular-mock.EventTarget","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Event.currentTarget"]}]},"target":{"name":"target","qualifiedName":"angular-mock.MockProgressEvent.target","comment":"","commentFrom":"","inheritedFrom":"angular-mock.Event.target","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular-mock.EventTarget","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Event.target"]}]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"angular-mock.MockProgressEvent.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>angular-mock.MockProgressEvent.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>angular-mock.MockProgressEvent.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"dart-core.Object.==","inheritedFrom":"angular-mock.Interceptor.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"angular-mock.MockProgressEvent.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"angular-mock.Interceptor.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"angular-mock.MockProgressEvent.noSuchMethod","comment":"<p><a>angular-mock.MockProgressEvent.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>angular-mock.MockProgressEvent.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>angular-mock.MockProgressEvent.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>angular-mock.MockProgressEvent.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"dart-core.Object.noSuchMethod","inheritedFrom":"angular-mock.Interceptor.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"preventDefault":{"name":"preventDefault","qualifiedName":"angular-mock.MockProgressEvent.preventDefault","comment":"","commentFrom":"","inheritedFrom":"angular-mock.Event.preventDefault","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Event.preventDefault"]}]},"stopImmediatePropagation":{"name":"stopImmediatePropagation","qualifiedName":"angular-mock.MockProgressEvent.stopImmediatePropagation","comment":"","commentFrom":"","inheritedFrom":"angular-mock.Event.stopImmediatePropagation","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Event.stopImmediatePropagation"]}]},"stopPropagation":{"name":"stopPropagation","qualifiedName":"angular-mock.MockProgressEvent.stopPropagation","comment":"","commentFrom":"","inheritedFrom":"angular-mock.Event.stopPropagation","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Event.stopPropagation"]}]}}},"annotations":[],"generics":{}}