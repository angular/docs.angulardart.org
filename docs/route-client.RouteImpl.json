{"name":"RouteImpl","qualifiedName":"route-client.RouteImpl","comment":"<p>Route is a node in the tree of routes. The edge leading to the route is\ndefined by path.</p>","isAbstract":false,"superclass":"route-client.Route","implements":[],"subclass":[],"variables":{"dontLeaveOnParamChanges":{"name":"dontLeaveOnParamChanges","qualifiedName":"route-client.RouteImpl.dontLeaveOnParamChanges","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[{"name":"dart-core._Override","parameters":[]}]},"name":{"name":"name","qualifiedName":"route-client.RouteImpl.name","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[{"name":"dart-core._Override","parameters":[]}]},"parent":{"name":"parent","qualifiedName":"route-client.RouteImpl.parent","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"route-client.RouteImpl","inner":[]}],"annotations":[{"name":"dart-core._Override","parameters":[]}]},"path":{"name":"path","qualifiedName":"route-client.RouteImpl.path","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"route-client.UrlMatcher","inner":[]}],"annotations":[{"name":"dart-core._Override","parameters":[]}]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"isActive":{"name":"isActive","qualifiedName":"route-client.RouteImpl.isActive","comment":"<p>Indicates whether this route is currently active. Root route is always\nactive.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[{"name":"dart-core._Override","parameters":[]}]},"onEnter":{"name":"onEnter","qualifiedName":"route-client.RouteImpl.onEnter","comment":"<p>Returns a stream of <a>route-client.RouteEnterEvent</a> events. The <a>route-client.RouteEnterEvent</a> event\nis fired when route has already been made active, but before subroutes\nare entered.  The event starts at the root and propagates from parent\nto child routes.</p>","commentFrom":"route-client.Route.onEnter","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"route-client.RouteEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"dart-core._Override","parameters":[]}]},"onLeave":{"name":"onLeave","qualifiedName":"route-client.RouteImpl.onLeave","comment":"<p>Returns a stream of <a>route-client.RouteLeaveEvent</a> events. The <a>route-client.RouteLeaveEvent</a>\nevent is fired when the route is being left. The event starts at the leaf\nroute and propagates from child to parent routes.</p>\n<p>At this stage it's possible to veto leaving of the route by calling\n<a>route-client.RouteLeaveEvent.allowLeave</a> with a <a>dart-async.Future</a> returns a boolean value\nindicating whether leave is permitted (true) or not (false).</p>\n<p>Note: that once child routes have been notified of the leave they will not\nbe notified of the subsequent veto by any parent route. See:\nhttps://github.com/angular/route.dart/issues/28</p>","commentFrom":"route-client.Route.onLeave","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"route-client.RouteEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"dart-core._Override","parameters":[]}]},"onPreEnter":{"name":"onPreEnter","qualifiedName":"route-client.RouteImpl.onPreEnter","comment":"<p>Returns a stream of <a>route-client.RoutePreEnterEvent</a> events. The <a>route-client.RoutePreEnterEvent</a>\nevent is fired when the route is matched during the routing, but before\nany previous routes were left, or any new routes were entered. The event\nstarts at the root and propagates from parent to child routes.</p>\n<p>At this stage it's possible to veto entering of the route by calling\n<a>route-client.RoutePreEnterEvent.allowEnter</a> with a <a>dart-async.Future</a> returns a boolean value\nindicating whether enter is permitted (true) or not (false).</p>","commentFrom":"route-client.Route.onPreEnter","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"route-client.RouteEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"dart-core._Override","parameters":[]}]},"onRoute":{"name":"onRoute","qualifiedName":"route-client.RouteImpl.onRoute","comment":"<p>Returns a stream of <a>route-client.RouteEnterEvent</a> events. The <a>route-client.RouteEnterEvent</a> event\nis fired when route has already been made active, but before subroutes\nare entered. The event starts at the root and propagates from parent to\nchild routes.</p>","commentFrom":"route-client.Route.onRoute","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"route-client.RouteEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"dart-core._Override","parameters":[]},{"name":"dart-core.Deprecated","parameters":["use [onEnter] instead."]}]},"parameters":{"name":"parameters","qualifiedName":"route-client.RouteImpl.parameters","comment":"<p>Returns parameters for the currently active route. If the route is not\nactive the getter returns null.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Map","inner":[]}],"parameters":{},"annotations":[{"name":"dart-core._Override","parameters":[]}]}},"constructors":{},"operators":{},"methods":{"addRoute":{"name":"addRoute","qualifiedName":"route-client.RouteImpl.addRoute","comment":"","commentFrom":"route-client.Route.addRoute","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"defaultRoute":{"name":"defaultRoute","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]},"dontLeaveOnParamChanges":{"name":"dontLeaveOnParamChanges","optional":true,"named":true,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"false","annotations":[]},"enter":{"name":"enter","optional":true,"named":true,"default":false,"type":[{"outer":"route-client.RouteEnterEventHandler","inner":[]}],"value":null,"annotations":[]},"leave":{"name":"leave","optional":true,"named":true,"default":false,"type":[{"outer":"route-client.RouteLeaveEventHandler","inner":[]}],"value":null,"annotations":[]},"mount":{"name":"mount","optional":true,"named":true,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"name":{"name":"name","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"path":{"name":"path","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Pattern","inner":[]}],"value":null,"annotations":[]},"preEnter":{"name":"preEnter","optional":true,"named":true,"default":false,"type":[{"outer":"route-client.RoutePreEnterEventHandler","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"dart-core._Override","parameters":[]}]},"findRoute":{"name":"findRoute","qualifiedName":"route-client.RouteImpl.findRoute","comment":"<p>Queries sub-routes using the <a>route-client.RouteImpl.findRoute.routePath</a> and returns the matching <a>route-client.Route</a>.</p>\n<p><a>route-client.RouteImpl.findRoute.routePath</a> is a dot-separated list of route names. Ex: foo.bar.baz, which\nmeans that current route should contain route named 'foo', the 'foo' route\nshould contain route named 'bar', and so on.</p>\n<p>If no match is found then <code>null</code> is returned.</p>","commentFrom":"route-client.Route.findRoute","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"route-client.Route","inner":[]}],"parameters":{"routePath":{"name":"routePath","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"dart-core._Override","parameters":[]}]},"getRoute":{"name":"getRoute","qualifiedName":"route-client.RouteImpl.getRoute","comment":"<p>Queries sub-routes using the <a>route-client.RouteImpl.getRoute.routePath</a> and returns the matching <a>route-client.Route</a>.</p>\n<p><a>route-client.RouteImpl.getRoute.routePath</a> is a dot-separated list of route names. Ex: foo.bar.baz, which\nmeans that current route should contain route named 'foo', the 'foo' route\nshould contain route named 'bar', and so on.</p>\n<p>If no match is found then <code>null</code> is returned.</p>","commentFrom":"route-client.Route.getRoute","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"route-client.Route","inner":[]}],"parameters":{"routePath":{"name":"routePath","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"dart-core._Override","parameters":[]}]},"newHandle":{"name":"newHandle","qualifiedName":"route-client.RouteImpl.newHandle","comment":"<p>Create an return a new <a>route-client.RouteHandle</a> for this route.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"route-client.RouteHandle","inner":[]}],"parameters":{},"annotations":[{"name":"dart-core._Override","parameters":[]}]}}},"inheritedMethods":{"setters":{},"getters":{"dontLeaveOnParamChanges":{"name":"dontLeaveOnParamChanges","qualifiedName":"route-client.RouteImpl.dontLeaveOnParamChanges","comment":"<p>Whether to trigger the leave event when only the parameters change.</p>","commentFrom":"","inheritedFrom":"route-client.Route.dontLeaveOnParamChanges","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"hashCode":{"name":"hashCode","qualifiedName":"route-client.RouteImpl.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>route-client.RouteImpl.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"isActive":{"name":"isActive","qualifiedName":"route-client.RouteImpl.isActive","comment":"<p>Indicates whether this route is currently active. Root route is always\nactive.</p>","commentFrom":"","inheritedFrom":"route-client.Route.isActive","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"name":{"name":"name","qualifiedName":"route-client.RouteImpl.name","comment":"<p>Name of the route. Used when querying routes.</p>","commentFrom":"","inheritedFrom":"route-client.Route.name","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"onEnter":{"name":"onEnter","qualifiedName":"route-client.RouteImpl.onEnter","comment":"<p>Returns a stream of <a>route-client.RouteEnterEvent</a> events. The <a>route-client.RouteEnterEvent</a> event\nis fired when route has already been made active, but before subroutes\nare entered.  The event starts at the root and propagates from parent\nto child routes.</p>","commentFrom":"","inheritedFrom":"route-client.Route.onEnter","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"route-client.RouteEnterEvent","inner":[]}]}],"parameters":{},"annotations":[]},"onLeave":{"name":"onLeave","qualifiedName":"route-client.RouteImpl.onLeave","comment":"<p>Returns a stream of <a>route-client.RouteLeaveEvent</a> events. The <a>route-client.RouteLeaveEvent</a>\nevent is fired when the route is being left. The event starts at the leaf\nroute and propagates from child to parent routes.</p>\n<p>At this stage it's possible to veto leaving of the route by calling\n<a>route-client.RouteLeaveEvent.allowLeave</a> with a <a>dart-async.Future</a> returns a boolean value\nindicating whether leave is permitted (true) or not (false).</p>\n<p>Note: that once child routes have been notified of the leave they will not\nbe notified of the subsequent veto by any parent route. See:\nhttps://github.com/angular/route.dart/issues/28</p>","commentFrom":"","inheritedFrom":"route-client.Route.onLeave","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"route-client.RouteLeaveEvent","inner":[]}]}],"parameters":{},"annotations":[]},"onPreEnter":{"name":"onPreEnter","qualifiedName":"route-client.RouteImpl.onPreEnter","comment":"<p>Returns a stream of <a>route-client.RoutePreEnterEvent</a> events. The <a>route-client.RoutePreEnterEvent</a>\nevent is fired when the route is matched during the routing, but before\nany previous routes were left, or any new routes were entered. The event\nstarts at the root and propagates from parent to child routes.</p>\n<p>At this stage it's possible to veto entering of the route by calling\n<a>route-client.RoutePreEnterEvent.allowEnter</a> with a <a>dart-async.Future</a> returns a boolean value\nindicating whether enter is permitted (true) or not (false).</p>","commentFrom":"","inheritedFrom":"route-client.Route.onPreEnter","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"route-client.RoutePreEnterEvent","inner":[]}]}],"parameters":{},"annotations":[]},"onRoute":{"name":"onRoute","qualifiedName":"route-client.RouteImpl.onRoute","comment":"<p>Returns a stream of <a>route-client.RouteEnterEvent</a> events. The <a>route-client.RouteEnterEvent</a> event\nis fired when route has already been made active, but before subroutes\nare entered. The event starts at the root and propagates from parent to\nchild routes.</p>","commentFrom":"","inheritedFrom":"route-client.Route.onRoute","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"route-client.RouteEnterEvent","inner":[]}]}],"parameters":{},"annotations":[{"name":"dart-core.Deprecated","parameters":["use [onEnter] instead."]}]},"parameters":{"name":"parameters","qualifiedName":"route-client.RouteImpl.parameters","comment":"<p>Returns parameters for the currently active route. If the route is not\nactive the getter returns null.</p>","commentFrom":"","inheritedFrom":"route-client.Route.parameters","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.Map","inner":[]}],"parameters":{},"annotations":[]},"parent":{"name":"parent","qualifiedName":"route-client.RouteImpl.parent","comment":"<p>Parent route in the route tree.</p>","commentFrom":"","inheritedFrom":"route-client.Route.parent","static":false,"abstract":true,"constant":false,"return":[{"outer":"route-client.Route","inner":[]}],"parameters":{},"annotations":[]},"path":{"name":"path","qualifiedName":"route-client.RouteImpl.path","comment":"<p>A path fragment <a>route-client.UrlMatcher</a> for this route.</p>","commentFrom":"","inheritedFrom":"route-client.Route.path","static":false,"abstract":true,"constant":false,"return":[{"outer":"route-client.UrlMatcher","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"route-client.RouteImpl.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"route-client.RouteImpl.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>route-client.RouteImpl.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>route-client.RouteImpl.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"addRoute":{"name":"addRoute","qualifiedName":"route-client.RouteImpl.addRoute","comment":"","commentFrom":"","inheritedFrom":"route-client.Route.addRoute","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"defaultRoute":{"name":"defaultRoute","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]},"dontLeaveOnParamChanges":{"name":"dontLeaveOnParamChanges","optional":true,"named":true,"default":true,"type":[{"outer":"dynamic","inner":[]}],"value":"false","annotations":[]},"enter":{"name":"enter","optional":true,"named":true,"default":false,"type":[{"outer":"route-client.RouteEnterEventHandler","inner":[]}],"value":null,"annotations":[]},"leave":{"name":"leave","optional":true,"named":true,"default":false,"type":[{"outer":"route-client.RouteLeaveEventHandler","inner":[]}],"value":null,"annotations":[]},"mount":{"name":"mount","optional":true,"named":true,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"name":{"name":"name","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"path":{"name":"path","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Pattern","inner":[]}],"value":null,"annotations":[]},"preEnter":{"name":"preEnter","optional":true,"named":true,"default":false,"type":[{"outer":"route-client.RoutePreEnterEventHandler","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"findRoute":{"name":"findRoute","qualifiedName":"route-client.RouteImpl.findRoute","comment":"<p>Queries sub-routes using the <a>route-client.RouteImpl.findRoute.routePath</a> and returns the matching <a>route-client.Route</a>.</p>\n<p><a>route-client.RouteImpl.findRoute.routePath</a> is a dot-separated list of route names. Ex: foo.bar.baz, which\nmeans that current route should contain route named 'foo', the 'foo' route\nshould contain route named 'bar', and so on.</p>\n<p>If no match is found then <code>null</code> is returned.</p>","commentFrom":"","inheritedFrom":"route-client.Route.findRoute","static":false,"abstract":true,"constant":false,"return":[{"outer":"route-client.Route","inner":[]}],"parameters":{"routePath":{"name":"routePath","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"getRoute":{"name":"getRoute","qualifiedName":"route-client.RouteImpl.getRoute","comment":"<p>Queries sub-routes using the <a>route-client.RouteImpl.getRoute.routePath</a> and returns the matching <a>route-client.Route</a>.</p>\n<p><a>route-client.RouteImpl.getRoute.routePath</a> is a dot-separated list of route names. Ex: foo.bar.baz, which\nmeans that current route should contain route named 'foo', the 'foo' route\nshould contain route named 'bar', and so on.</p>\n<p>If no match is found then <code>null</code> is returned.</p>","commentFrom":"","inheritedFrom":"route-client.Route.getRoute","static":false,"abstract":true,"constant":false,"return":[{"outer":"route-client.Route","inner":[]}],"parameters":{"routePath":{"name":"routePath","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[{"name":"dart-core.Deprecated","parameters":["use [findRoute] instead."]}]},"newHandle":{"name":"newHandle","qualifiedName":"route-client.RouteImpl.newHandle","comment":"<p>Create an return a new <a>route-client.RouteHandle</a> for this route.</p>","commentFrom":"","inheritedFrom":"route-client.Route.newHandle","static":false,"abstract":true,"constant":false,"return":[{"outer":"route-client.RouteHandle","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"route-client.RouteImpl.noSuchMethod","comment":"<p><a>route-client.RouteImpl.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>route-client.RouteImpl.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>route-client.RouteImpl.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>route-client.RouteImpl.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"route-client.RouteImpl.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"route-client.Route.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}