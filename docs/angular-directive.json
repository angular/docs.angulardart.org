{"name":"angular-directive","qualifiedName":"angular-directive","comment":"","variables":{},"functions":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{}},"classes":{"class":[{"name":"NgModelMaxLengthValidator","qualifiedName":"angular-directive.NgModelMaxLengthValidator","preview":"<p>Validates the model to see if the length of its contents are less than or\nequal to the maximum length set in place by the HTML maxlength or\nng-maxlength attributes present on the input element.</p>"},{"name":"NgModelMinLengthValidator","qualifiedName":"angular-directive.NgModelMinLengthValidator","preview":"<p>Validates the model to see if the length of its contents are greater than or\nequal to the minimum length set in place by the HTML minlength or\nng-minlength attributes present on the input element.</p>"},{"name":"NgModelPatternValidator","qualifiedName":"angular-directive.NgModelPatternValidator","preview":"<p>Validates the model to see if its contents match the given pattern present on either the\nHTML pattern or ng-pattern attributes present on the input element.</p>"},{"name":"NgModelMinNumberValidator","qualifiedName":"angular-directive.NgModelMinNumberValidator","preview":"<p>Validates the model to see if the numeric value is greater than or equal to the min value.</p>"},{"name":"NgModelMaxNumberValidator","qualifiedName":"angular-directive.NgModelMaxNumberValidator","preview":"<p>Validates the model to see if the numeric value than or equal to the max value.</p>"},{"name":"NgModelNumberValidator","qualifiedName":"angular-directive.NgModelNumberValidator","preview":"<p>Validates the model to see if its contents match a valid number.</p>"},{"name":"NgModelEmailValidator","qualifiedName":"angular-directive.NgModelEmailValidator","preview":"<p>Validates the model to see if its contents match a valid email pattern.</p>"},{"name":"NgModelUrlValidator","qualifiedName":"angular-directive.NgModelUrlValidator","preview":"<p>Validates the model to see if its contents match a valid URL pattern.</p>"},{"name":"NgModelRequiredValidator","qualifiedName":"angular-directive.NgModelRequiredValidator","preview":"<p>Validates the model depending if required or ng-required is present on the element.</p>"},{"name":"NgValidatable","qualifiedName":"angular-directive.NgValidatable"},{"name":"NgNullForm","qualifiedName":"angular-directive.NgNullForm"},{"name":"NgForm","qualifiedName":"angular-directive.NgForm","preview":"<p>The form directive listens on submission requests and, depending,\non if an action is set, the form will automatically either allow\nor prevent the default browser submission from occurring.</p>"},{"name":"OptionValueDirective","qualifiedName":"angular-directive.OptionValueDirective","preview":"<p>Since the value attribute of the OPTION can only be a string, Angular\nprovides ng-value which allows binding to any expression.</p>"},{"name":"InputSelectDirective","qualifiedName":"angular-directive.InputSelectDirective","preview":"<p>HTML SELECT element with angular data-binding if used with\nNgModelDirective.</p>"},{"name":"NgNonBindableDirective","qualifiedName":"angular-directive.NgNonBindableDirective","preview":"<p>Causes the compiler to ignore all Angular directives and markup on descendant\nnodes of the matching element.  Note, however, that other directives and\nmarkup on the element are still processed and that only descending the DOM\nfor compilation is prevented.</p>"},{"name":"NgSwitchDefaultDirective","qualifiedName":"angular-directive.NgSwitchDefaultDirective"},{"name":"NgSwitchWhenDirective","qualifiedName":"angular-directive.NgSwitchWhenDirective"},{"name":"NgSwitchDirective","qualifiedName":"angular-directive.NgSwitchDirective","preview":"<p>The ngSwitch directive is used to conditionally swap DOM structure on your\ntemplate based on a scope expression. Elements within ngSwitch but without\nngSwitchWhen or ngSwitchDefault directives will be preserved at the location\nas specified in the template.</p>"},{"name":"NgStyleDirective","qualifiedName":"angular-directive.NgStyleDirective","preview":"<p>The <code>ngStyle</code> directive allows you to set CSS style on an HTML element\nconditionally.</p>"},{"name":"NgAttributeDirective","qualifiedName":"angular-directive.NgAttributeDirective","preview":"<p>In SVG some attributes have a specific syntax. Placing <code>{{interpolation}}</code> in\nthose attributes will break the attribute syntax, and browser will clear the\nattribute.</p>"},{"name":"NgSourceDirective","qualifiedName":"angular-directive.NgSourceDirective","preview":"<p>In browser some attributes have network side-effect. If the attribute\nhas <code>{{interpolation}}</code> in it it may cause browser to fetch bogus URLs.</p>"},{"name":"NgBooleanAttributeDirective","qualifiedName":"angular-directive.NgBooleanAttributeDirective","preview":"<p>Allows adding and removing the boolean attributes from the element.</p>"},{"name":"NgShowDirective","qualifiedName":"angular-directive.NgShowDirective","preview":"<p>The ngShow directive shows or hides the given HTML element based on the\nexpression provided to the ngHide attribute. The element is shown or hidden\nby changing the removing or adding the ng-hide CSS class onto the element.</p>"},{"name":"NgHideDirective","qualifiedName":"angular-directive.NgHideDirective","preview":"<p>The ngHide directive shows or hides the given HTML element based on the\nexpression provided to the ngHide attribute. The element is shown or hidden\nby changing the removing or adding the ng-hide CSS class onto the element.</p>"},{"name":"NgTemplateDirective","qualifiedName":"angular-directive.NgTemplateDirective","preview":"<p>The NgTemplateElementDirective allows one to preload an Angular template\ninto the <a>angular-core-dom.TemplateCache</a>.  It works on <code>&lt;template&gt;</code> and <code>&lt;script&gt;</code> elements\nthat have <code>type=\"text/ng-template</code>.  For such elements, The entire contents\nof the elements are loaded into the <a>angular-core-dom.TemplateCache</a> under the URL specified\nby the <code>id</code> attribute.</p>"},{"name":"NgRepeatDirective","qualifiedName":"angular-directive.NgRepeatDirective","preview":"<p>The <code>ngRepeat</code> directive instantiates a template once per item from a\ncollection. Each template instance gets its own scope, where the given loop\nvariable is set to the current collection item, and <code>$index</code> is set to the\nitem index or key.</p>"},{"name":"NgPluralizeDirective","qualifiedName":"angular-directive.NgPluralizeDirective","preview":"<h2>Overview</h2>\n<p><code>ngPluralize</code> is a directive that displays messages according to locale rules.</p>"},{"name":"ContentEditableDirective","qualifiedName":"angular-directive.ContentEditableDirective","preview":"<p>Usage (span could be replaced with any element which supports text content, such as <code>p</code>):</p>"},{"name":"InputRadioDirective","qualifiedName":"angular-directive.InputRadioDirective","preview":"<p>Usage:</p>"},{"name":"NgFalseValue","qualifiedName":"angular-directive.NgFalseValue","preview":"<p><code>ng-false-value</code> allows you to select any expression to be set to\n<code>ng-model</code> when checkbox is deselected&lt;input type=\"checkbox\">`.</p>"},{"name":"NgTrueValue","qualifiedName":"angular-directive.NgTrueValue","preview":"<p><code>ng-true-value</code> allows you to select any expression to be set to\n<code>ng-model</code> when checkbox is selected on <code>&lt;input type=\"checkbox\"&gt;</code>.</p>"},{"name":"NgValue","qualifiedName":"angular-directive.NgValue","preview":"<p>Use <code>ng-value</code> directive with <code>&lt;input type=\"radio\"&gt;</code> or <code>&lt;option&gt;</code> to\nallow binding to values other then strings. This is needed since the\n<code>value</code> attribute on DOM element <code>&lt;input type=\"radio\" value=\"foo\"&gt;</code> can\nonly be a string. With <code>ng-value</code> one can bind to any object.</p>"},{"name":"InputNumberLikeDirective","qualifiedName":"angular-directive.InputNumberLikeDirective","preview":"<p>Usage:</p>"},{"name":"InputTextLikeDirective","qualifiedName":"angular-directive.InputTextLikeDirective","preview":"<p>Usage:</p>"},{"name":"InputCheckboxDirective","qualifiedName":"angular-directive.InputCheckboxDirective","preview":"<p>Usage:</p>"},{"name":"NgModel","qualifiedName":"angular-directive.NgModel","preview":"<p>Ng-model directive is responsible for reading/writing to the model.\nThe directive itself is headless. (It does not know how to render or what\nevents to listen for.) It is meant to be used with other directives which\nprovide the rendering and listening capabilities. The directive itself\nknows how to convert the view-value into model-value and vice versa by\nallowing others to register converters (To be implemented). It also\nknows how to (in)validate the model and the form in which it is declared\n(to be implemented)</p>"},{"name":"NgNullControl","qualifiedName":"angular-directive.NgNullControl"},{"name":"NgControl","qualifiedName":"angular-directive.NgControl"},{"name":"NgIncludeDirective","qualifiedName":"angular-directive.NgIncludeDirective","preview":"<p>Fetches, compiles and includes an external Angular template/HTML.</p>"},{"name":"NgUnlessDirective","qualifiedName":"angular-directive.NgUnlessDirective","preview":"<p>The <code>ng-unless</code> directive compliments the <code>ng-if</code> (provided by\nNgIfAttrDirective) directive.</p>"},{"name":"NgIfDirective","qualifiedName":"angular-directive.NgIfDirective","preview":"<p>The <code>ng-if</code> directive compliments the <code>ng-unless</code> (provided by\nNgUnlessAttrDirective) directive.</p>"},{"name":"NgCloakDirective","qualifiedName":"angular-directive.NgCloakDirective","preview":"<p>The <code>ngCloak</code> directive is used to prevent the Angular html template from\nbeing briefly displayed by the browser in its raw (uncompiled) form while\nyour application is loading. Use this directive to avoid the undesirable\nflicker effect caused by the html template display.</p>"},{"name":"NgEventDirective","qualifiedName":"angular-directive.NgEventDirective","preview":"<p>Allows you to specify custom behavior for DOM UI events such as mouse,\nkeyboard and touch events.</p>"},{"name":"NgClassEvenDirective","qualifiedName":"angular-directive.NgClassEvenDirective","preview":"<p>The <code>ngClassOdd</code> and <code>ngClassEven</code> directives work exactly as\n{@link ng.directive:ngClass ngClass}, except it works in\nconjunction with <code>ngRepeat</code> and takes affect only on odd (even) rows.</p>"},{"name":"NgClassOddDirective","qualifiedName":"angular-directive.NgClassOddDirective","preview":"<p>The <code>ngClassOdd</code> and <code>ngClassEven</code> directives work exactly as\n{@link ng.directive:ngClass ngClass}, except it works in\nconjunction with <code>ngRepeat</code> and takes affect only on odd (even) rows.</p>"},{"name":"NgClassDirective","qualifiedName":"angular-directive.NgClassDirective","preview":"<p>The <code>ngClass</code> allows you to set CSS classes on HTML an element, dynamically,\nby databinding an expression that represents all classes to be added.</p>"},{"name":"NgBindTemplateDirective","qualifiedName":"angular-directive.NgBindTemplateDirective","preview":"<p>The <a>angular-directive.NgBindTemplateDirective</a> specifies that the element text content should\nbe replaced with the interpolation of the template in the ngBindTemplate\nattribute. Unlike ngBind, the ngBindTemplate can contain multiple {{ }}\nexpressions.</p>"},{"name":"NgBindHtmlDirective","qualifiedName":"angular-directive.NgBindHtmlDirective","preview":"<p>Creates a binding that will innerHTML the result of evaluating the\n<code>expression</code> bound to <code>ng-bind-html</code> into the current element in a secure\nway.  This expression must evaluate to a string.  The innerHTML-ed content\nwill be sanitized using a default NodeValidator constructed as <code>new\ndom.NodeValidatorBuilder.common()</code>.  In a future version, when Strict\nContextual Escaping support has been added to Angular.dart, this directive\nwill allow one to bypass the sanitizaton and innerHTML arbitrary trusted\nHTML.</p>"},{"name":"NgBindDirective","qualifiedName":"angular-directive.NgBindDirective","preview":"<p>The ngBind attribute tells Angular to replace the text content of the\nspecified HTML element with the value of a given expression, and to update\nthe text content when the value of that expression changes.</p>"},{"name":"NgADirective","qualifiedName":"angular-directive.NgADirective","preview":"<p>@ngdoc directive\n@name ng.directive:a\n@restrict E</p>"},{"name":"NgDirectiveModule","qualifiedName":"angular-directive.NgDirectiveModule"}],"typedef":{"ItemEval":{"name":"ItemEval","qualifiedName":"angular-directive.ItemEval","comment":"","return":"dynamic","parameters":{"item":{"name":"item","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"index":{"name":"index","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]}},"annotations":[],"generics":{}}},"error":[]},"packageName":"","packageIntro":""}