{"name":"Scope","qualifiedName":"angular-core.Scope","comment":"<p><a>angular-core.Scope</a> is represents a collection of <a>angular-core.Scope.watch</a>es observeers, and <a>angular-core.Scope.context</a>\nfor the watchers, observers and <a>angular-core.Scope.eval</a>uations. Scopes structure loosely\nmimics the DOM structure. Scopes and Views are bound to each other.\nAs scopes are created and destroyed by ViewFactory they are responsible\nfor change detection, change processing and memory management.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":["angular-core.RootScope"],"variables":{"id":{"name":"id","qualifiedName":"angular-core.Scope.id","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"context":{"name":"context","qualifiedName":"angular-core.Scope.context","comment":"<p>The default execution context for <a>angular-core.Scope.watch</a>es observeers, and <a>angular-core.Scope.eval</a>uation.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"rootScope":{"name":"rootScope","qualifiedName":"angular-core.Scope.rootScope","comment":"<p>The <a>angular-core.RootScope</a> of the application.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"angular-core.RootScope","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"parentScope":{"name":"parentScope","qualifiedName":"angular-core.Scope.parentScope","comment":"<p>The parent <a>angular-core.Scope</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular-core.Scope","inner":[]}],"parameters":{},"annotations":[]},"isDestroyed":{"name":"isDestroyed","qualifiedName":"angular-core.Scope.isDestroyed","comment":"<p>Return <code>true</code> if the scope has been destroyed. Once scope is destroyed\nNo operations are allowed on it.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"isAttached":{"name":"isAttached","qualifiedName":"angular-core.Scope.isAttached","comment":"<p>Returns true if the scope is still attached to the <a>angular-core.RootScope</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"hasOwnStreams":{"name":"hasOwnStreams","qualifiedName":"angular-core.Scope.hasOwnStreams","comment":"<p>Do not use. Exposes internal state for testing.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"angular-core.Scope.Scope-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"context":{"name":"context","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":"null","annotations":[]},"rootScope":{"name":"rootScope","optional":false,"named":false,"default":false,"type":[{"outer":"angular-core.RootScope","inner":[]}],"value":"null","annotations":[]},"_parentScope":{"name":"_parentScope","optional":false,"named":false,"default":false,"type":[{"outer":"angular-core.Scope","inner":[]}],"value":"null","annotations":[]},"_readWriteGroup":{"name":"_readWriteGroup","optional":false,"named":false,"default":false,"type":[{"outer":"angular-watch_group.WatchGroup","inner":[]}],"value":"null","annotations":[]},"_readOnlyGroup":{"name":"_readOnlyGroup","optional":false,"named":false,"default":false,"type":[{"outer":"angular-watch_group.WatchGroup","inner":[]}],"value":"null","annotations":[]},"id":{"name":"id","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"_stats":{"name":"_stats","optional":false,"named":false,"default":false,"type":[{"outer":"angular-core.ScopeStats","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"operators":{},"methods":{"watch":{"name":"watch","qualifiedName":"angular-core.Scope.watch","comment":"<p>Use <a>angular-core.Scope.watch</a> to set up a watch in the <a>angular-core.Scope.apply</a> cycle.</p>\n<p>When <a>angular-core.Scope.watch.canChangeModel</a> is <code>false</code>, the watch will be executed in the\nflush cycle. It should be used when the <a>angular-core.Scope.watch.reactionFn</a> does not change the\nmodel and allows speeding up the digest phase.</p>\n<p>On the opposite, <a>angular-core.Scope.watch.canChangeModel</a> should be set to <code>true</code> if the\n<a>angular-core.Scope.watch.reactionFn</a> could change the model so that the watch is evaluated in the\ndigest cycle.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular-core.Watch","inner":[]}],"parameters":{"expression":{"name":"expression","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"reactionFn":{"name":"reactionFn","optional":false,"named":false,"default":false,"type":[{"outer":"angular-watch_group.ReactionFn","inner":[]}],"value":"null","annotations":[]},"context":{"name":"context","optional":true,"named":true,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"filters":{"name":"filters","optional":true,"named":true,"default":false,"type":[{"outer":"angular-core_internal.FilterMap","inner":[]}],"value":"null","annotations":[]},"canChangeModel":{"name":"canChangeModel","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"true","annotations":[]},"collection":{"name":"collection","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]}},"annotations":[]},"eval":{"name":"eval","qualifiedName":"angular-core.Scope.eval","comment":"","commentFrom":"angular-core.Scope.eval","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"expression":{"name":"expression","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"locals":{"name":"locals","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"applyInZone":{"name":"applyInZone","qualifiedName":"angular-core.Scope.applyInZone","comment":"","commentFrom":"angular-core.Scope.applyInZone","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"expression":{"name":"expression","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"locals":{"name":"locals","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"apply":{"name":"apply","qualifiedName":"angular-core.Scope.apply","comment":"","commentFrom":"angular-core.Scope.apply","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"expression":{"name":"expression","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"locals":{"name":"locals","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"emit":{"name":"emit","qualifiedName":"angular-core.Scope.emit","comment":"","commentFrom":"angular-core.Scope.emit","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular-core.ScopeEvent","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"data":{"name":"data","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"broadcast":{"name":"broadcast","qualifiedName":"angular-core.Scope.broadcast","comment":"","commentFrom":"angular-core.Scope.broadcast","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular-core.ScopeEvent","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"data":{"name":"data","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"on":{"name":"on","qualifiedName":"angular-core.Scope.on","comment":"","commentFrom":"angular-core.Scope.on","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular-core_internal.ScopeStream","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"createChild":{"name":"createChild","qualifiedName":"angular-core.Scope.createChild","comment":"","commentFrom":"angular-core.Scope.createChild","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular-core.Scope","inner":[]}],"parameters":{"childContext":{"name":"childContext","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Object","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"destroy":{"name":"destroy","qualifiedName":"angular-core.Scope.destroy","comment":"","commentFrom":"angular-core.Scope.destroy","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"angular-core.Scope.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>angular-core.Scope.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"angular-core.Scope.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"angular-core.Scope.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>angular-core.Scope.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>angular-core.Scope.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"angular-core.Scope.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"angular-core.Scope.noSuchMethod","comment":"<p><a>angular-core.Scope.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>angular-core.Scope.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>angular-core.Scope.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>angular-core.Scope.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}