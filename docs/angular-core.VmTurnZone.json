{"name":"VmTurnZone","qualifiedName":"angular-core.VmTurnZone","comment":"<p>A Zone wrapper that lets you schedule tasks after its private microtask\nqueue is exhausted but before the next \"turn\", i.e. event loop iteration.\nThis lets you freely schedule microtasks that prepare data, and set an\n<a>angular-core.VmTurnZone.onTurnDone</a> handler that will consume that data after it's ready but before\nthe browser has a chance to re-render.\nThe wrapper maintains an \"inner\" and \"outer\" Zone and a private queue of\nall the microtasks scheduled on the inner Zone.</p>\n<p>In a typical app, ngDynamicApp or ngStaticApp will create a singleton\n<a>angular-core.VmTurnZone</a> whose outer Zone is the root Zone and whose default <a>angular-core.VmTurnZone.onTurnDone</a>\nruns the Angular digest.  A component may want to inject this singleton if it\nneeds to run code <em>outside</em> the Angular digest.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"onError":{"name":"onError","qualifiedName":"angular-core.VmTurnZone.onError","comment":"<p>Called with any errors from the inner zone.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"angular-core_internal.ZoneOnError","inner":[]}],"annotations":[]},"onTurnDone":{"name":"onTurnDone","qualifiedName":"angular-core.VmTurnZone.onTurnDone","comment":"<p>Called at the end of each VM turn in which inner zone code runs.\n\"At the end\" means after the private microtask queue of the inner zone is\nexhausted but before the next VM turn.  Notes</p><ul><li>\n<p>This won't wait for microtasks scheduled in zones other than the inner\n  zone, e.g. those scheduled with <a>angular-core.VmTurnZone.runOutsideAngular</a>.</p></li><li>\n<p><a>angular-core.VmTurnZone.onTurnDone</a> runs repeatedly until no more tasks are scheduled within\n  <a>angular-core.VmTurnZone.onTurnStart</a>, <a>angular-core.VmTurnZone.run</a> or <a>angular-core.VmTurnZone.onTurnDone</a>. You usually don't want it to\n  schedule any.  For example, if its first line of code is <code>new Future.value()</code>,\n  the turn will <em>never</em> end.</p></li></ul>","final":false,"static":false,"constant":false,"type":[{"outer":"angular-core_internal.ZoneOnTurnDone","inner":[]}],"annotations":[]},"onTurnStart":{"name":"onTurnStart","qualifiedName":"angular-core.VmTurnZone.onTurnStart","comment":"<p>Called at the beginning of each VM turn in which inner zone code runs.\n\"At the beginning\" means before any of the microtasks from the private\nmicrotask queue of the inner zone is executed. Notes</p><ul><li>\n<p><a>angular-core.VmTurnZone.onTurnStart</a> runs repeatedly until no more microstasks are scheduled\n  within <a>angular-core.VmTurnZone.onTurnStart</a>, <a>angular-core.VmTurnZone.run</a> or <a>angular-core.VmTurnZone.onTurnDone</a>. You usually don't want it to\n  schedule any.  For example, if its first line of code is <code>new Future.value()</code>,\n  the turn will <em>never</em> end.</p></li></ul>","final":false,"static":false,"constant":false,"type":[{"outer":"angular-core_internal.ZoneOnTurnStart","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"angular-core.VmTurnZone.VmTurnZone-","comment":"<p>Associates with this</p><ul><li>an \"outer\" Zone, which is the one that created this.</li><li>an \"inner\" Zone, which is a child of the outer Zone.</li></ul>\n<p>Defaults <a>angular-core.VmTurnZone.onError</a> to forward errors to the outer Zone.\nDefaults <a>angular-core.VmTurnZone.onTurnStart</a> and <a>angular-core.VmTurnZone.onTurnDone</a> to no-op functions.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]}},"operators":{},"methods":{"assertInTurn":{"name":"assertInTurn","qualifiedName":"angular-core.VmTurnZone.assertInTurn","comment":"<p>Throws an <a>dart-core.AssertionError</a> if no task is currently running in the inner\nzone.  In a typical app where the inner zone is the Angular zone, this can\nbe used to assert that the digest will indeed run at the end of the current\nturn.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"assertInZone":{"name":"assertInZone","qualifiedName":"angular-core.VmTurnZone.assertInZone","comment":"<p>Same as <a>angular-core.VmTurnZone.assertInTurn</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"run":{"name":"run","qualifiedName":"angular-core.VmTurnZone.run","comment":"<p>Runs <a>angular-core.VmTurnZone.run.body</a> in the inner zone and returns whatever it returns.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"body":{"name":"body","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"runOutsideAngular":{"name":"runOutsideAngular","qualifiedName":"angular-core.VmTurnZone.runOutsideAngular","comment":"<p>Runs <a>angular-core.VmTurnZone.runOutsideAngular.body</a> in the outer zone and returns whatever it returns.\nIn a typical app where the inner zone is the Angular zone, this allows\none to escape Angular's auto-digest mechanism.</p>\n<pre><code>myFunction(VmTurnZone zone, Element element) {\n  element.onClick.listen(() {\n    // auto-digest will run after element click.\n  });\n  zone.runOutsideAngular(() {\n    element.onMouseMove.listen(() {\n      // auto-digest will NOT run after mouse move\n    });\n  });\n}\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"body":{"name":"body","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"angular-core.VmTurnZone.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>angular-core.VmTurnZone.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"angular-core.VmTurnZone.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"angular-core.VmTurnZone.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>angular-core.VmTurnZone.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>angular-core.VmTurnZone.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"angular-core.VmTurnZone.noSuchMethod","comment":"<p><a>angular-core.VmTurnZone.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>angular-core.VmTurnZone.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>angular-core.VmTurnZone.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>angular-core.VmTurnZone.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"angular-core.VmTurnZone.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}