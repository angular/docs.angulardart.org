{"name":"angular-app","qualifiedName":"angular-app","comment":"<p>Bootstrapping for Angular applications via <a href=\"#angular-app-dynamic\">app:dynamic</a> for development,\nor <a href=\"#angular-app-static\">app:static</a> for production.</p>\n<p>In your <code>main()</code> function, you bootstrap Angular by explicitly defining and adding a module for\nyour app:</p>\n<pre><code>import 'package:angular/angular.dart';\nimport 'package:angular/angular_dynamic.dart';\n\nclass MyModule extends Module {\n  MyModule() {\n    type(HelloWorldController);\n  }\n}\n\nmain() {\n  dynamicApplication()\n      .addModule(new MyModule())\n      .run();\n}\n</code></pre>\n<p>In the code above, we use <a href=\"#angular-app-dynamic\">dynamicApplication</a> to\ntake advantage of <a href=\"https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/dart-mirrors\">dart:mirrors</a> during\ndevelopment. When you run the app in Dartium, you are using the implementation found under\n<a href=\"#angular-app-dynamic\">app:dynamic</a>. Note also that you must explicitly import both\n<code>angular.dart</code> and <code>angular_dynamic.dart</code> at the start of your file.</p>\n<p>For production, transformers defined in your <code>pubspec.yaml</code> file convert the compiled code to\nuse the <a href=\"#angular-app-static\">app:static</a> implementation when you run <code>pub build</code>. Instead of\nrelying on mirrors, this automatically generates the getters, setters, annotations, and factories\nneeded by Dart for tree shaking in dart2js, ensuring that your final JavaScript code contains\nonly what is used by the root Injector that ngApp creates.</p>\n<p>Add the transformers rule shown below to your <code>pubspec.yaml</code>:</p>\n<pre><code>name: angular_dart_example\nversion: 0.0.1\ndependencies:\n  angular: '&gt;= 0.9.11'\n  browser: any\n  unittest: any\n\ntransformers:\n- angular\n</code></pre>\n<p>If your app structure makes use of directories for storing your templates,\nyou must also specify rules for <code>html_files</code> to ensure that the transformers pick up those\nfiles. You only need to specify the HTML files; the parser will infer the correct <code>.dart</code> and\nCSS files to include.</p>\n<p>For example:</p>\n<pre><code>transformers:\n- angular:\n    html_files:\n    - lib/_somelibrary/_some_component.html\n</code></pre>\n<p>If you need a way to build your app without transformers, you can use\n<a href=\"#angular-app-static@id_staticApplication\">staticApplication</a> directly, instead of\n<a href=\"#angular-app-dynamic@id_dynamicApplication\">dynamicApplication</a>. See the documentation for\nthe <a href=\"#angular-app-static\">app:static</a> library definition for more on this use case.</p>","variables":{},"functions":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{}},"classes":{"class":[{"name":"Application","qualifiedName":"angular-app.Application","preview":"<p>Application is how you configure and run an Angular application. There are two\nimplementations for this abstract class:</p>"},{"name":"AngularModule","qualifiedName":"angular-app.AngularModule","preview":"<p>This is the top level module which describes all Angular components,\nincluding services, filters and directives. When writing an Angular application,\nAngularModule is automatically included.</p>"}],"typedef":{},"error":[]},"packageName":"","packageIntro":null}