{"name":"TemplateCache","qualifiedName":"angular-core.TemplateCache","comment":"<p>Infinite cache service for templates loaded from URLs.</p>\n<p>All templates that are loaded from a URL are cached indefinitely in the\nTemplateCache the first time they are needed.  This includes templates loaded\nvia <code>ng-include</code> or via the <code>templateUrl</code> field on components decorated with\n<a>angular-core-annotation_src.Component</a>.</p>\n<p>All attempts that require loading a template from a URL are first checked\nagainst this cache.  Only when there is a cache miss is a network request\nattempted.</p>\n<p>You are welcome to pre-load / seed the TemplateCache with templates for URLs\nin advance to avoid the network hit on first load.</p>\n<p>There are two ways to seed the TemplateCache:\n1. imperatively via and the <code>TemplateCache</code> service\n2. declaratively in HTML via both <code>&lt;template type=text/ng-template&gt;</code> and\n   <code>&lt;script type=text/ng-template&gt;</code> tags (handled by NgTemplate)</p>\n<p>Here is an example that illustrates both techniques\n(<a href=\"http://plnkr.co/edit/JCsxhH?p=info\">view in plunker</a>):</p>\n<p>Example:</p>\n<pre><code>// main.dart\nimport 'package:angular/angular.dart';\nimport 'package:angular/application_factory.dart';\n\n@Directive(selector: '[load-template-cache]')\nclass LoadTemplateCacheDirective {\n  LoadTemplateCacheDirective(TemplateCache templateCache, Scope scope) {\n    // Method 1 (imperative): Via the injected TemplateCache service.\n    templateCache.put('template_1.html',\n                      new HttpResponse(200, 't1: My name is {{name}}.'));\n    scope.context[\"name\"] = \"chirayu\";\n  }\n}\n\nmain() {\n  applicationFactory()\n      .addModule(new Module()..bind(LoadTemplateCacheDirective))\n      .run();\n}\n</code></pre>\n<p>and</p>\n<pre><code>&lt;!-- index.html --&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;script src=\"packages/browser/dart.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"main.dart\" type=\"application/dart\"&gt;&lt;/script&gt;\n\n    &lt;!-- Method 2 (declarative): Via the template directive. --&gt;\n    &lt;template id=\"template_2.html\" type=\"text/ng-template\"&gt;\n      t2: My name is {{name}}.\n    &lt;/template&gt;\n  &lt;/head&gt;\n  &lt;body load-template-cache&gt;\n    template_1.html: &lt;div ng-include=\"'template_1.html'\"&gt;&lt;/div&gt;&lt;br&gt;\n    template_2.html: &lt;div ng-include=\"'template_2.html'\"&gt;&lt;/div&gt;&lt;br&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>Neither <code>ng-include</code> above will result in a network hit.  This means that it\nisn't necessary for your web server to even serve those templates.</p>","isAbstract":false,"superclass":"angular-core.LruCache","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"angular-core.TemplateCache.TemplateCache-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"capacity":{"name":"capacity","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{}},"inheritedMethods":{"setters":{},"getters":{"capacity":{"name":"capacity","qualifiedName":"angular-core.TemplateCache.capacity","comment":"","commentFrom":"","inheritedFrom":"angular-core.LruCache.capacity","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"hashCode":{"name":"hashCode","qualifiedName":"angular-core.TemplateCache.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>angular-core.TemplateCache.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"angular-core.TemplateCache.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"size":{"name":"size","qualifiedName":"angular-core.TemplateCache.size","comment":"","commentFrom":"","inheritedFrom":"angular-core.LruCache.size","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"angular-core.TemplateCache.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>angular-core.TemplateCache.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>angular-core.TemplateCache.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"get":{"name":"get","qualifiedName":"angular-core.TemplateCache.get","comment":"<p>Returns the value for <code>key</code> from the cache.  If <code>key</code> is not in the cache,\nreturns <code>null</code>.</p>","commentFrom":"angular-core.Cache.get","inheritedFrom":"angular-core.LruCache.get","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular-core.HttpResponse","inner":[]}],"parameters":{"key":{"name":"key","optional":false,"named":false,"default":false,"type":[{"outer":"angular-core.LruCache.K","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"angular-core.TemplateCache.noSuchMethod","comment":"<p><a>angular-core.TemplateCache.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>angular-core.TemplateCache.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>angular-core.TemplateCache.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>angular-core.TemplateCache.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"put":{"name":"put","qualifiedName":"angular-core.TemplateCache.put","comment":"<p>Inserts/Updates the <code>key</code> in the cache with <code>value</code> and returns the value.</p>","commentFrom":"angular-core.Cache.put","inheritedFrom":"angular-core.LruCache.put","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular-core.HttpResponse","inner":[]}],"parameters":{"key":{"name":"key","optional":false,"named":false,"default":false,"type":[{"outer":"angular-core.LruCache.K","inner":[]}],"value":null,"annotations":[]},"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"angular-core.LruCache.V","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"remove":{"name":"remove","qualifiedName":"angular-core.TemplateCache.remove","comment":"<p>Removes <code>key</code> from the cache.  If <code>key</code> isn't present in the cache, does\nnothing.</p>","commentFrom":"angular-core.Cache.remove","inheritedFrom":"angular-core.LruCache.remove","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular-core.HttpResponse","inner":[]}],"parameters":{"key":{"name":"key","optional":false,"named":false,"default":false,"type":[{"outer":"angular-core.LruCache.K","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"removeAll":{"name":"removeAll","qualifiedName":"angular-core.TemplateCache.removeAll","comment":"<p>Removes all entries from the cache.</p>","commentFrom":"angular-core.Cache.removeAll","inheritedFrom":"angular-core.LruCache.removeAll","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"stats":{"name":"stats","qualifiedName":"angular-core.TemplateCache.stats","comment":"","commentFrom":"","inheritedFrom":"angular-core.LruCache.stats","static":false,"abstract":false,"constant":false,"return":[{"outer":"angular-core.CacheStats","inner":[]}],"parameters":{},"annotations":[]},"toString":{"name":"toString","qualifiedName":"angular-core.TemplateCache.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"angular-core.LruCache.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}