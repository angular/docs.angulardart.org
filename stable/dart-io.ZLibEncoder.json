{"name":"ZLibEncoder","qualifiedName":"dart-io.ZLibEncoder","comment":"<p>The <a>dart-io.ZLibEncoder</a> is the encoder used by <a>dart-io.ZLibCodec</a> and <a>dart-io.GZipCodec</a> to\ncompress data.</p>","isAbstract":false,"superclass":"dart-convert.Converter","implements":[],"subclass":[],"variables":{"gzip":{"name":"gzip","qualifiedName":"dart-io.ZLibEncoder.gzip","comment":"<p>If <a>dart-io.ZLibEncoder.gzip</a> is true, <code>GZip</code> frames will be added to the compressed data.</p>","final":"true","static":"false","constant":"false","type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"level":{"name":"level","qualifiedName":"dart-io.ZLibEncoder.level","comment":"<p>The compression level used by the encoder.</p>","final":"true","static":"false","constant":"false","type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"dart-io.ZLibEncoder.ZLibEncoder-","comment":"<p>Create a new <a>dart-io.ZLibEncoder</a> converter. If the <a>dart-io.ZLibEncoder.ZLibEncoder-.gzip</a> flag is set, the\nencoder will wrap the encoded ZLib data in GZip frames.</p>","commentFrom":"","inheritedFrom":"","static":"false","abstract":"false","constant":"true","return":[{"outer":"dynamic","inner":[]}],"parameters":{"gzip":{"name":"gzip","optional":"true","named":"true","default":"true","type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]},"level":{"name":"level","optional":"true","named":"true","default":"true","type":[{"outer":"dart-core.int","inner":[]}],"value":"6","annotations":[]}},"annotations":[]}},"operators":{},"methods":{"convert":{"name":"convert","qualifiedName":"dart-io.ZLibEncoder.convert","comment":"<p>Convert a list of bytes using the options given to the <a>dart-io.ZLibEncoder</a>\nconstructor.</p>","commentFrom":"","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"bytes":{"name":"bytes","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":"null","annotations":[]}},"annotations":[]},"startChunkedConversion":{"name":"startChunkedConversion","qualifiedName":"dart-io.ZLibEncoder.startChunkedConversion","comment":"<p>Start a chunked conversion using the options given to the <a>dart-io.ZLibEncoder</a>\nconstructor. While it accepts any <a>dart-convert.ChunkedConversionSink</a> taking\n<a>dart-core</a>&lt;<a>dart-core</a>>'s, the optimal sink to be passed as <a>dart-io.ZLibEncoder.startChunkedConversion.sink</a> is a\n<a>dart-convert.ByteConversionSink</a>.</p>","commentFrom":"","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-convert.ByteConversionSink","inner":[]}],"parameters":{"sink":{"name":"sink","optional":"false","named":"false","default":"false","type":[{"outer":"dart-convert.ChunkedConversionSink","inner":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}]}],"value":"null","annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"dart-io.ZLibEncoder.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-io.ZLibEncoder.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-io.ZLibEncoder.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-io.ZLibEncoder.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-io.ZLibEncoder.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-io.ZLibEncoder.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"dart-io.ZLibEncoder.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-io.ZLibEncoder.noSuchMethod","comment":"<p><a>dart-io.ZLibEncoder.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-io.ZLibEncoder.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-io.ZLibEncoder.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-io.ZLibEncoder.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"bind":{"name":"bind","qualifiedName":"dart-io.ZLibEncoder.bind","comment":"","commentFrom":"","inheritedFrom":"dart-convert.Converter.bind","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-async.Stream","inner":[]}],"parameters":{"source":{"name":"source","optional":"false","named":"false","default":"false","type":[{"outer":"dart-async.Stream","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"convert":{"name":"convert","qualifiedName":"dart-io.ZLibEncoder.convert","comment":"<p>Converts <a>dart-io.ZLibEncoder.convert.input</a> and returns the result of the conversion.</p>","commentFrom":"","inheritedFrom":"dart-convert.Converter.convert","static":"false","abstract":"true","constant":"false","return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"input":{"name":"input","optional":"false","named":"false","default":"false","type":[{"outer":"dart-convert.Converter.S","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"fuse":{"name":"fuse","qualifiedName":"dart-io.ZLibEncoder.fuse","comment":"<p>Fuses <code>this</code> with <a>dart-io.ZLibEncoder.fuse.other</a>.</p>\n<p>Encoding with the resulting converter is equivalent to converting with\n<code>this</code> before converting with <code>other</code>.</p>","commentFrom":"","inheritedFrom":"dart-convert.Converter.fuse","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-convert.Converter","inner":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]},{"outer":"dynamic","inner":[]}]}],"parameters":{"other":{"name":"other","optional":"false","named":"false","default":"false","type":[{"outer":"dart-convert.Converter","inner":[{"outer":"dynamic","inner":[]},{"outer":"dynamic","inner":[]}]}],"value":"null","annotations":[]}},"annotations":[]},"startChunkedConversion":{"name":"startChunkedConversion","qualifiedName":"dart-io.ZLibEncoder.startChunkedConversion","comment":"<p>Starts a chunked conversion.</p>","commentFrom":"","inheritedFrom":"dart-convert.Converter.startChunkedConversion","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-convert.ChunkedConversionSink","inner":[]}],"parameters":{"sink":{"name":"sink","optional":"false","named":"false","default":"false","type":[{"outer":"dart-convert.ChunkedConversionSink","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}