{"name":"MutableRectangle","qualifiedName":"dart-math.MutableRectangle","comment":"<p>A class for representing two-dimensional axis-aligned rectangles with mutable\nproperties.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":["dart-math.Rectangle"],"subclass":["dart-dom-html.CssRect"],"variables":{"left":{"name":"left","qualifiedName":"dart-math.MutableRectangle.left","comment":"","final":"false","static":"false","constant":"false","type":[{"outer":"dart-math.MutableRectangle.T","inner":[]}],"annotations":[]},"top":{"name":"top","qualifiedName":"dart-math.MutableRectangle.top","comment":"","final":"false","static":"false","constant":"false","type":[{"outer":"dart-math.MutableRectangle.T","inner":[]}],"annotations":[]},"width":{"name":"width","qualifiedName":"dart-math.MutableRectangle.width","comment":"","final":"false","static":"false","constant":"false","type":[{"outer":"dart-math.MutableRectangle.T","inner":[]}],"annotations":[]},"height":{"name":"height","qualifiedName":"dart-math.MutableRectangle.height","comment":"","final":"false","static":"false","constant":"false","type":[{"outer":"dart-math.MutableRectangle.T","inner":[]}],"annotations":[]}},"inheritedVariables":{"left":{"name":"left","qualifiedName":"dart-math.Rectangle.left","comment":"","final":"true","static":"false","constant":"false","type":[{"outer":"dart-math.MutableRectangle.T","inner":[]}],"annotations":[]},"top":{"name":"top","qualifiedName":"dart-math.Rectangle.top","comment":"","final":"true","static":"false","constant":"false","type":[{"outer":"dart-math.MutableRectangle.T","inner":[]}],"annotations":[]},"width":{"name":"width","qualifiedName":"dart-math.Rectangle.width","comment":"","final":"true","static":"false","constant":"false","type":[{"outer":"dart-math.MutableRectangle.T","inner":[]}],"annotations":[]},"height":{"name":"height","qualifiedName":"dart-math.Rectangle.height","comment":"","final":"true","static":"false","constant":"false","type":[{"outer":"dart-math.MutableRectangle.T","inner":[]}],"annotations":[]}},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"dart-math.MutableRectangle.MutableRectangle-","comment":"","commentFrom":"","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{"left":{"name":"left","optional":"false","named":"false","default":"false","type":[{"outer":"dart-math.MutableRectangle.T","inner":[]}],"value":"null","annotations":[]},"top":{"name":"top","optional":"false","named":"false","default":"false","type":[{"outer":"dart-math.MutableRectangle.T","inner":[]}],"value":"null","annotations":[]},"width":{"name":"width","optional":"false","named":"false","default":"false","type":[{"outer":"dart-math.MutableRectangle.T","inner":[]}],"value":"null","annotations":[]},"height":{"name":"height","optional":"false","named":"false","default":"false","type":[{"outer":"dart-math.MutableRectangle.T","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"fromPoints":{"name":"fromPoints","qualifiedName":"dart-math.MutableRectangle.MutableRectangle-fromPoints","comment":"","commentFrom":"","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-math.MutableRectangle","inner":[{"outer":"dart-math.MutableRectangle.T","inner":[]}]}],"parameters":{"a":{"name":"a","optional":"false","named":"false","default":"false","type":[{"outer":"dart-math.Point","inner":[{"outer":"dart-math.MutableRectangle.T","inner":[]}]}],"value":"null","annotations":[]},"b":{"name":"b","optional":"false","named":"false","default":"false","type":[{"outer":"dart-math.Point","inner":[{"outer":"dart-math.MutableRectangle.T","inner":[]}]}],"value":"null","annotations":[]}},"annotations":[]}},"operators":{},"methods":{}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"dart-math.MutableRectangle.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-math.MutableRectangle.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"dart-core.Object.hashCode","inheritedFrom":"dart-math._RectangleBase.hashCode","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-math.MutableRectangle.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"left":{"name":"left","qualifiedName":"dart-math.MutableRectangle.left","comment":"<p>The x-coordinate of the left edge.</p>","commentFrom":"","inheritedFrom":"dart-math._RectangleBase.left","static":"false","abstract":"true","constant":"false","return":[{"outer":"dart-math.MutableRectangle.T","inner":[]}],"parameters":{},"annotations":[]},"top":{"name":"top","qualifiedName":"dart-math.MutableRectangle.top","comment":"<p>The y-coordinate of the top edge.</p>","commentFrom":"","inheritedFrom":"dart-math._RectangleBase.top","static":"false","abstract":"true","constant":"false","return":[{"outer":"dart-math.MutableRectangle.T","inner":[]}],"parameters":{},"annotations":[]},"width":{"name":"width","qualifiedName":"dart-math.MutableRectangle.width","comment":"<p>The <code>width</code> of the rectangle.</p>","commentFrom":"","inheritedFrom":"dart-math._RectangleBase.width","static":"false","abstract":"true","constant":"false","return":[{"outer":"dart-math.MutableRectangle.T","inner":[]}],"parameters":{},"annotations":[]},"height":{"name":"height","qualifiedName":"dart-math.MutableRectangle.height","comment":"<p>The <code>height</code> of the rectangle.</p>","commentFrom":"","inheritedFrom":"dart-math._RectangleBase.height","static":"false","abstract":"true","constant":"false","return":[{"outer":"dart-math.MutableRectangle.T","inner":[]}],"parameters":{},"annotations":[]},"right":{"name":"right","qualifiedName":"dart-math.MutableRectangle.right","comment":"<p>The x-coordinate of the right edge.</p>","commentFrom":"","inheritedFrom":"dart-math._RectangleBase.right","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-math.MutableRectangle.T","inner":[]}],"parameters":{},"annotations":[]},"bottom":{"name":"bottom","qualifiedName":"dart-math.MutableRectangle.bottom","comment":"<p>The y-coordinate of the bottom edge.</p>","commentFrom":"","inheritedFrom":"dart-math._RectangleBase.bottom","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-math.MutableRectangle.T","inner":[]}],"parameters":{},"annotations":[]},"topLeft":{"name":"topLeft","qualifiedName":"dart-math.MutableRectangle.topLeft","comment":"","commentFrom":"","inheritedFrom":"dart-math._RectangleBase.topLeft","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-math.Point","inner":[{"outer":"dart-math.MutableRectangle.T","inner":[]}]}],"parameters":{},"annotations":[]},"topRight":{"name":"topRight","qualifiedName":"dart-math.MutableRectangle.topRight","comment":"","commentFrom":"","inheritedFrom":"dart-math._RectangleBase.topRight","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-math.Point","inner":[{"outer":"dart-math.MutableRectangle.T","inner":[]}]}],"parameters":{},"annotations":[]},"bottomRight":{"name":"bottomRight","qualifiedName":"dart-math.MutableRectangle.bottomRight","comment":"","commentFrom":"","inheritedFrom":"dart-math._RectangleBase.bottomRight","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-math.Point","inner":[{"outer":"dart-math.MutableRectangle.T","inner":[]}]}],"parameters":{},"annotations":[]},"bottomLeft":{"name":"bottomLeft","qualifiedName":"dart-math.MutableRectangle.bottomLeft","comment":"","commentFrom":"","inheritedFrom":"dart-math._RectangleBase.bottomLeft","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-math.Point","inner":[{"outer":"dart-math.MutableRectangle.T","inner":[]}]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-math.MutableRectangle.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-math.MutableRectangle.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-math.MutableRectangle.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"dart-core.Object.==","inheritedFrom":"dart-math._RectangleBase.==","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"dart-math.MutableRectangle.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"dart-math._RectangleBase.toString","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-math.MutableRectangle.noSuchMethod","comment":"<p><a>dart-math.MutableRectangle.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-math.MutableRectangle.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-math.MutableRectangle.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-math.MutableRectangle.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"intersection":{"name":"intersection","qualifiedName":"dart-math.MutableRectangle.intersection","comment":"<p>Computes the intersection of <code>this</code> and <a>dart-math.MutableRectangle.intersection.other</a>.</p>\n<p>The intersection of two axis-aligned rectangles, if any, is always another\naxis-aligned rectangle.</p>\n<p>Returns the intersection of this and <code>other</code>, or <code>null</code> if they don't\nintersect.</p>","commentFrom":"","inheritedFrom":"dart-math._RectangleBase.intersection","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-math.Rectangle","inner":[{"outer":"dart-math.MutableRectangle.T","inner":[]}]}],"parameters":{"other":{"name":"other","optional":"false","named":"false","default":"false","type":[{"outer":"dart-math.Rectangle","inner":[{"outer":"dart-math._RectangleBase.T","inner":[]}]}],"value":"null","annotations":[]}},"annotations":[]},"intersects":{"name":"intersects","qualifiedName":"dart-math.MutableRectangle.intersects","comment":"<p>Returns true if <code>this</code> intersects <a>dart-math.MutableRectangle.intersects.other</a>.</p>","commentFrom":"","inheritedFrom":"dart-math._RectangleBase.intersects","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":"false","named":"false","default":"false","type":[{"outer":"dart-math.Rectangle","inner":[{"outer":"dart-core.num","inner":[]}]}],"value":"null","annotations":[]}},"annotations":[]},"boundingBox":{"name":"boundingBox","qualifiedName":"dart-math.MutableRectangle.boundingBox","comment":"<p>Returns a new rectangle which completely contains <code>this</code> and <a>dart-math.MutableRectangle.boundingBox.other</a>.</p>","commentFrom":"","inheritedFrom":"dart-math._RectangleBase.boundingBox","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-math.Rectangle","inner":[{"outer":"dart-math.MutableRectangle.T","inner":[]}]}],"parameters":{"other":{"name":"other","optional":"false","named":"false","default":"false","type":[{"outer":"dart-math.Rectangle","inner":[{"outer":"dart-math._RectangleBase.T","inner":[]}]}],"value":"null","annotations":[]}},"annotations":[]},"containsRectangle":{"name":"containsRectangle","qualifiedName":"dart-math.MutableRectangle.containsRectangle","comment":"<p>Tests whether <code>this</code> entirely contains <a>dart-math.MutableRectangle.containsRectangle.another</a>.</p>","commentFrom":"","inheritedFrom":"dart-math._RectangleBase.containsRectangle","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"another":{"name":"another","optional":"false","named":"false","default":"false","type":[{"outer":"dart-math.Rectangle","inner":[{"outer":"dart-core.num","inner":[]}]}],"value":"null","annotations":[]}},"annotations":[]},"containsPoint":{"name":"containsPoint","qualifiedName":"dart-math.MutableRectangle.containsPoint","comment":"<p>Tests whether <a>dart-math.MutableRectangle.containsPoint.another</a> is inside or along the edges of <code>this</code>.</p>","commentFrom":"","inheritedFrom":"dart-math._RectangleBase.containsPoint","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"another":{"name":"another","optional":"false","named":"false","default":"false","type":[{"outer":"dart-math.Point","inner":[{"outer":"dart-core.num","inner":[]}]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{"T":{"name":"T","type":"dart.core.num"}}}