{"name":"angular","qualifiedName":"angular","comment":"<p>Angular is a framework for building single page web applications.</p>\n<p>Further reading:</p><ul><li>AngularJS <a href=\"http://www.angularjs.org\">Overview</a></li><li><a href=\"https://github.com/angular/angular.dart.tutorial/wiki\">Tutorial</a></li><li><a href=\"http://groups.google.com/d/forum/angular-dart?hl=en\">Mailing List</a></li></ul>","variables":{"OPERATORS":{"name":"OPERATORS","qualifiedName":"angular.OPERATORS","comment":"","final":"false","static":"false","constant":"false","type":[{"outer":"dart-core.Set","inner":[{"outer":"dart-core.String","inner":[]}]}],"annotations":[]}},"functions":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{"NOT_IMPLEMENTED":{"name":"NOT_IMPLEMENTED","qualifiedName":"angular.NOT_IMPLEMENTED","comment":"","commentFrom":"","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]},"directiveSelectorFactory":{"name":"directiveSelectorFactory","qualifiedName":"angular.directiveSelectorFactory","comment":"<p>Factory method for creating a <a>angular.DirectiveSelector</a>.</p>","commentFrom":"","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"angular.DirectiveSelector","inner":[]}],"parameters":{"directives":{"name":"directives","optional":"false","named":"false","default":"false","type":[{"outer":"angular.DirectiveMap","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"forceNewDirectivesAndFilters":{"name":"forceNewDirectivesAndFilters","qualifiedName":"angular.forceNewDirectivesAndFilters","comment":"<p>Creates a child injector that allows loading new directives, filters and\nservices from the provided modules.</p>","commentFrom":"","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"angular.Injector","inner":[]}],"parameters":{"injector":{"name":"injector","optional":"false","named":"false","default":"false","type":[{"outer":"angular.Injector","inner":[]}],"value":"null","annotations":[]},"modules":{"name":"modules","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.List","inner":[{"outer":"angular.Module","inner":[]}]}],"value":"null","annotations":[]}},"annotations":[]},"cloneElements":{"name":"cloneElements","qualifiedName":"angular.cloneElements","comment":"","commentFrom":"","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.List","inner":[{"outer":"dart-dom-html.Node","inner":[]}]}],"parameters":{"elements":{"name":"elements","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"ngRoute":{"name":"ngRoute","qualifiedName":"angular.ngRoute","comment":"","commentFrom":"","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"angular.NgRouteCfg","inner":[]}],"parameters":{"path":{"name":"path","optional":"true","named":"true","default":"false","type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"view":{"name":"view","optional":"true","named":"true","default":"false","type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"mount":{"name":"mount","optional":"true","named":"true","default":"false","type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"angular.NgRouteCfg","inner":[]}]}],"value":"null","annotations":[]},"modules":{"name":"modules","optional":"true","named":"true","default":"false","type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]},"defaultRoute":{"name":"defaultRoute","optional":"true","named":"true","default":"true","type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]},"preEnter":{"name":"preEnter","optional":"true","named":"true","default":"false","type":[{"outer":"route-client.RoutePreEnterEventHandler","inner":[]}],"value":"null","annotations":[]},"enter":{"name":"enter","optional":"true","named":"true","default":"false","type":[{"outer":"route-client.RouteEnterEventHandler","inner":[]}],"value":"null","annotations":[]},"leave":{"name":"leave","optional":"true","named":"true","default":"false","type":[{"outer":"route-client.RouteLeaveEventHandler","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"ngDirectives":{"name":"ngDirectives","qualifiedName":"angular.ngDirectives","comment":"<p>Return a List of directive controllers associated with a current Element.</p>\n<p><strong>NOTE</strong>: This global method is here to make it easier to debug Angular\napplication from the browser's REPL, unit or end-to-end tests. The function\nis not intended to be called from Angular application.</p>","commentFrom":"","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.Object","inner":[]}]}],"parameters":{"node":{"name":"node","optional":"false","named":"false","default":"false","type":[{"outer":"dart-dom-html.Node","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"ngQuery":{"name":"ngQuery","qualifiedName":"angular.ngQuery","comment":"","commentFrom":"","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.List","inner":[{"outer":"dart-dom-html.Element","inner":[]}]}],"parameters":{"element":{"name":"element","optional":"false","named":"false","default":"false","type":[{"outer":"dart-dom-html.Node","inner":[]}],"value":"null","annotations":[]},"selector":{"name":"selector","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"containsText":{"name":"containsText","optional":"true","named":"false","default":"false","type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"ngScope":{"name":"ngScope","qualifiedName":"angular.ngScope","comment":"<p>Return the <a>angular.Scope</a> associated with a current Element.</p>\n<p><strong>NOTE</strong>: This global method is here to make it easier to debug Angular\napplication from the browser's REPL, unit or end-to-end tests. The function\nis not intended to be called from Angular application.</p>","commentFrom":"","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"angular.Scope","inner":[]}],"parameters":{"node":{"name":"node","optional":"false","named":"false","default":"false","type":[{"outer":"dart-dom-html.Node","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"ngInjector":{"name":"ngInjector","qualifiedName":"angular.ngInjector","comment":"<p>Return the <a>angular.Injector</a> associated with a current Element.</p>\n<p><strong>NOTE</strong>: This global method is here to make it easier to debug Angular\napplication from the browser's REPL, unit or end-to-end tests. The function\nis not intended to be called from Angular application.</p>","commentFrom":"","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"angular.Injector","inner":[]}],"parameters":{"node":{"name":"node","optional":"false","named":"false","default":"false","type":[{"outer":"dart-dom-html.Node","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"ngProbe":{"name":"ngProbe","qualifiedName":"angular.ngProbe","comment":"<p>Return the closest <a>angular.ElementProbe</a> object for a given Element.</p>\n<p>NOTE: This global method is here to make it easier to debug Angular</p>\n<pre><code>  application from the browser's REPL, unit or end-to-end tests. The\n  function is not intended to be called from Angular application.\n</code></pre>","commentFrom":"","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"angular.ElementProbe","inner":[]}],"parameters":{"node":{"name":"node","optional":"false","named":"false","default":"false","type":[{"outer":"dart-dom-html.Node","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"ngBootstrap":{"name":"ngBootstrap","qualifiedName":"angular.ngBootstrap","comment":"<p>This method is the main entry point to an angular application.</p>\n<h1>The <a>angular.ngBootstrap</a> is responsible for:</h1><ol><li>Locating the root element of the application,</li><li>Creating Angular <a>angular.NgZone</a></li><li>Inside the <a>angular.NgZone</a> create an injector</li><li>Retrieve the <a>angular.Compiler</a> and compile the root eleement</li></ol>\n<h1>Parameters:</h1><ul><li><a>angular.ngBootstrap.module</a> Option application module to add to the <a>angular.Injector</a>.</li><li><a>angular.ngBootstrap.modules</a> Optional list of <a>angular.Module</a>s to add to the <a>angular.Injector</a> (if more than one is needed).</li><li>\n<p><a>angular.ngBootstrap.element</a> Optional root element of the application. If non specified, the\nthe root element is looked up using the <a>angular.ngBootstrap.selector</a>. If selector can not\nidentify a root, the root HTML element is used for bootstraping.</p></li><li><a>angular.ngBootstrap.selector</a> Optional CSS selector used to locate the root element for the application.</li><li>injectorFactor Optional factory responsible for creating the injector.</li></ul>\n<h1>A typical way to boostrap an Angular application:</h1>\n<pre><code>Module myAppModule = new Module();\nmyAppModule.type(MyType);\n....\nInjector injector = ngBootstrap(module: myAppModule);\n</code></pre>","commentFrom":"","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"angular.Injector","inner":[]}],"parameters":{"module":{"name":"module","optional":"true","named":"true","default":"true","type":[{"outer":"angular.Module","inner":[]}],"value":"null","annotations":[]},"modules":{"name":"modules","optional":"true","named":"true","default":"true","type":[{"outer":"dart-core.List","inner":[{"outer":"angular.Module","inner":[]}]}],"value":"null","annotations":[]},"element":{"name":"element","optional":"true","named":"true","default":"true","type":[{"outer":"dart-dom-html.Element","inner":[]}],"value":"null","annotations":[]},"selector":{"name":"selector","optional":"true","named":"true","default":"true","type":[{"outer":"dart-core.String","inner":[]}],"value":"StringConstant(\"[ng-app]\")","annotations":[]},"injectorFactory":{"name":"injectorFactory","optional":"true","named":"true","default":"true","type":[{"outer":"dynamic","inner":[]}],"value":"function(_defaultInjectorFactory)","annotations":[]}},"annotations":[]}}},"classes":{"class":[{"name":"Module","qualifiedName":"angular.Module","preview":"<p>A collection of type bindings. Once the module is passed into the injector,\nthe injector creates a copy of the module and all subsequent changes to the\nmodule have no effect.</p>"},{"name":"Injector","qualifiedName":"angular.Injector"},{"name":"NgZone","qualifiedName":"angular.NgZone","preview":"<p>A better zone API which implements onTurnDone.</p>"},{"name":"LongStackTrace","qualifiedName":"angular.LongStackTrace","preview":"<p>Contains the locations of runAsync calls across VM turns.</p>"},{"name":"MapFn","qualifiedName":"angular.MapFn"},{"name":"ArrayFn","qualifiedName":"angular.ArrayFn"},{"name":"ExpressionVisitor","qualifiedName":"angular.ExpressionVisitor"},{"name":"AstParser","qualifiedName":"angular.AstParser"},{"name":"ScopeStreamSubscription","qualifiedName":"angular.ScopeStreamSubscription"},{"name":"ScopeStream","qualifiedName":"angular.ScopeStream"},{"name":"RootScope","qualifiedName":"angular.RootScope"},{"name":"ScopeStats","qualifiedName":"angular.ScopeStats"},{"name":"Scope","qualifiedName":"angular.Scope","preview":"<p><a>angular.Scope</a> is represents a collection of <a>angular.Scope.watch</a>es observeers, and <a>angular.Scope.context</a>\nfor the watchers, observers and <a>angular.Scope.eval</a>uations. Scopes structure loosely\nmimics the DOM structure. Scopes and <a>angular.Block</a>s are bound to each other.\nAs scopes are created and destroyed by <a>angular.BlockFactory</a> they are responsible\nfor change detection, change processing and memory management.</p>"},{"name":"ScopeLocals","qualifiedName":"angular.ScopeLocals"},{"name":"ScopeDigestTTL","qualifiedName":"angular.ScopeDigestTTL","preview":"<p>Allows the configuration of Scope.digest iteration maximum time-to-live\nvalue. Digest keeps checking the state of the watcher getters until it\ncan execute one full iteration with no watchers triggering. TTL is used\nto prevent an infinite loop where watch A triggers watch B which in turn\ntriggers watch A. If the system does not stabilize in TTL iterations then\nthe digest is stopped and an exception is thrown.</p>"},{"name":"ScopeEvent","qualifiedName":"angular.ScopeEvent","preview":"<p>Injected into the listener function within <a>angular.Scope.on</a> to provide\nevent-specific details to the scope listener.</p>"},{"name":"MetadataExtractor","qualifiedName":"angular.MetadataExtractor"},{"name":"AnnotationsMap","qualifiedName":"angular.AnnotationsMap"},{"name":"AnnotationMap","qualifiedName":"angular.AnnotationMap"},{"name":"Interpolate","qualifiedName":"angular.Interpolate","preview":"<p>Compiles a string with markup into an interpolation function. This service\nis used by the HTML <a>angular.Compiler</a> service for data binding.</p>"},{"name":"Interpolation","qualifiedName":"angular.Interpolation"},{"name":"FilterMap","qualifiedName":"angular.FilterMap","preview":"<p>Registry of filters at runtime.</p>"},{"name":"NgFilter","qualifiedName":"angular.NgFilter","preview":"<p>Use @<a>angular.NgFilter</a> annotation to register a new filter. A filter is a class\nwith a call method (a callable function).</p>"},{"name":"ExceptionHandler","qualifiedName":"angular.ExceptionHandler","preview":"<p>Any uncaught exception in angular expressions is delegated to this service.\nThe default implementation logs exceptions into console.</p>"},{"name":"NgDetachAware","qualifiedName":"angular.NgDetachAware","preview":"<p>Implementing directives or components <a>angular.NgDetachAware.detach</a> method will be called when\nthe associated scope is destroyed.</p>"},{"name":"NgAttachAware","qualifiedName":"angular.NgAttachAware","preview":"<p>Implementing directives or components <a>angular.NgAttachAware.attach</a> method will be called when\nthe next scope digest occurs after component instantiation. It is guaranteed\nthat when <a>angular.NgAttachAware.attach</a> is invoked, that all attribute mappings have already\nbeen processed.</p>"},{"name":"NgCallback","qualifiedName":"angular.NgCallback","preview":"<p>When applied as an annotation on a directive field specifies that\nthe field is to be mapped to DOM attribute with the provided <a>angular.AttrFieldAnnotation.attrName</a>.\nThe value of the attribute to be treated as a callback expession,\nequivalent to <code>&amp;</code> specification.</p>"},{"name":"NgTwoWay","qualifiedName":"angular.NgTwoWay","preview":"<p>When applied as an annotation on a directive field specifies that\nthe field is to be mapped to DOM attribute with the provided <a>angular.AttrFieldAnnotation.attrName</a>.\nThe value of the attribute to be treated as a two-way expession,\nequivalent to <code>&lt;=&gt;</code> specification.</p>"},{"name":"NgOneWayOneTime","qualifiedName":"angular.NgOneWayOneTime","preview":"<p>When applied as an annotation on a directive field specifies that\nthe field is to be mapped to DOM attribute with the provided <a>angular.AttrFieldAnnotation.attrName</a>.\nThe value of the attribute to be treated as a one time one-way expession,\nequivalent to <code>=&gt;!</code> specification.</p>"},{"name":"NgOneWay","qualifiedName":"angular.NgOneWay","preview":"<p>When applied as an annotation on a directive field specifies that\nthe field is to be mapped to DOM attribute with the provided <a>angular.AttrFieldAnnotation.attrName</a>.\nThe value of the attribute to be treated as a one-way expession, equivalent\nto <code>=&gt;</code> specification.</p>"},{"name":"NgAttr","qualifiedName":"angular.NgAttr","preview":"<p>When applied as an annotation on a directive field specifies that\nthe field is to be mapped to DOM attribute with the provided <a>angular.AttrFieldAnnotation.attrName</a>.\nThe value of the attribute to be treated as a string, equivalent\nto <code>@</code> specification.</p>"},{"name":"AttrFieldAnnotation","qualifiedName":"angular.AttrFieldAnnotation"},{"name":"NgController","qualifiedName":"angular.NgController","preview":"<p>Meta-data marker placed on a class which should act as a controller for your application.</p>"},{"name":"NgDirective","qualifiedName":"angular.NgDirective","preview":"<p>Meta-data marker placed on a class which should act as a directive.</p>"},{"name":"NgComponent","qualifiedName":"angular.NgComponent","preview":"<p>Meta-data marker placed on a class which should act as a controller for the\ncomponent. Angular components are a light-weight version of web-components.\nAngular components use shadow-DOM for rendering their templates.</p>"},{"name":"NgAnnotation","qualifiedName":"angular.NgAnnotation"},{"name":"LruCache","qualifiedName":"angular.LruCache","preview":"<p>Simple LRU cache.</p>"},{"name":"UnboundedCache","qualifiedName":"angular.UnboundedCache","preview":"<p>An unbounded cache.</p>"},{"name":"Cache","qualifiedName":"angular.Cache","preview":"<p>The Cache interface.</p>"},{"name":"CacheStats","qualifiedName":"angular.CacheStats"},{"name":"NgCoreModule","qualifiedName":"angular.NgCoreModule"},{"name":"NullTreeSanitizer","qualifiedName":"angular.NullTreeSanitizer"},{"name":"TemplateCache","qualifiedName":"angular.TemplateCache","preview":"<p>Infinite cache service for templates loaded from URLs.</p>"},{"name":"NodeCursor","qualifiedName":"angular.NodeCursor"},{"name":"NgAttrMustacheDirective","qualifiedName":"angular.NgAttrMustacheDirective"},{"name":"NgTextMustacheDirective","qualifiedName":"angular.NgTextMustacheDirective"},{"name":"Http","qualifiedName":"angular.Http","preview":"<p>The <a>angular.Http</a> service facilitates communication with the remote HTTP servers.\nIt uses dart:html's HttpRequest and provides a number of features on top\nof the core Dart library.</p>"},{"name":"HttpDefaults","qualifiedName":"angular.HttpDefaults","preview":"<p>Injected into the <a>angular.Http</a> service.  This class contains application-wide\nHTTP defaults.</p>"},{"name":"HttpDefaultHeaders","qualifiedName":"angular.HttpDefaultHeaders","preview":"<p>Default header configuration.</p>"},{"name":"HttpResponse","qualifiedName":"angular.HttpResponse","preview":"<p>The response for an HTTP request.  Returned from the <a>angular.Http</a> service.</p>"},{"name":"HttpResponseConfig","qualifiedName":"angular.HttpResponseConfig","preview":"<p>The request configuration of the request associated with this response.</p>"},{"name":"HttpInterceptors","qualifiedName":"angular.HttpInterceptors","preview":"<p>A list of <a>angular.HttpInterceptor</a>s.</p>"},{"name":"DefaultTransformDataHttpInterceptor","qualifiedName":"angular.DefaultTransformDataHttpInterceptor","preview":"<p>The default transform data interceptor.abstract</p>"},{"name":"HttpInterceptor","qualifiedName":"angular.HttpInterceptor","preview":"<p>HttpInterceptors are used to modify the Http request. They can be added to\n<a>angular.HttpInterceptors</a> or passed into <a>angular.Http.call</a>.</p>"},{"name":"LocationWrapper","qualifiedName":"angular.LocationWrapper"},{"name":"HttpBackend","qualifiedName":"angular.HttpBackend","preview":"<p>HTTP backend used by the <a>angular.Http</a> service that delegates to dart:html's\nHttpRequest and deals with Dart bugs.</p>"},{"name":"UrlRewriter","qualifiedName":"angular.UrlRewriter"},{"name":"FieldMetadataExtractor","qualifiedName":"angular.FieldMetadataExtractor"},{"name":"DirectiveMap","qualifiedName":"angular.DirectiveMap"},{"name":"TemplateLoader","qualifiedName":"angular.TemplateLoader","preview":"<p>TemplateLoader is an asynchronous access to ShadowRoot which is\nloaded asynchronously. It allows a Component to be notified when its\nShadowRoot is ready.</p>"},{"name":"NodeAttrs","qualifiedName":"angular.NodeAttrs","preview":"<p>NodeAttrs is a facade for element attributes. The facade is responsible\nfor normalizing attribute names as well as allowing access to the\nvalue of the directive.</p>"},{"name":"Compiler","qualifiedName":"angular.Compiler"},{"name":"DirectiveRef","qualifiedName":"angular.DirectiveRef"},{"name":"Cookies","qualifiedName":"angular.Cookies","preview":"<p>Cookies service</p>"},{"name":"BrowserCookies","qualifiedName":"angular.BrowserCookies","preview":"<p>This class provides low-level acces to the browser's cookies.\nIt is not meant to be used directly by applications.  Instead\nuse the Cookies service.</p>"},{"name":"ElementProbe","qualifiedName":"angular.ElementProbe","preview":"<p><a>angular.ElementProbe</a> is attached to each Element in the DOM. Its sole purpose is to\nallow access to the <a>angular.Injector</a>, <a>angular.Scope</a>, and Directives for debugging and automated\ntest purposes. The information here is not used by Angular in any way.</p>"},{"name":"BlockCache","qualifiedName":"angular.BlockCache","preview":"<p>BlockCache is used to cache the compilation of templates into <a>angular.Block</a>s.\nIt can be used synchronously if HTML is known or asynchronously if the\ntemplate HTML needs to be looked up from the URL.</p>"},{"name":"BlockFactory","qualifiedName":"angular.BlockFactory","preview":"<p>BlockFactory is used to create new <a>angular.Block</a>s. BlockFactory is created by the\n<a>angular.Compiler</a> as a result of compiling a template.</p>"},{"name":"BoundBlockFactory","qualifiedName":"angular.BoundBlockFactory","preview":"<p>BoundBlockFactory is a <a>angular.BlockFactory</a> which does not need Injector because\nit is pre-bound to an injector from the parent. This means that this\nBoundBlockFactory can only be used from within a specific Directive such\nas NgRepeat, but it can not be stored in a cache.</p>"},{"name":"BlockHole","qualifiedName":"angular.BlockHole","preview":"<p>A BlockHole is an instance of a hole. BlockHoles designate where child\n<a>angular.Block</a>s can be added in parent <a>angular.Block</a>. BlockHoles wrap a DOM element,\nand act as references which allows more blocks to be added.</p>"},{"name":"Block","qualifiedName":"angular.Block","preview":"<p>A Block is a fundamental building block of DOM. It is a chunk of DOM which\ncan not be structural changed. It can only have its attributes changed.\nA Block can have <a>angular.BlockHole</a>s embedded in its DOM.  A <a>angular.BlockHole</a> can\ncontain other <a>angular.Block</a>s and it is the only way in which DOM can be changed\nstructurally.</p>"},{"name":"ElementWrapper","qualifiedName":"angular.ElementWrapper","preview":"<p>ElementWrapper is an interface for <a>angular.Block</a>s and <a>angular.BlockHole</a>s. Its purpose is\nto allow treating <a>angular.Block</a> and <a>angular.BlockHole</a> under same interface so that\n<a>angular.Block</a>s can be added after <a>angular.BlockHole</a>.</p>"},{"name":"AnimationResult","qualifiedName":"angular.AnimationResult","preview":"<p>Final result of an animation after it is no longer attached to the element.</p>"},{"name":"NoOpAnimation","qualifiedName":"angular.NoOpAnimation","preview":"<p>Completed animation handle that is used when an animation is ignored and the\nfinal effect of the animation is immediatly completed.</p>"},{"name":"Animation","qualifiedName":"angular.Animation","preview":"<p>Animation handle for controlling and listening to animation completion.</p>"},{"name":"NgAnimate","qualifiedName":"angular.NgAnimate","preview":"<p>The <a>angular.NgAnimate</a> service provides dom lifecycle mangement, detection and\nanalysis of css animations, and hooks for custom animations. When any of\nthese animations are run, <a>angular.Animation</a>s are returned so the animation can be\ncontroled and so that custom dom manipulations can occur when animations\ncomplete.</p>"},{"name":"NgShadowRootAware","qualifiedName":"angular.NgShadowRootAware","preview":"<p>Implementing components <a>angular.NgShadowRootAware.onShadowRoot</a> method will be called when\nthe template for the component has been loaded and inserted into Shadow DOM.\nIt is guaranteed that when <a>angular.NgShadowRootAware.onShadowRoot</a> is invoked, that shadow DOM\nhas been loaded and is ready.</p>"},{"name":"NgCoreDomModule","qualifiedName":"angular.NgCoreDomModule"},{"name":"ParserBackend","qualifiedName":"angular.ParserBackend"},{"name":"Parser","qualifiedName":"angular.Parser","preview":"<p>Placeholder for DI. The parser you are looking for is DynamicParser.</p>"},{"name":"Scanner","qualifiedName":"angular.Scanner"},{"name":"Lexer","qualifiedName":"angular.Lexer"},{"name":"Token","qualifiedName":"angular.Token"},{"name":"NgModelMaxLengthValidator","qualifiedName":"angular.NgModelMaxLengthValidator","preview":"<p>Validates the model to see if the length of its contents are less than or\nequal to the maximum length set in place by the HTML maxlength or\nng-maxlength attributes present on the input element.</p>"},{"name":"NgModelMinLengthValidator","qualifiedName":"angular.NgModelMinLengthValidator","preview":"<p>Validates the model to see if the length of its contents are greater than or\nequal to the minimum length set in place by the HTML minlength or\nng-minlength attributes present on the input element.</p>"},{"name":"NgModelPatternValidator","qualifiedName":"angular.NgModelPatternValidator","preview":"<p>Validates the model to see if its contents match the given pattern present on either the\nHTML pattern or ng-pattern attributes present on the input element.</p>"},{"name":"NgModelNumberValidator","qualifiedName":"angular.NgModelNumberValidator","preview":"<p>Validates the model to see if its contents match a valid number.</p>"},{"name":"NgModelEmailValidator","qualifiedName":"angular.NgModelEmailValidator","preview":"<p>Validates the model to see if its contents match a valid email pattern.</p>"},{"name":"NgModelUrlValidator","qualifiedName":"angular.NgModelUrlValidator","preview":"<p>Validates the model to see if its contents match a valid URL pattern.</p>"},{"name":"NgModelRequiredValidator","qualifiedName":"angular.NgModelRequiredValidator","preview":"<p>Validates the model depending if required or ng-required is present on the element.</p>"},{"name":"NgValidatable","qualifiedName":"angular.NgValidatable"},{"name":"NgNullForm","qualifiedName":"angular.NgNullForm"},{"name":"NgForm","qualifiedName":"angular.NgForm","preview":"<p>The form directive listens on submission requests and, depending,\non if an action is set, the form will automatically either allow\nor prevent the default browser submission from occurring.</p>"},{"name":"OptionValueDirective","qualifiedName":"angular.OptionValueDirective","preview":"<p>Since the value attribute of the OPTION can only be a string, Angular\nprovides ng-value which allows binding to any expression.</p>"},{"name":"InputSelectDirective","qualifiedName":"angular.InputSelectDirective","preview":"<p>HTML SELECT element with angular data-binding if used with\nNgModelDirective.</p>"},{"name":"NgNonBindableDirective","qualifiedName":"angular.NgNonBindableDirective","preview":"<p>Causes the compiler to ignore all Angular directives and markup on descendant\nnodes of the matching element.  Note, however, that other directives and\nmarkup on the element are still processed and that only descending the DOM\nfor compilation is prevented.</p>"},{"name":"NgSwitchDefaultDirective","qualifiedName":"angular.NgSwitchDefaultDirective"},{"name":"NgSwitchWhenDirective","qualifiedName":"angular.NgSwitchWhenDirective"},{"name":"NgSwitchDirective","qualifiedName":"angular.NgSwitchDirective","preview":"<p>The ngSwitch directive is used to conditionally swap DOM structure on your\ntemplate based on a scope expression. Elements within ngSwitch but without\nngSwitchWhen or ngSwitchDefault directives will be preserved at the location\nas specified in the template.</p>"},{"name":"NgStyleDirective","qualifiedName":"angular.NgStyleDirective","preview":"<p>The <code>ngStyle</code> directive allows you to set CSS style on an HTML element\nconditionally.</p>"},{"name":"NgAttributeDirective","qualifiedName":"angular.NgAttributeDirective","preview":"<p>In SVG some attributes have a specific syntax. Placing <code>{{interpolation}}</code> in\nthose attributes will break the attribute syntax, and browser will clear the\nattribute.</p>"},{"name":"NgSourceDirective","qualifiedName":"angular.NgSourceDirective","preview":"<p>In browser some attributes have network side-effect. If the attribute\nhas <code>{{interpolation}}</code> in it it may cause browser to fetch bogus URLs.</p>"},{"name":"NgBooleanAttributeDirective","qualifiedName":"angular.NgBooleanAttributeDirective","preview":"<p>Allows adding and removing the boolean attributes from the element.</p>"},{"name":"NgShowDirective","qualifiedName":"angular.NgShowDirective","preview":"<p>The ngShow directive shows or hides the given HTML element based on the\nexpression provided to the ngHide attribute. The element is shown or hidden\nby changing the removing or adding the ng-hide CSS class onto the element.</p>"},{"name":"NgHideDirective","qualifiedName":"angular.NgHideDirective","preview":"<p>The ngHide directive shows or hides the given HTML element based on the\nexpression provided to the ngHide attribute. The element is shown or hidden\nby changing the removing or adding the ng-hide CSS class onto the element.</p>"},{"name":"NgTemplateDirective","qualifiedName":"angular.NgTemplateDirective","preview":"<p>The NgTemplateElementDirective allows one to preload an Angular template\ninto the <a>angular.TemplateCache</a>.  It works on <code>&lt;template&gt;</code> and <code>&lt;script&gt;</code> elements\nthat have <code>type=\"text/ng-template</code>.  For such elements, The entire contents\nof the elements are loaded into the <a>angular.TemplateCache</a> under the URL specified\nby the <code>id</code> attribute.</p>"},{"name":"AbstractNgRepeatDirective","qualifiedName":"angular.AbstractNgRepeatDirective"},{"name":"NgShallowRepeatDirective","qualifiedName":"angular.NgShallowRepeatDirective","preview":"<p><em>EXPERIMENTAL:</em> This feature is experimental. We reserve the right to change\nor delete it.</p>"},{"name":"NgRepeatDirective","qualifiedName":"angular.NgRepeatDirective","preview":"<p>The <code>ngRepeat</code> directive instantiates a template once per item from a\ncollection. Each template instance gets its own scope, where the given loop\nvariable is set to the current collection item, and <code>$index</code> is set to the\nitem index or key.</p>"},{"name":"NgPluralizeDirective","qualifiedName":"angular.NgPluralizeDirective","preview":"<h2>Overview</h2>\n<p><code>ngPluralize</code> is a directive that displays messages according to locale rules.</p>"},{"name":"ContentEditableDirective","qualifiedName":"angular.ContentEditableDirective","preview":"<p>Usage (span could be replaced with any element which supports text content, such as <code>p</code>):</p>"},{"name":"InputRadioDirective","qualifiedName":"angular.InputRadioDirective","preview":"<p>Usage:</p>"},{"name":"NgFalseValue","qualifiedName":"angular.NgFalseValue","preview":"<p><code>ng-false-value</code> allows you to select any expression to be set to\n<code>ng-model</code> when checkbox is deselected&lt;input type=\"checkbox\">`.</p>"},{"name":"NgTrueValue","qualifiedName":"angular.NgTrueValue","preview":"<p><code>ng-true-value</code> allows you to select any expression to be set to\n<code>ng-model</code> when checkbox is selected on <code>&lt;input type=\"checkbox\"&gt;</code>.</p>"},{"name":"NgValue","qualifiedName":"angular.NgValue","preview":"<p>Use <code>ng-value</code> directive with <code>&lt;input type=\"radio\"&gt;</code> or <code>&lt;option&gt;</code> to\nallow binding to values other then strings. This is needed since the\n<code>value</code> attribute on DOM element <code>&lt;input type=\"radio\" value=\"foo\"&gt;</code> can\nonly be a string. With <code>ng-value</code> one can bind to any object.</p>"},{"name":"InputNumberLikeDirective","qualifiedName":"angular.InputNumberLikeDirective","preview":"<p>Usage:</p>"},{"name":"InputTextLikeDirective","qualifiedName":"angular.InputTextLikeDirective","preview":"<p>Usage:</p>"},{"name":"InputCheckboxDirective","qualifiedName":"angular.InputCheckboxDirective","preview":"<p>Usage:</p>"},{"name":"NgModel","qualifiedName":"angular.NgModel","preview":"<p>Ng-model directive is responsible for reading/writing to the model.\nThe directive itself is headless. (It does not know how to render or what\nevents to listen for.) It is meant to be used with other directives which\nprovide the rendering and listening capabilities. The directive itself\nknows how to convert the view-value into model-value and vice versa by\nallowing others to register converters (To be implemented). It also\nknows how to (in)validate the model and the form in which it is declared\n(to be implemented)</p>"},{"name":"NgNullControl","qualifiedName":"angular.NgNullControl"},{"name":"NgControl","qualifiedName":"angular.NgControl"},{"name":"NgIncludeDirective","qualifiedName":"angular.NgIncludeDirective","preview":"<p>Fetches, compiles and includes an external Angular template/HTML.</p>"},{"name":"NgUnlessDirective","qualifiedName":"angular.NgUnlessDirective","preview":"<p>The <code>ng-unless</code> directive compliments the <code>ng-if</code> (provided by\nNgIfAttrDirective) directive.</p>"},{"name":"NgIfDirective","qualifiedName":"angular.NgIfDirective","preview":"<p>The <code>ng-if</code> directive compliments the <code>ng-unless</code> (provided by\nNgUnlessAttrDirective) directive.</p>"},{"name":"NgCloakDirective","qualifiedName":"angular.NgCloakDirective","preview":"<p>The <code>ngCloak</code> directive is used to prevent the Angular html template from\nbeing briefly displayed by the browser in its raw (uncompiled) form while\nyour application is loading. Use this directive to avoid the undesirable\nflicker effect caused by the html template display.</p>"},{"name":"NgEventDirective","qualifiedName":"angular.NgEventDirective","preview":"<p>Allows you to specify custom behavior for DOM UI events such as mouse,\nkeyboard and touch events.</p>"},{"name":"NgClassEvenDirective","qualifiedName":"angular.NgClassEvenDirective","preview":"<p>The <code>ngClassOdd</code> and <code>ngClassEven</code> directives work exactly as\n{@link ng.directive:ngClass ngClass}, except it works in\nconjunction with <code>ngRepeat</code> and takes affect only on odd (even) rows.</p>"},{"name":"NgClassOddDirective","qualifiedName":"angular.NgClassOddDirective","preview":"<p>The <code>ngClassOdd</code> and <code>ngClassEven</code> directives work exactly as\n{@link ng.directive:ngClass ngClass}, except it works in\nconjunction with <code>ngRepeat</code> and takes affect only on odd (even) rows.</p>"},{"name":"NgClassDirective","qualifiedName":"angular.NgClassDirective","preview":"<p>The <code>ngClass</code> allows you to set CSS classes on HTML an element, dynamically,\nby databinding an expression that represents all classes to be added.</p>"},{"name":"NgBindTemplateDirective","qualifiedName":"angular.NgBindTemplateDirective","preview":"<p>The <a>angular.NgBindTemplateDirective</a> specifies that the element text content should\nbe replaced with the interpolation of the template in the ngBindTemplate\nattribute. Unlike ngBind, the ngBindTemplate can contain multiple {{ }}\nexpressions.</p>"},{"name":"NgBindHtmlDirective","qualifiedName":"angular.NgBindHtmlDirective","preview":"<p>Creates a binding that will innerHTML the result of evaluating the\n<code>expression</code> bound to <code>ng-bind-html</code> into the current element in a secure\nway.  This expression must evaluate to a string.  The innerHTML-ed content\nwill be sanitized using a default NodeValidator constructed as <code>new\ndom.NodeValidatorBuilder.common()</code>.  In a future version, when Strict\nContextual Escaping support has been added to Angular.dart, this directive\nwill allow one to bypass the sanitizaton and innerHTML arbitrary trusted\nHTML.</p>"},{"name":"NgBindDirective","qualifiedName":"angular.NgBindDirective","preview":"<p>The ngBind attribute tells Angular to replace the text content of the\nspecified HTML element with the value of a given expression, and to update\nthe text content when the value of that expression changes.</p>"},{"name":"NgADirective","qualifiedName":"angular.NgADirective","preview":"<p>@ngdoc directive\n@name ng.directive:a\n@restrict E</p>"},{"name":"NgDirectiveModule","qualifiedName":"angular.NgDirectiveModule"},{"name":"UppercaseFilter","qualifiedName":"angular.UppercaseFilter","preview":"<p>Converts string to uppercase.</p>"},{"name":"OrderByFilter","qualifiedName":"angular.OrderByFilter","preview":"<p>Orders the provided <a>dart-core.Iterable</a> by the <code>expression</code> predicate.</p>"},{"name":"NumberFilter","qualifiedName":"angular.NumberFilter","preview":"<p>Formats a number as text.</p>"},{"name":"LowercaseFilter","qualifiedName":"angular.LowercaseFilter","preview":"<p>Converts string to lowercase.</p>"},{"name":"LimitToFilter","qualifiedName":"angular.LimitToFilter","preview":"<p>Creates a new List or String containing only a prefix/suffix of the\nelements as specified by the <code>limit</code> parameter.</p>"},{"name":"JsonFilter","qualifiedName":"angular.JsonFilter","preview":"<p>Allows you to convert a JavaScript object into JSON string. This filter is\nmostly useful for debugging.</p>"},{"name":"FilterFilter","qualifiedName":"angular.FilterFilter","preview":"<p>Selects a subset of items from the provided <a>dart-core.List</a> and returns it as a new\n<a>dart-core.List</a>.</p>"},{"name":"DateFilter","qualifiedName":"angular.DateFilter","preview":"<p>Formats date to a string based on the requested format.\nSee Dart http://api.dartlang.org/docs/releases/latest/intl/DateFormat.html\nfor full formating options.</p>"},{"name":"CurrencyFilter","qualifiedName":"angular.CurrencyFilter","preview":"<p>Formats a number as a currency (ie $1,234.56). When no currency symbol is\nprovided, '$' used.</p>"},{"name":"NgFilterModule","qualifiedName":"angular.NgFilterModule"},{"name":"NgBindRouteDirective","qualifiedName":"angular.NgBindRouteDirective","preview":"<p>A directive that allows to bind child components/directives to a specific\nroute.</p>"},{"name":"RouteProvider","qualifiedName":"angular.RouteProvider","preview":"<p>Class that can be injected to retrieve information about the current route.\nFor example:</p>"},{"name":"NgViewDirective","qualifiedName":"angular.NgViewDirective","preview":"<p>A directive that works with the <a>route-client.Router</a> and loads the template associated\nwith the current route.</p>"},{"name":"NgRoutingHelper","qualifiedName":"angular.NgRoutingHelper","preview":"<p>A singleton helper service that handles routing initialization, global\nevents and view registries.</p>"},{"name":"RouteInitializer","qualifiedName":"angular.RouteInitializer","preview":"<p>An interface that must be implemented by the user of routing library and\nshould include the route initialization.</p>"},{"name":"NgRouteCfg","qualifiedName":"angular.NgRouteCfg"},{"name":"ViewFactory","qualifiedName":"angular.ViewFactory","preview":"<p>A factory of route to template bindings.</p>"},{"name":"NgRoutingUsePushState","qualifiedName":"angular.NgRoutingUsePushState","preview":"<p>Allows configuration of Router.useFragment. By default <a>angular.NgRoutingUsePushState.usePushState</a> is\ntrue, so the router will listen to <a>dart-dom-html.Window.onPopState</a> and route URLs like\n\"http://host:port/foo/bar?baz=qux\". Both the path and query parts of the URL\nare used by the router. If <a>angular.NgRoutingUsePushState.usePushState</a> is false, router will listen to\n<a>dart-dom-html.Window.onHashChange</a> and route URLs like\n\"http://host:port/path#/foo/bar?baz=qux\". Everything after hash (#) is used\nby the router.</p>"},{"name":"NgRoutingModule","qualifiedName":"angular.NgRoutingModule"},{"name":"NgApp","qualifiedName":"angular.NgApp","preview":"<p>Holds a reference to the root of the application used by ngBootstrap.</p>"},{"name":"AngularModule","qualifiedName":"angular.AngularModule","preview":"<p>This is the top level module which describes the whole of angular.</p>"}],"typedef":{"ObjectFactory":{"name":"ObjectFactory","qualifiedName":"angular.ObjectFactory","comment":"","return":"dart-core.Object","parameters":{"type":{"name":"type","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.Type","inner":[]}],"value":"null","annotations":[]},"requestor":{"name":"requestor","optional":"false","named":"false","default":"false","type":[{"outer":"angular.Injector","inner":[]}],"value":"null","annotations":[]}},"annotations":[],"generics":{}},"TypeFactory":{"name":"TypeFactory","qualifiedName":"angular.TypeFactory","comment":"","return":"dart-core.Object","parameters":{"factory":{"name":"factory","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]}},"annotations":[],"generics":{}},"Visibility":{"name":"Visibility","qualifiedName":"angular.Visibility","comment":"<p>Visibility determines if the instance in the defining module is visible to\nthe requesting injector. If true is returned, then the instance from the\ndefining injector is provided. If false is returned, the injector keeps\nwalking up the tree to find another visible instance.</p>","return":"dart-core.bool","parameters":{"requesting":{"name":"requesting","optional":"false","named":"false","default":"false","type":[{"outer":"angular.Injector","inner":[]}],"value":"null","annotations":[]},"defining":{"name":"defining","optional":"false","named":"false","default":"false","type":[{"outer":"angular.Injector","inner":[]}],"value":"null","annotations":[]}},"annotations":[],"generics":{}},"CreationStrategy":{"name":"CreationStrategy","qualifiedName":"angular.CreationStrategy","comment":"<p>Creation strategy is asked to return an instance of the type after\n[Injector.get] locates the defining injector that has no instance cached.\n[directInstantation] is true when an instance is created directly from\n[Injector.instantiate].</p>","return":"dynamic","parameters":{"requesting":{"name":"requesting","optional":"false","named":"false","default":"false","type":[{"outer":"angular.Injector","inner":[]}],"value":"null","annotations":[]},"defining":{"name":"defining","optional":"false","named":"false","default":"false","type":[{"outer":"angular.Injector","inner":[]}],"value":"null","annotations":[]},"factory":{"name":"factory","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]}},"annotations":[],"generics":{}},"FactoryFn":{"name":"FactoryFn","qualifiedName":"angular.FactoryFn","comment":"","return":"dynamic","parameters":{"injector":{"name":"injector","optional":"false","named":"false","default":"false","type":[{"outer":"angular.Injector","inner":[]}],"value":"null","annotations":[]}},"annotations":[],"generics":{}},"ZoneOnError":{"name":"ZoneOnError","qualifiedName":"angular.ZoneOnError","comment":"","return":"void","parameters":{"error":{"name":"error","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"stacktrace":{"name":"stacktrace","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"longStacktrace":{"name":"longStacktrace","optional":"false","named":"false","default":"false","type":[{"outer":"angular.LongStackTrace","inner":[]}],"value":"null","annotations":[]}},"annotations":[],"generics":{}},"ZoneOnTurn":{"name":"ZoneOnTurn","qualifiedName":"angular.ZoneOnTurn","comment":"","return":"void","parameters":{},"annotations":[],"generics":{}},"EvalFunction1":{"name":"EvalFunction1","qualifiedName":"angular.EvalFunction1","comment":"","return":"dynamic","parameters":{"context":{"name":"context","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[],"generics":{}},"EvalFunction0":{"name":"EvalFunction0","qualifiedName":"angular.EvalFunction0","comment":"","return":"dynamic","parameters":{},"annotations":[],"generics":{}},"DirectiveSelector":{"name":"DirectiveSelector","qualifiedName":"angular.DirectiveSelector","comment":"<p>DirectiveSelector is a function which given a node it will return a\nlist of [DirectiveRef]s which are triggered by this node.</p>\n<p>DirectiveSelector is used by the [Compiler] during the template walking\nto extract the [DirectiveRef]s.</p>\n<p>DirectiveSelector can be created using the [directiveSelectorFactory]\nmethod.</p>\n<p>The DirectiveSelector supports CSS selectors which do not cross\nelement boundaries only. The selectors can have any mix of element-name,\nclass-names and attribute-names.</p>\n<p>Examples:</p><pre>\n  element\n  .class\n  [attribute]\n  [attribute=value]\n  element[attribute1][attribute2=value]\n</pre>","return":"dart-core.List","parameters":{"node":{"name":"node","optional":"false","named":"false","default":"false","type":[{"outer":"dart-dom-html.Node","inner":[]}],"value":"null","annotations":[]}},"annotations":[],"generics":{}},"ResponseError":{"name":"ResponseError","qualifiedName":"angular.ResponseError","comment":"","return":"dynamic","parameters":{"dynamic":{"name":"dynamic","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[],"generics":{}},"Response":{"name":"Response","qualifiedName":"angular.Response","comment":"","return":"dynamic","parameters":{"HttpResponse":{"name":"HttpResponse","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[],"generics":{}},"RequestErrorInterceptor":{"name":"RequestErrorInterceptor","qualifiedName":"angular.RequestErrorInterceptor","comment":"","return":"dynamic","parameters":{"dynamic":{"name":"dynamic","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[],"generics":{}},"RequestInterceptor":{"name":"RequestInterceptor","qualifiedName":"angular.RequestInterceptor","comment":"","return":"dynamic","parameters":{"HttpResponseConfig":{"name":"HttpResponseConfig","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[],"generics":{}},"AttributeChanged":{"name":"AttributeChanged","qualifiedName":"angular.AttributeChanged","comment":"<p>Callback function used to notify of attribute changes.</p>","return":"dynamic","parameters":{"newValue":{"name":"newValue","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[],"generics":{}},"ApplyMapping":{"name":"ApplyMapping","qualifiedName":"angular.ApplyMapping","comment":"","return":"dynamic","parameters":{"attrs":{"name":"attrs","optional":"false","named":"false","default":"false","type":[{"outer":"angular.NodeAttrs","inner":[]}],"value":"null","annotations":[]},"scope":{"name":"scope","optional":"false","named":"false","default":"false","type":[{"outer":"angular.Scope","inner":[]}],"value":"null","annotations":[]},"dst":{"name":"dst","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.Object","inner":[]}],"value":"null","annotations":[]},"filters":{"name":"filters","optional":"false","named":"false","default":"false","type":[{"outer":"angular.FilterMap","inner":[]}],"value":"null","annotations":[]},"notify":{"name":"notify","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]}},"annotations":[],"generics":{}},"BoundSetter":{"name":"BoundSetter","qualifiedName":"angular.BoundSetter","comment":"","return":"dynamic","parameters":{"value":{"name":"value","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"locals":{"name":"locals","optional":"true","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[],"generics":{}},"BoundGetter":{"name":"BoundGetter","qualifiedName":"angular.BoundGetter","comment":"","return":"dynamic","parameters":{"locals":{"name":"locals","optional":"true","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[],"generics":{}},"Setter":{"name":"Setter","qualifiedName":"angular.Setter","comment":"","return":"dynamic","parameters":{"self":{"name":"self","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"value":{"name":"value","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[],"generics":{}},"Getter":{"name":"Getter","qualifiedName":"angular.Getter","comment":"","return":"dynamic","parameters":{"self":{"name":"self","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[],"generics":{}},"LocalsWrapper":{"name":"LocalsWrapper","qualifiedName":"angular.LocalsWrapper","comment":"","return":"dynamic","parameters":{"context":{"name":"context","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"locals":{"name":"locals","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[],"generics":{}},"ItemEval":{"name":"ItemEval","qualifiedName":"angular.ItemEval","comment":"","return":"dynamic","parameters":{"item":{"name":"item","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"index":{"name":"index","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]}},"annotations":[],"generics":{}},"Mapper":{"name":"Mapper","qualifiedName":"angular.Mapper","comment":"","return":"dynamic","parameters":{"e":{"name":"e","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[],"generics":{}},"Equals":{"name":"Equals","qualifiedName":"angular.Equals","comment":"","return":"dart-core.bool","parameters":{"a":{"name":"a","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"b":{"name":"b","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[],"generics":{}},"Predicate":{"name":"Predicate","qualifiedName":"angular.Predicate","comment":"","return":"dart-core.bool","parameters":{"e":{"name":"e","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[],"generics":{}},"RouteInitializerFn":{"name":"RouteInitializerFn","qualifiedName":"angular.RouteInitializerFn","comment":"<p>An typedef that must be implemented by the user of routing library and\nshould include the route initialization.</p>\n<p>The function will be called by the framework once the router is\ninstantiated but before [NgBindRouteDirective] and [NgViewDirective].</p>","return":"void","parameters":{"router":{"name":"router","optional":"false","named":"false","default":"false","type":[{"outer":"route-client.Router","inner":[]}],"value":"null","annotations":[]},"viewFactory":{"name":"viewFactory","optional":"false","named":"false","default":"false","type":[{"outer":"angular.ViewFactory","inner":[]}],"value":"null","annotations":[]}},"annotations":[],"generics":{}}},"error":[{"name":"CircularDependencyError","qualifiedName":"angular.CircularDependencyError"},{"name":"NoProviderError","qualifiedName":"angular.NoProviderError"}]},"packageName":"","packageIntro":""}