{"name":"Isolate","qualifiedName":"dart-isolate.Isolate","comment":"","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"controlPort":{"name":"controlPort","qualifiedName":"dart-isolate.Isolate.controlPort","comment":"<p>Control port used to send control messages to the isolate.</p>\n<p>This class provides helper functions that sends control messages\nto the control port.</p>","final":"true","static":"false","constant":"false","type":[{"outer":"dart-isolate.SendPort","inner":[]}],"annotations":[]},"pauseCapability":{"name":"pauseCapability","qualifiedName":"dart-isolate.Isolate.pauseCapability","comment":"","final":"true","static":"false","constant":"false","type":[{"outer":"dart-isolate.Capability","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{"spawn":{"name":"spawn","qualifiedName":"dart-isolate.Isolate.spawn","comment":"<p>Creates and spawns an isolate that shares the same code as the current\nisolate.</p>\n<p>The argument <a>dart-isolate.Isolate.spawn.entryPoint</a> specifies the entry point of the spawned\nisolate. It must be a top-level function or a static method that\ntakes one argument - that is, one-parameter functions that can be\ncompile-time constant function values.\nIt is not allowed to pass the value of function expressions or an instance\nmethod extracted from an object.</p>\n<p>The entry-point function is invoked with the initial <a>dart-isolate.Isolate.spawn.message</a>.\nUsually the initial <a>dart-isolate.Isolate.spawn.message</a> contains a <a>dart-isolate.SendPort</a> so\nthat the spawner and spawnee can communicate with each other.</p>\n<p>Returns a future that will complete with an <a>dart-isolate.Isolate</a> instance if the\nspawning succeeded. It will complete with an error otherwise.</p>","commentFrom":"","inheritedFrom":"","static":"true","abstract":"false","constant":"false","return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-isolate.Isolate","inner":[]}]}],"parameters":{"entryPoint":{"name":"entryPoint","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]},"message":{"name":"message","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"spawnUri":{"name":"spawnUri","qualifiedName":"dart-isolate.Isolate.spawnUri","comment":"<p>Creates and spawns an isolate that runs the code from the library with\nthe specified URI.</p>\n<p>The isolate starts executing the top-level <code>main</code> function of the library\nwith the given URI.</p>\n<p>The target <code>main</code> must be a subtype of one of these three signatures:</p><ul><li><code>main()</code></li><li><code>main(args)</code></li><li><code>main(args, message)</code></li></ul>\n<p>When present, the parameter <code>args</code> is set to the provided <a>dart-isolate.Isolate.spawnUri.args</a> list.\nWhen present, the parameter <code>message</code> is set to the initial <a>dart-isolate.Isolate.spawnUri.message</a>.</p>\n<p>Returns a future that will complete with an <a>dart-isolate.Isolate</a> instance if the\nspawning succeeded. It will complete with an error otherwise.</p>","commentFrom":"","inheritedFrom":"","static":"true","abstract":"false","constant":"false","return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-isolate.Isolate","inner":[]}]}],"parameters":{"uri":{"name":"uri","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.Uri","inner":[]}],"value":"null","annotations":[]},"args":{"name":"args","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.String","inner":[]}]}],"value":"null","annotations":[]},"message":{"name":"message","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"pause":{"name":"pause","qualifiedName":"dart-isolate.Isolate.pause","comment":"<p>Requests the isolate to pause.</p>\n<p>The isolate should stop handling events by pausing its event queue.\nThe request will eventually make the isolate stop doing anything.\nIt will be handled before any other messages sent to the isolate from\nthe current isolate, but no other guarantees are provided.</p>\n<p>If <a>dart-isolate.Isolate.pause.resumeCapability</a> is provided, it is used to identity the pause,\nand must be used again to end the pause using <a>dart-isolate.Isolate.resume</a>.\nOtherwise a new capability is created and returned.</p>\n<p>If an isolate is paused more than once using the same capabilty,\nonly one resume with that capability is needed to end the pause.</p>\n<p>If an isolate is paused using more than one capability,\nthey must all be individully ended before the isolate resumes.</p>\n<p>Returns the capability that must be used to resume end the pause.</p>\n<p>WARNING: This method is not handled on any platform yet.</p>","commentFrom":"","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-isolate.Capability","inner":[]}],"parameters":{"resumeCapability":{"name":"resumeCapability","optional":"true","named":"false","default":"false","type":[{"outer":"dart-isolate.Capability","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"resume":{"name":"resume","qualifiedName":"dart-isolate.Isolate.resume","comment":"<p>Resumes a paused isolate.</p>\n<p>Sends a message to an isolate requesting that it ends a pause\nthat was requested using the <a>dart-isolate.Isolate.resume.resumeCapability</a>.</p>\n<p>The capability must be one returned by a call to <a>dart-isolate.Isolate.pause</a> on this\nisolate, otherwise the resume call does nothing.</p>\n<p>WARNING: This method is not handled on any platform yet.</p>","commentFrom":"","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"void","inner":[]}],"parameters":{"resumeCapability":{"name":"resumeCapability","optional":"false","named":"false","default":"false","type":[{"outer":"dart-isolate.Capability","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"dart-isolate.Isolate.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>dart-isolate.Isolate.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"dart-isolate.Isolate.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"dart-isolate.Isolate.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>dart-isolate.Isolate.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>dart-isolate.Isolate.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"dart-isolate.Isolate.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"dart-isolate.Isolate.noSuchMethod","comment":"<p><a>dart-isolate.Isolate.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>dart-isolate.Isolate.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>dart-isolate.Isolate.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>dart-isolate.Isolate.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}