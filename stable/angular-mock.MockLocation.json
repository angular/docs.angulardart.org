{"name":"MockLocation","qualifiedName":"angular-mock.MockLocation","comment":"","isAbstract":false,"superclass":"angular-mock.Mock","implements":["angular-mock.Location"],"subclass":[],"variables":{},"inheritedVariables":{"name":{"name":"name","qualifiedName":"angular-mock.Mock.name","comment":"<p>The mock name. Needed if the log is shared; optional otherwise.</p>","final":"true","static":"false","constant":"false","type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"log":{"name":"log","qualifiedName":"angular-mock.Mock.log","comment":"<p>The <a>angular-mock.Mock.log</a> of calls made. Only used if <a>angular-mock.Mock.name</a> is null.</p>","final":"false","static":"false","constant":"false","type":[{"outer":"unittest-mock.LogEntryList","inner":[]}],"annotations":[]},"ancestorOrigins":{"name":"ancestorOrigins","qualifiedName":"angular-mock.Location.ancestorOrigins","comment":"","final":"true","static":"false","constant":"false","type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.String","inner":[]}]}],"annotations":[{"name":"metadata.DomName","parameters":["Location.ancestorOrigins"]},{"name":"metadata.Experimental","parameters":[]}]},"hash":{"name":"hash","qualifiedName":"angular-mock.Location.hash","comment":"","final":"false","static":"false","constant":"false","type":[{"outer":"dart-core.String","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Location.hash"]}]},"host":{"name":"host","qualifiedName":"angular-mock.Location.host","comment":"","final":"false","static":"false","constant":"false","type":[{"outer":"dart-core.String","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Location.host"]}]},"hostname":{"name":"hostname","qualifiedName":"angular-mock.Location.hostname","comment":"","final":"false","static":"false","constant":"false","type":[{"outer":"dart-core.String","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Location.hostname"]}]},"href":{"name":"href","qualifiedName":"angular-mock.Location.href","comment":"","final":"false","static":"false","constant":"false","type":[{"outer":"dart-core.String","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Location.href"]}]},"pathname":{"name":"pathname","qualifiedName":"angular-mock.Location.pathname","comment":"","final":"false","static":"false","constant":"false","type":[{"outer":"dart-core.String","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Location.pathname"]}]},"port":{"name":"port","qualifiedName":"angular-mock.Location.port","comment":"","final":"false","static":"false","constant":"false","type":[{"outer":"dart-core.String","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Location.port"]}]},"protocol":{"name":"protocol","qualifiedName":"angular-mock.Location.protocol","comment":"","final":"false","static":"false","constant":"false","type":[{"outer":"dart-core.String","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Location.protocol"]}]},"search":{"name":"search","qualifiedName":"angular-mock.Location.search","comment":"","final":"false","static":"false","constant":"false","type":[{"outer":"dart-core.String","inner":[]}],"annotations":[{"name":"metadata.DomName","parameters":["Location.search"]}]}},"methods":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"angular-mock.MockLocation.noSuchMethod","comment":"<p><a>angular-mock.MockLocation.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>angular-mock.MockLocation.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>angular-mock.MockLocation.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>angular-mock.MockLocation.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"dart-core.Object.noSuchMethod","inheritedFrom":"","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{"logging=":{"name":"logging=","qualifiedName":"angular-mock.MockLocation.logging=","comment":"","commentFrom":"","inheritedFrom":"angular-mock.Mock.logging=","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{"value":{"name":"value","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.bool","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"href=":{"name":"href=","qualifiedName":"angular-mock.MockLocation.href=","comment":"","commentFrom":"","inheritedFrom":"angular-mock.LocationBase.href=","static":"false","abstract":"true","constant":"false","return":[{"outer":"void","inner":[]}],"parameters":{"val":{"name":"val","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"angular-mock.MockLocation.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>angular-mock.MockLocation.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"angular-mock.MockLocation.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"logging":{"name":"logging","qualifiedName":"angular-mock.MockLocation.logging","comment":"","commentFrom":"","inheritedFrom":"angular-mock.Mock.logging","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"origin":{"name":"origin","qualifiedName":"angular-mock.MockLocation.origin","comment":"","commentFrom":"","inheritedFrom":"angular-mock.Location.origin","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Location.origin"]}]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"angular-mock.MockLocation.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>angular-mock.MockLocation.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>angular-mock.MockLocation.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"angular-mock.MockLocation.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"angular-mock.Location.toString","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Location.toString"]}]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"angular-mock.MockLocation.noSuchMethod","comment":"<p><a>angular-mock.MockLocation.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>angular-mock.MockLocation.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>angular-mock.MockLocation.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>angular-mock.MockLocation.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":"false","abstract":"false","constant":"false","return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"when":{"name":"when","qualifiedName":"angular-mock.MockLocation.when","comment":"<p><a>angular-mock.MockLocation.when</a> is used to create a new or extend an existing <a>unittest-mock.Behavior</a>.\nA [CallMatcher] [filter] must be supplied, and the <a>unittest-mock.Behavior</a>s for\nthat signature are returned (being created first if needed).</p>\n<p>Typical use case:</p>\n<pre><code>mock.when(callsTo(...)).alwaysReturn(...);\n</code></pre>","commentFrom":"","inheritedFrom":"angular-mock.Mock.when","static":"false","abstract":"false","constant":"false","return":[{"outer":"unittest-mock.Behavior","inner":[]}],"parameters":{"logFilter":{"name":"logFilter","optional":"false","named":"false","default":"false","type":[{"outer":"unittest-mock.CallMatcher","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"verifyZeroInteractions":{"name":"verifyZeroInteractions","qualifiedName":"angular-mock.MockLocation.verifyZeroInteractions","comment":"<p><a>angular-mock.MockLocation.verifyZeroInteractions</a> returns true if no calls were made</p>","commentFrom":"","inheritedFrom":"angular-mock.Mock.verifyZeroInteractions","static":"false","abstract":"false","constant":"false","return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"getLogs":{"name":"getLogs","qualifiedName":"angular-mock.MockLocation.getLogs","comment":"<p><a>angular-mock.MockLocation.getLogs</a> extracts all calls from the call log that match the\n<a>angular-mock.MockLocation.getLogs.logFilter</a>, and returns the matching list of <a>unittest-mock.LogEntry</a>s. If\n<a>angular-mock.MockLocation.getLogs.destructive</a> is false (the default) the matching calls are left\nin the log, else they are removed. Removal allows us to verify a\nset of interactions and then verify that there are no other\ninteractions left. <a>angular-mock.MockLocation.getLogs.actionMatcher</a> can be used to further\nrestrict the returned logs based on the action the mock performed.\n<a>angular-mock.MockLocation.getLogs.logFilter</a> can be a <a>unittest-mock.CallMatcher</a> or a predicate function that\ntakes a <a>unittest-mock.LogEntry</a> and returns a bool.</p>\n<p>Typical usage:</p>\n<pre><code>getLogs(callsTo(...)).verify(...);\n</code></pre>","commentFrom":"","inheritedFrom":"angular-mock.Mock.getLogs","static":"false","abstract":"false","constant":"false","return":[{"outer":"unittest-mock.LogEntryList","inner":[]}],"parameters":{"logFilter":{"name":"logFilter","optional":"true","named":"false","default":"false","type":[{"outer":"unittest-mock.CallMatcher","inner":[]}],"value":"null","annotations":[]},"actionMatcher":{"name":"actionMatcher","optional":"true","named":"false","default":"false","type":[{"outer":"unittest-matcher.Matcher","inner":[]}],"value":"null","annotations":[]},"destructive":{"name":"destructive","optional":"true","named":"false","default":"true","type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]}},"annotations":[]},"calls":{"name":"calls","qualifiedName":"angular-mock.MockLocation.calls","comment":"<p>Useful shorthand method that creates a <a>unittest-mock.CallMatcher</a> from its arguments\nand then calls <a>angular-mock.MockLocation.getLogs</a>.</p>","commentFrom":"","inheritedFrom":"angular-mock.Mock.calls","static":"false","abstract":"false","constant":"false","return":[{"outer":"unittest-mock.LogEntryList","inner":[]}],"parameters":{"method":{"name":"method","optional":"false","named":"false","default":"false","type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"arg0":{"name":"arg0","optional":"true","named":"false","default":"true","type":[{"outer":"dynamic","inner":[]}],"value":"ConstructedConstant(_Sentinel())","annotations":[]},"arg1":{"name":"arg1","optional":"true","named":"false","default":"true","type":[{"outer":"dynamic","inner":[]}],"value":"ConstructedConstant(_Sentinel())","annotations":[]},"arg2":{"name":"arg2","optional":"true","named":"false","default":"true","type":[{"outer":"dynamic","inner":[]}],"value":"ConstructedConstant(_Sentinel())","annotations":[]},"arg3":{"name":"arg3","optional":"true","named":"false","default":"true","type":[{"outer":"dynamic","inner":[]}],"value":"ConstructedConstant(_Sentinel())","annotations":[]},"arg4":{"name":"arg4","optional":"true","named":"false","default":"true","type":[{"outer":"dynamic","inner":[]}],"value":"ConstructedConstant(_Sentinel())","annotations":[]},"arg5":{"name":"arg5","optional":"true","named":"false","default":"true","type":[{"outer":"dynamic","inner":[]}],"value":"ConstructedConstant(_Sentinel())","annotations":[]},"arg6":{"name":"arg6","optional":"true","named":"false","default":"true","type":[{"outer":"dynamic","inner":[]}],"value":"ConstructedConstant(_Sentinel())","annotations":[]},"arg7":{"name":"arg7","optional":"true","named":"false","default":"true","type":[{"outer":"dynamic","inner":[]}],"value":"ConstructedConstant(_Sentinel())","annotations":[]},"arg8":{"name":"arg8","optional":"true","named":"false","default":"true","type":[{"outer":"dynamic","inner":[]}],"value":"ConstructedConstant(_Sentinel())","annotations":[]},"arg9":{"name":"arg9","optional":"true","named":"false","default":"true","type":[{"outer":"dynamic","inner":[]}],"value":"ConstructedConstant(_Sentinel())","annotations":[]}},"annotations":[]},"resetBehavior":{"name":"resetBehavior","qualifiedName":"angular-mock.MockLocation.resetBehavior","comment":"<p>Clear the behaviors for the Mock.</p>","commentFrom":"","inheritedFrom":"angular-mock.Mock.resetBehavior","static":"false","abstract":"false","constant":"false","return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"clearLogs":{"name":"clearLogs","qualifiedName":"angular-mock.MockLocation.clearLogs","comment":"<p>Clear the logs for the Mock.</p>","commentFrom":"","inheritedFrom":"angular-mock.Mock.clearLogs","static":"false","abstract":"false","constant":"false","return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"reset":{"name":"reset","qualifiedName":"angular-mock.MockLocation.reset","comment":"<p>Clear both logs and behavior.</p>","commentFrom":"","inheritedFrom":"angular-mock.Mock.reset","static":"false","abstract":"false","constant":"false","return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"assign":{"name":"assign","qualifiedName":"angular-mock.MockLocation.assign","comment":"","commentFrom":"","inheritedFrom":"angular-mock.Location.assign","static":"false","abstract":"false","constant":"false","return":[{"outer":"void","inner":[]}],"parameters":{"url":{"name":"url","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Location.assign"]}]},"reload":{"name":"reload","qualifiedName":"angular-mock.MockLocation.reload","comment":"","commentFrom":"","inheritedFrom":"angular-mock.Location.reload","static":"false","abstract":"false","constant":"false","return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[{"name":"metadata.DomName","parameters":["Location.reload"]}]},"replace":{"name":"replace","qualifiedName":"angular-mock.MockLocation.replace","comment":"","commentFrom":"","inheritedFrom":"angular-mock.Location.replace","static":"false","abstract":"false","constant":"false","return":[{"outer":"void","inner":[]}],"parameters":{"url":{"name":"url","optional":"false","named":"false","default":"false","type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"metadata.DomName","parameters":["Location.replace"]}]}}},"annotations":[{"name":"dart-core._Proxy","parameters":[]}],"generics":{}}